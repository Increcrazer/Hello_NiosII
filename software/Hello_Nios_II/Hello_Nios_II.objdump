
Hello_Nios_II.elf:     file format elf32-littlenios2
Hello_Nios_II.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005454 memsz 0x00005454 flags r-x
    LOAD off    0x00006474 vaddr 0x00025474 paddr 0x00026ee0 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000894c vaddr 0x0002894c paddr 0x0002894c align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005270  000201bc  000201bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  0002542c  0002542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00025474  00026ee0  00006474  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0002894c  0002894c  0000894c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00028a9c  00028a9c  00007ee0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000930  00000000  00000000  00007f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015e3a  00000000  00000000  00008838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005cbc  00000000  00000000  0001e672  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006527  00000000  00000000  0002432e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001464  00000000  00000000  0002a858  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002201  00000000  00000000  0002bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000044ae  00000000  00000000  0002debd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00034a6f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00034a72  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00034a77  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00034a78  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00034a79  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00034a82  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00034a8b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  00034a94  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000040  00000000  00000000  00034a99  2**0
                  CONTENTS, READONLY
 26 .jdi          000035ba  00000000  00000000  00034ad9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000289db  00000000  00000000  00038093  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201bc l    d  .text	00000000 .text
0002542c l    d  .rodata	00000000 .rodata
00025474 l    d  .rwdata	00000000 .rwdata
0002894c l    d  .bss	00000000 .bss
00028a9c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Hello_Nios_II_bsp//obj/HAL/src/crt0.o
000201f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00025474 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021cd4 l     F .text	00000008 __fp_lock
00021cdc l     F .text	00000008 __fp_unlock
00021cf0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00022d74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022e9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00022ec8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00022fd0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000230cc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000231b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023394 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00026ed0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023618 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023768 l     F .text	00000038 alt_dev_reg
00025e48 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023a40 l     F .text	00000204 altera_avalon_jtag_uart_irq
00023c44 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000243c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024858 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000249b0 l     F .text	00000050 alt_get_errno
00024a00 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00022c40 g     F .text	00000054 _isatty_r
000232dc g     F .text	00000078 alt_main
0002022c g     F .text	000000b8 _puts_r
0002899c g     O .bss	00000100 alt_irq
00022c94 g     F .text	0000005c _lseek_r
00026ee0 g       *ABS*	00000000 __flash_rwdata_start
00028a9c g       *ABS*	00000000 __alt_heap_start
000229c0 g     F .text	0000005c __sseek
00022038 g     F .text	00000010 __sinit
00021e90 g     F .text	00000078 __sfmoreglue
00023374 g     F .text	00000020 __malloc_unlock
000211fc g     F .text	0000015c memmove
00022020 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022be8 g     F .text	00000058 _fstat_r
00028958 g     O .bss	00000004 errno
0002293c g     F .text	00000008 __seofread
00028960 g     O .bss	00000004 alt_argv
0002eea8 g       *ABS*	00000000 _gp
00025cc8 g     O .rwdata	00000180 alt_fd_list
00024e10 g     F .text	00000090 alt_find_dev
000210c4 g     F .text	00000138 memcpy
00021ce4 g     F .text	0000000c _cleanup_r
00024938 g     F .text	00000078 alt_io_redirect
0002542c g       *ABS*	00000000 __DTOR_END__
000202e4 g     F .text	00000014 puts
00023e40 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00023020 g     F .text	000000ac isatty
00028954 g     O .bss	00000004 __malloc_top_pad
00020390 g     F .text	000004a4 __sfvwrite_r
000218f8 g     F .text	00000054 _sbrk_r
00022cf0 g     F .text	0000005c _read_r
00026ec8 g     O .rwdata	00000004 alt_max_fd
00022ad4 g     F .text	00000100 _fclose_r
00021ca4 g     F .text	00000030 fflush
00028950 g     O .bss	00000004 __malloc_max_sbrked_mem
00023200 g     F .text	000000dc lseek
00026ea8 g     O .rwdata	00000004 _global_impure_ptr
00021358 g     F .text	000005a0 _realloc_r
00028a9c g       *ABS*	00000000 __bss_end
00024768 g     F .text	000000f0 alt_iic_isr_register
00024cec g     F .text	00000104 alt_tick
00022058 g     F .text	00000018 __fp_lock_all
0002471c g     F .text	0000004c alt_ic_irq_enabled
00024c54 g     F .text	00000098 alt_alarm_stop
00028968 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000d0 alt_irq_handler
00025ca0 g     O .rwdata	00000028 alt_dev_null
000243a4 g     F .text	0000001c alt_dcache_flush_all
00026ee0 g       *ABS*	00000000 __ram_rwdata_end
00026ec0 g     O .rwdata	00000008 alt_dev_list
00023668 g     F .text	00000100 write
00025474 g       *ABS*	00000000 __ram_rodata_end
00022f18 g     F .text	000000b8 fstat
00028a9c g       *ABS*	00000000 end
0002397c g     F .text	000000c4 altera_avalon_jtag_uart_init
0002542c g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
0002404c g     F .text	00000218 altera_avalon_jtag_uart_write
00022048 g     F .text	00000004 __sfp_lock_acquire
00020fdc g     F .text	000000e8 memchr
000221ac g     F .text	000002f0 _free_r
00025264 g     F .text	00000194 __call_exitprocs
00026eb0 g     O .rwdata	00000004 __malloc_sbrk_base
000201bc g     F .text	0000003c _start
0002896c g     O .bss	00000004 _alt_tick_rate
00028970 g     O .bss	00000004 _alt_nticks
000233e4 g     F .text	00000104 read
000237d4 g     F .text	00000044 alt_sys_init
00025150 g     F .text	00000114 __register_exitproc
00023cec g     F .text	00000068 altera_avalon_jtag_uart_close
00022d4c g     F .text	00000028 .hidden __mulsi3
00025474 g       *ABS*	00000000 __ram_rwdata_start
0002542c g       *ABS*	00000000 __ram_rodata_start
00028974 g     O .bss	00000028 __malloc_current_mallinfo
00023818 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024fb4 g     F .text	000000d4 alt_get_fd
00022a80 g     F .text	00000054 _close_r
000250d4 g     F .text	0000007c memcmp
000238d8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00028a9c g       *ABS*	00000000 __alt_stack_base
00023928 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002194c g     F .text	00000130 __swsetup_r
00021f08 g     F .text	00000118 __sfp
00025898 g     O .rwdata	00000408 __malloc_av_
00022054 g     F .text	00000004 __sinit_lock_release
000228e8 g     F .text	00000054 __sread
00024ea0 g     F .text	00000114 alt_find_file
00024410 g     F .text	000000a4 alt_dev_llist_insert
00023354 g     F .text	00000020 __malloc_lock
00023568 g     F .text	000000b0 sbrk
00021a7c g     F .text	00000228 _fflush_r
0002894c g       *ABS*	00000000 __bss_start
000227c4 g     F .text	00000124 memset
000201f8 g     F .text	00000034 main
00028964 g     O .bss	00000004 alt_envp
0002894c g     O .bss	00000004 __malloc_max_total_mem
00023878 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022a1c g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
00022bd4 g     F .text	00000014 fclose
00020834 g     F .text	000007a8 _malloc_r
00026ecc g     O .rwdata	00000004 alt_errno
0002249c g     F .text	000000b8 _fwalk
00022088 g     F .text	00000124 _malloc_trim_r
0002542c g       *ABS*	00000000 __CTOR_END__
0002542c g       *ABS*	00000000 __flash_rodata_start
0002542c g       *ABS*	00000000 __DTOR_LIST__
000237a0 g     F .text	00000034 alt_irq_init
000234e8 g     F .text	00000080 alt_release_fd
00025088 g     F .text	00000014 atexit
00022a24 g     F .text	0000005c _write_r
00026eac g     O .rwdata	00000004 _impure_ptr
0002895c g     O .bss	00000004 alt_argc
00024510 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00022070 g     F .text	00000018 __fp_unlock_all
00026eb8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00024588 g     F .text	00000050 alt_ic_isr_register
00026ee0 g       *ABS*	00000000 _edata
00028a9c g       *ABS*	00000000 _end
000201bc g       *ABS*	00000000 __ram_exceptions_end
00023d54 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00024678 g     F .text	000000a4 alt_ic_irq_disable
00022944 g     F .text	0000007c __swrite
00026eb4 g     O .rwdata	00000004 __malloc_trim_threshold
00024df0 g     F .text	00000020 altera_nios2_qsys_irq_init
0002509c g     F .text	00000038 exit
00022554 g     F .text	000000b8 _fwalk_reent
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002204c g     F .text	00000004 __sfp_lock_release
000253f8 g     F .text	00000034 _exit
00024264 g     F .text	00000140 alt_alarm_start
0002260c g     F .text	000001b8 __smakebuf_r
000202f8 g     F .text	00000098 strlen
00024af4 g     F .text	00000160 open
0002456c g     F .text	0000001c alt_icache_flush_all
00026ed4 g     O .rwdata	00000004 alt_priority_mask
000245d8 g     F .text	000000a0 alt_ic_irq_enable
00026ed8 g     O .rwdata	00000008 alt_alarm_list
000244b4 g     F .text	0000005c _do_ctors
00022dc4 g     F .text	000000d8 close
00023130 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00022050 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406f14 	ori	at,at,444
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)

00020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20100:	0005313a 	rdctl	r2,ipending
   20104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20114:	00800044 	movi	r2,1
   20118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	e0fffb17 	ldw	r3,-20(fp)
   20120:	e0bffc17 	ldw	r2,-16(fp)
   20124:	1884703a 	and	r2,r3,r2
   20128:	10001426 	beq	r2,zero,2017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	008000f4 	movhi	r2,3
   20130:	10a26704 	addi	r2,r2,-30308
   20134:	e0fffd17 	ldw	r3,-12(fp)
   20138:	180690fa 	slli	r3,r3,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	10c00017 	ldw	r3,0(r2)
   20144:	008000f4 	movhi	r2,3
   20148:	10a26704 	addi	r2,r2,-30308
   2014c:	e13ffd17 	ldw	r4,-12(fp)
   20150:	200890fa 	slli	r4,r4,3
   20154:	1105883a 	add	r2,r2,r4
   20158:	10800104 	addi	r2,r2,4
   2015c:	10800017 	ldw	r2,0(r2)
   20160:	1009883a 	mov	r4,r2
   20164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2016c:	0005313a 	rdctl	r2,ipending
   20170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	00000706 	br	20198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2017c:	e0bffc17 	ldw	r2,-16(fp)
   20180:	1085883a 	add	r2,r2,r2
   20184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20188:	e0bffd17 	ldw	r2,-12(fp)
   2018c:	10800044 	addi	r2,r2,1
   20190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   20194:	003fe106 	br	2011c <__alt_data_end+0xfffe711c>

    active = alt_irq_pending ();
   20198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   2019c:	e0bffb17 	ldw	r2,-20(fp)
   201a0:	103fdb1e 	bne	r2,zero,20110 <__alt_data_end+0xfffe7110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a4:	0001883a 	nop
}
   201a8:	e037883a 	mov	sp,fp
   201ac:	dfc00117 	ldw	ra,4(sp)
   201b0:	df000017 	ldw	fp,0(sp)
   201b4:	dec00204 	addi	sp,sp,8
   201b8:	f800283a 	ret

Disassembly of section .text:

000201bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201bc:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   201c0:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   201c4:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201c8:	d6bbaa14 	ori	gp,gp,61096
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201cc:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201d0:	10a25314 	ori	r2,r2,35148

    movhi r3, %hi(__bss_end)
   201d4:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201d8:	18e2a714 	ori	r3,r3,35484

    beq r2, r3, 1f
   201dc:	10c00326 	beq	r2,r3,201ec <_start+0x30>

0:
    stw zero, (r2)
   201e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e8:	10fffd36 	bltu	r2,r3,201e0 <__alt_data_end+0xfffe71e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201ec:	00231300 	call	23130 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201f0:	00232dc0 	call	232dc <alt_main>

000201f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201f4:	003fff06 	br	201f4 <__alt_data_end+0xfffe71f4>

000201f8 <main>:
 */

#include <stdio.h>

int main()
{
   201f8:	defffe04 	addi	sp,sp,-8
   201fc:	dfc00115 	stw	ra,4(sp)
   20200:	df000015 	stw	fp,0(sp)
   20204:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   20208:	010000b4 	movhi	r4,2
   2020c:	21150b04 	addi	r4,r4,21548
   20210:	00202e40 	call	202e4 <puts>

  return 0;
   20214:	0005883a 	mov	r2,zero
}
   20218:	e037883a 	mov	sp,fp
   2021c:	dfc00117 	ldw	ra,4(sp)
   20220:	df000017 	ldw	fp,0(sp)
   20224:	dec00204 	addi	sp,sp,8
   20228:	f800283a 	ret

0002022c <_puts_r>:
   2022c:	defff604 	addi	sp,sp,-40
   20230:	dc000715 	stw	r16,28(sp)
   20234:	2021883a 	mov	r16,r4
   20238:	2809883a 	mov	r4,r5
   2023c:	dc400815 	stw	r17,32(sp)
   20240:	dfc00915 	stw	ra,36(sp)
   20244:	2823883a 	mov	r17,r5
   20248:	00202f80 	call	202f8 <strlen>
   2024c:	00c000b4 	movhi	r3,2
   20250:	18dbab04 	addi	r3,r3,28332
   20254:	18c00017 	ldw	r3,0(r3)
   20258:	11000044 	addi	r4,r2,1
   2025c:	d8800115 	stw	r2,4(sp)
   20260:	18c00217 	ldw	r3,8(r3)
   20264:	014000b4 	movhi	r5,2
   20268:	29551004 	addi	r5,r5,21568
   2026c:	1880030b 	ldhu	r2,12(r3)
   20270:	d9400215 	stw	r5,8(sp)
   20274:	d9000615 	stw	r4,24(sp)
   20278:	01400044 	movi	r5,1
   2027c:	01000084 	movi	r4,2
   20280:	d9000515 	stw	r4,20(sp)
   20284:	dc400015 	stw	r17,0(sp)
   20288:	d9400315 	stw	r5,12(sp)
   2028c:	dec00415 	stw	sp,16(sp)
   20290:	1108000c 	andi	r4,r2,8192
   20294:	2000061e 	bne	r4,zero,202b0 <_puts_r+0x84>
   20298:	19401917 	ldw	r5,100(r3)
   2029c:	0137ffc4 	movi	r4,-8193
   202a0:	10880014 	ori	r2,r2,8192
   202a4:	2908703a 	and	r4,r5,r4
   202a8:	1880030d 	sth	r2,12(r3)
   202ac:	19001915 	stw	r4,100(r3)
   202b0:	81400217 	ldw	r5,8(r16)
   202b4:	8009883a 	mov	r4,r16
   202b8:	d9800404 	addi	r6,sp,16
   202bc:	00203900 	call	20390 <__sfvwrite_r>
   202c0:	1000061e 	bne	r2,zero,202dc <_puts_r+0xb0>
   202c4:	00800284 	movi	r2,10
   202c8:	dfc00917 	ldw	ra,36(sp)
   202cc:	dc400817 	ldw	r17,32(sp)
   202d0:	dc000717 	ldw	r16,28(sp)
   202d4:	dec00a04 	addi	sp,sp,40
   202d8:	f800283a 	ret
   202dc:	00bfffc4 	movi	r2,-1
   202e0:	003ff906 	br	202c8 <__alt_data_end+0xfffe72c8>

000202e4 <puts>:
   202e4:	008000b4 	movhi	r2,2
   202e8:	109bab04 	addi	r2,r2,28332
   202ec:	200b883a 	mov	r5,r4
   202f0:	11000017 	ldw	r4,0(r2)
   202f4:	002022c1 	jmpi	2022c <_puts_r>

000202f8 <strlen>:
   202f8:	208000cc 	andi	r2,r4,3
   202fc:	10002026 	beq	r2,zero,20380 <strlen+0x88>
   20300:	20800007 	ldb	r2,0(r4)
   20304:	10002026 	beq	r2,zero,20388 <strlen+0x90>
   20308:	2005883a 	mov	r2,r4
   2030c:	00000206 	br	20318 <strlen+0x20>
   20310:	10c00007 	ldb	r3,0(r2)
   20314:	18001826 	beq	r3,zero,20378 <strlen+0x80>
   20318:	10800044 	addi	r2,r2,1
   2031c:	10c000cc 	andi	r3,r2,3
   20320:	183ffb1e 	bne	r3,zero,20310 <__alt_data_end+0xfffe7310>
   20324:	10c00017 	ldw	r3,0(r2)
   20328:	01ffbff4 	movhi	r7,65279
   2032c:	39ffbfc4 	addi	r7,r7,-257
   20330:	00ca303a 	nor	r5,zero,r3
   20334:	01a02074 	movhi	r6,32897
   20338:	19c7883a 	add	r3,r3,r7
   2033c:	31a02004 	addi	r6,r6,-32640
   20340:	1946703a 	and	r3,r3,r5
   20344:	1986703a 	and	r3,r3,r6
   20348:	1800091e 	bne	r3,zero,20370 <strlen+0x78>
   2034c:	10800104 	addi	r2,r2,4
   20350:	10c00017 	ldw	r3,0(r2)
   20354:	19cb883a 	add	r5,r3,r7
   20358:	00c6303a 	nor	r3,zero,r3
   2035c:	28c6703a 	and	r3,r5,r3
   20360:	1986703a 	and	r3,r3,r6
   20364:	183ff926 	beq	r3,zero,2034c <__alt_data_end+0xfffe734c>
   20368:	00000106 	br	20370 <strlen+0x78>
   2036c:	10800044 	addi	r2,r2,1
   20370:	10c00007 	ldb	r3,0(r2)
   20374:	183ffd1e 	bne	r3,zero,2036c <__alt_data_end+0xfffe736c>
   20378:	1105c83a 	sub	r2,r2,r4
   2037c:	f800283a 	ret
   20380:	2005883a 	mov	r2,r4
   20384:	003fe706 	br	20324 <__alt_data_end+0xfffe7324>
   20388:	0005883a 	mov	r2,zero
   2038c:	f800283a 	ret

00020390 <__sfvwrite_r>:
   20390:	30800217 	ldw	r2,8(r6)
   20394:	10004526 	beq	r2,zero,204ac <__sfvwrite_r+0x11c>
   20398:	28c0030b 	ldhu	r3,12(r5)
   2039c:	defff404 	addi	sp,sp,-48
   203a0:	dd400715 	stw	r21,28(sp)
   203a4:	dcc00515 	stw	r19,20(sp)
   203a8:	dc000215 	stw	r16,8(sp)
   203ac:	dfc00b15 	stw	ra,44(sp)
   203b0:	df000a15 	stw	fp,40(sp)
   203b4:	ddc00915 	stw	r23,36(sp)
   203b8:	dd800815 	stw	r22,32(sp)
   203bc:	dd000615 	stw	r20,24(sp)
   203c0:	dc800415 	stw	r18,16(sp)
   203c4:	dc400315 	stw	r17,12(sp)
   203c8:	1880020c 	andi	r2,r3,8
   203cc:	2821883a 	mov	r16,r5
   203d0:	202b883a 	mov	r21,r4
   203d4:	3027883a 	mov	r19,r6
   203d8:	10002526 	beq	r2,zero,20470 <__sfvwrite_r+0xe0>
   203dc:	28800417 	ldw	r2,16(r5)
   203e0:	10002326 	beq	r2,zero,20470 <__sfvwrite_r+0xe0>
   203e4:	1880008c 	andi	r2,r3,2
   203e8:	9c400017 	ldw	r17,0(r19)
   203ec:	10003126 	beq	r2,zero,204b4 <__sfvwrite_r+0x124>
   203f0:	0029883a 	mov	r20,zero
   203f4:	0025883a 	mov	r18,zero
   203f8:	05810004 	movi	r22,1024
   203fc:	a00d883a 	mov	r6,r20
   20400:	a809883a 	mov	r4,r21
   20404:	90002526 	beq	r18,zero,2049c <__sfvwrite_r+0x10c>
   20408:	900f883a 	mov	r7,r18
   2040c:	81400717 	ldw	r5,28(r16)
   20410:	b480012e 	bgeu	r22,r18,20418 <__sfvwrite_r+0x88>
   20414:	01c10004 	movi	r7,1024
   20418:	80800917 	ldw	r2,36(r16)
   2041c:	103ee83a 	callr	r2
   20420:	0080510e 	bge	zero,r2,20568 <__sfvwrite_r+0x1d8>
   20424:	98c00217 	ldw	r3,8(r19)
   20428:	a0a9883a 	add	r20,r20,r2
   2042c:	90a5c83a 	sub	r18,r18,r2
   20430:	1885c83a 	sub	r2,r3,r2
   20434:	98800215 	stw	r2,8(r19)
   20438:	103ff01e 	bne	r2,zero,203fc <__alt_data_end+0xfffe73fc>
   2043c:	0005883a 	mov	r2,zero
   20440:	dfc00b17 	ldw	ra,44(sp)
   20444:	df000a17 	ldw	fp,40(sp)
   20448:	ddc00917 	ldw	r23,36(sp)
   2044c:	dd800817 	ldw	r22,32(sp)
   20450:	dd400717 	ldw	r21,28(sp)
   20454:	dd000617 	ldw	r20,24(sp)
   20458:	dcc00517 	ldw	r19,20(sp)
   2045c:	dc800417 	ldw	r18,16(sp)
   20460:	dc400317 	ldw	r17,12(sp)
   20464:	dc000217 	ldw	r16,8(sp)
   20468:	dec00c04 	addi	sp,sp,48
   2046c:	f800283a 	ret
   20470:	a809883a 	mov	r4,r21
   20474:	800b883a 	mov	r5,r16
   20478:	002194c0 	call	2194c <__swsetup_r>
   2047c:	80c0030b 	ldhu	r3,12(r16)
   20480:	103fd826 	beq	r2,zero,203e4 <__alt_data_end+0xfffe73e4>
   20484:	18c01014 	ori	r3,r3,64
   20488:	80c0030d 	sth	r3,12(r16)
   2048c:	00c00244 	movi	r3,9
   20490:	00bfffc4 	movi	r2,-1
   20494:	a8c00015 	stw	r3,0(r21)
   20498:	003fe906 	br	20440 <__alt_data_end+0xfffe7440>
   2049c:	8d000017 	ldw	r20,0(r17)
   204a0:	8c800117 	ldw	r18,4(r17)
   204a4:	8c400204 	addi	r17,r17,8
   204a8:	003fd406 	br	203fc <__alt_data_end+0xfffe73fc>
   204ac:	0005883a 	mov	r2,zero
   204b0:	f800283a 	ret
   204b4:	1880004c 	andi	r2,r3,1
   204b8:	1000301e 	bne	r2,zero,2057c <__sfvwrite_r+0x1ec>
   204bc:	002f883a 	mov	r23,zero
   204c0:	0025883a 	mov	r18,zero
   204c4:	90001c26 	beq	r18,zero,20538 <__sfvwrite_r+0x1a8>
   204c8:	1880800c 	andi	r2,r3,512
   204cc:	85000217 	ldw	r20,8(r16)
   204d0:	10006c26 	beq	r2,zero,20684 <__sfvwrite_r+0x2f4>
   204d4:	a02d883a 	mov	r22,r20
   204d8:	95008536 	bltu	r18,r20,206f0 <__sfvwrite_r+0x360>
   204dc:	1881200c 	andi	r2,r3,1152
   204e0:	10009d1e 	bne	r2,zero,20758 <__sfvwrite_r+0x3c8>
   204e4:	81000017 	ldw	r4,0(r16)
   204e8:	a039883a 	mov	fp,r20
   204ec:	9029883a 	mov	r20,r18
   204f0:	b80b883a 	mov	r5,r23
   204f4:	b00d883a 	mov	r6,r22
   204f8:	00211fc0 	call	211fc <memmove>
   204fc:	80c00217 	ldw	r3,8(r16)
   20500:	81000017 	ldw	r4,0(r16)
   20504:	9005883a 	mov	r2,r18
   20508:	1f39c83a 	sub	fp,r3,fp
   2050c:	258f883a 	add	r7,r4,r22
   20510:	87000215 	stw	fp,8(r16)
   20514:	81c00015 	stw	r7,0(r16)
   20518:	98c00217 	ldw	r3,8(r19)
   2051c:	b8af883a 	add	r23,r23,r2
   20520:	90a5c83a 	sub	r18,r18,r2
   20524:	1d05c83a 	sub	r2,r3,r20
   20528:	98800215 	stw	r2,8(r19)
   2052c:	103fc326 	beq	r2,zero,2043c <__alt_data_end+0xfffe743c>
   20530:	80c0030b 	ldhu	r3,12(r16)
   20534:	903fe41e 	bne	r18,zero,204c8 <__alt_data_end+0xfffe74c8>
   20538:	8dc00017 	ldw	r23,0(r17)
   2053c:	8c800117 	ldw	r18,4(r17)
   20540:	8c400204 	addi	r17,r17,8
   20544:	003fdf06 	br	204c4 <__alt_data_end+0xfffe74c4>
   20548:	00213580 	call	21358 <_realloc_r>
   2054c:	102d883a 	mov	r22,r2
   20550:	1000a01e 	bne	r2,zero,207d4 <__sfvwrite_r+0x444>
   20554:	81400417 	ldw	r5,16(r16)
   20558:	a809883a 	mov	r4,r21
   2055c:	00221ac0 	call	221ac <_free_r>
   20560:	00800304 	movi	r2,12
   20564:	a8800015 	stw	r2,0(r21)
   20568:	80c0030b 	ldhu	r3,12(r16)
   2056c:	00bfffc4 	movi	r2,-1
   20570:	18c01014 	ori	r3,r3,64
   20574:	80c0030d 	sth	r3,12(r16)
   20578:	003fb106 	br	20440 <__alt_data_end+0xfffe7440>
   2057c:	0029883a 	mov	r20,zero
   20580:	0011883a 	mov	r8,zero
   20584:	0039883a 	mov	fp,zero
   20588:	0025883a 	mov	r18,zero
   2058c:	90001f26 	beq	r18,zero,2060c <__sfvwrite_r+0x27c>
   20590:	40006826 	beq	r8,zero,20734 <__sfvwrite_r+0x3a4>
   20594:	a02f883a 	mov	r23,r20
   20598:	9500012e 	bgeu	r18,r20,205a0 <__sfvwrite_r+0x210>
   2059c:	902f883a 	mov	r23,r18
   205a0:	81000017 	ldw	r4,0(r16)
   205a4:	80800417 	ldw	r2,16(r16)
   205a8:	b82d883a 	mov	r22,r23
   205ac:	81800217 	ldw	r6,8(r16)
   205b0:	81c00517 	ldw	r7,20(r16)
   205b4:	1100022e 	bgeu	r2,r4,205c0 <__sfvwrite_r+0x230>
   205b8:	31c7883a 	add	r3,r6,r7
   205bc:	1dc01816 	blt	r3,r23,20620 <__sfvwrite_r+0x290>
   205c0:	b9c03f16 	blt	r23,r7,206c0 <__sfvwrite_r+0x330>
   205c4:	80800917 	ldw	r2,36(r16)
   205c8:	81400717 	ldw	r5,28(r16)
   205cc:	a809883a 	mov	r4,r21
   205d0:	da000115 	stw	r8,4(sp)
   205d4:	e00d883a 	mov	r6,fp
   205d8:	103ee83a 	callr	r2
   205dc:	102d883a 	mov	r22,r2
   205e0:	da000117 	ldw	r8,4(sp)
   205e4:	00bfe00e 	bge	zero,r2,20568 <__alt_data_end+0xfffe7568>
   205e8:	a5a9c83a 	sub	r20,r20,r22
   205ec:	a0001f26 	beq	r20,zero,2066c <__sfvwrite_r+0x2dc>
   205f0:	98800217 	ldw	r2,8(r19)
   205f4:	e5b9883a 	add	fp,fp,r22
   205f8:	95a5c83a 	sub	r18,r18,r22
   205fc:	15adc83a 	sub	r22,r2,r22
   20600:	9d800215 	stw	r22,8(r19)
   20604:	b03f8d26 	beq	r22,zero,2043c <__alt_data_end+0xfffe743c>
   20608:	903fe11e 	bne	r18,zero,20590 <__alt_data_end+0xfffe7590>
   2060c:	8f000017 	ldw	fp,0(r17)
   20610:	8c800117 	ldw	r18,4(r17)
   20614:	0011883a 	mov	r8,zero
   20618:	8c400204 	addi	r17,r17,8
   2061c:	003fdb06 	br	2058c <__alt_data_end+0xfffe758c>
   20620:	180d883a 	mov	r6,r3
   20624:	e00b883a 	mov	r5,fp
   20628:	da000115 	stw	r8,4(sp)
   2062c:	d8c00015 	stw	r3,0(sp)
   20630:	00211fc0 	call	211fc <memmove>
   20634:	d8c00017 	ldw	r3,0(sp)
   20638:	80800017 	ldw	r2,0(r16)
   2063c:	a809883a 	mov	r4,r21
   20640:	800b883a 	mov	r5,r16
   20644:	10c5883a 	add	r2,r2,r3
   20648:	80800015 	stw	r2,0(r16)
   2064c:	d8c00015 	stw	r3,0(sp)
   20650:	0021a7c0 	call	21a7c <_fflush_r>
   20654:	d8c00017 	ldw	r3,0(sp)
   20658:	da000117 	ldw	r8,4(sp)
   2065c:	103fc21e 	bne	r2,zero,20568 <__alt_data_end+0xfffe7568>
   20660:	182d883a 	mov	r22,r3
   20664:	a5a9c83a 	sub	r20,r20,r22
   20668:	a03fe11e 	bne	r20,zero,205f0 <__alt_data_end+0xfffe75f0>
   2066c:	a809883a 	mov	r4,r21
   20670:	800b883a 	mov	r5,r16
   20674:	0021a7c0 	call	21a7c <_fflush_r>
   20678:	103fbb1e 	bne	r2,zero,20568 <__alt_data_end+0xfffe7568>
   2067c:	0011883a 	mov	r8,zero
   20680:	003fdb06 	br	205f0 <__alt_data_end+0xfffe75f0>
   20684:	81000017 	ldw	r4,0(r16)
   20688:	80800417 	ldw	r2,16(r16)
   2068c:	1100012e 	bgeu	r2,r4,20694 <__sfvwrite_r+0x304>
   20690:	a4805a36 	bltu	r20,r18,207fc <__sfvwrite_r+0x46c>
   20694:	81c00517 	ldw	r7,20(r16)
   20698:	91c01a36 	bltu	r18,r7,20704 <__sfvwrite_r+0x374>
   2069c:	80800917 	ldw	r2,36(r16)
   206a0:	81400717 	ldw	r5,28(r16)
   206a4:	a809883a 	mov	r4,r21
   206a8:	b80d883a 	mov	r6,r23
   206ac:	103ee83a 	callr	r2
   206b0:	1029883a 	mov	r20,r2
   206b4:	00bfac0e 	bge	zero,r2,20568 <__alt_data_end+0xfffe7568>
   206b8:	a005883a 	mov	r2,r20
   206bc:	003f9606 	br	20518 <__alt_data_end+0xfffe7518>
   206c0:	b80d883a 	mov	r6,r23
   206c4:	e00b883a 	mov	r5,fp
   206c8:	da000115 	stw	r8,4(sp)
   206cc:	00211fc0 	call	211fc <memmove>
   206d0:	80800217 	ldw	r2,8(r16)
   206d4:	80c00017 	ldw	r3,0(r16)
   206d8:	da000117 	ldw	r8,4(sp)
   206dc:	15c5c83a 	sub	r2,r2,r23
   206e0:	1def883a 	add	r23,r3,r23
   206e4:	80800215 	stw	r2,8(r16)
   206e8:	85c00015 	stw	r23,0(r16)
   206ec:	003fbe06 	br	205e8 <__alt_data_end+0xfffe75e8>
   206f0:	81000017 	ldw	r4,0(r16)
   206f4:	9039883a 	mov	fp,r18
   206f8:	9029883a 	mov	r20,r18
   206fc:	902d883a 	mov	r22,r18
   20700:	003f7b06 	br	204f0 <__alt_data_end+0xfffe74f0>
   20704:	b80b883a 	mov	r5,r23
   20708:	900d883a 	mov	r6,r18
   2070c:	00211fc0 	call	211fc <memmove>
   20710:	80c00217 	ldw	r3,8(r16)
   20714:	80800017 	ldw	r2,0(r16)
   20718:	9029883a 	mov	r20,r18
   2071c:	1c87c83a 	sub	r3,r3,r18
   20720:	1485883a 	add	r2,r2,r18
   20724:	80800015 	stw	r2,0(r16)
   20728:	80c00215 	stw	r3,8(r16)
   2072c:	9005883a 	mov	r2,r18
   20730:	003f7906 	br	20518 <__alt_data_end+0xfffe7518>
   20734:	e009883a 	mov	r4,fp
   20738:	01400284 	movi	r5,10
   2073c:	900d883a 	mov	r6,r18
   20740:	0020fdc0 	call	20fdc <memchr>
   20744:	10003826 	beq	r2,zero,20828 <__sfvwrite_r+0x498>
   20748:	10800044 	addi	r2,r2,1
   2074c:	1729c83a 	sub	r20,r2,fp
   20750:	02000044 	movi	r8,1
   20754:	003f8f06 	br	20594 <__alt_data_end+0xfffe7594>
   20758:	80800517 	ldw	r2,20(r16)
   2075c:	81400417 	ldw	r5,16(r16)
   20760:	87000017 	ldw	fp,0(r16)
   20764:	10a9883a 	add	r20,r2,r2
   20768:	a085883a 	add	r2,r20,r2
   2076c:	1028d7fa 	srli	r20,r2,31
   20770:	e179c83a 	sub	fp,fp,r5
   20774:	e1000044 	addi	r4,fp,1
   20778:	a085883a 	add	r2,r20,r2
   2077c:	1029d07a 	srai	r20,r2,1
   20780:	2485883a 	add	r2,r4,r18
   20784:	a00d883a 	mov	r6,r20
   20788:	a080022e 	bgeu	r20,r2,20794 <__sfvwrite_r+0x404>
   2078c:	1029883a 	mov	r20,r2
   20790:	100d883a 	mov	r6,r2
   20794:	18c1000c 	andi	r3,r3,1024
   20798:	a809883a 	mov	r4,r21
   2079c:	183f6a26 	beq	r3,zero,20548 <__alt_data_end+0xfffe7548>
   207a0:	300b883a 	mov	r5,r6
   207a4:	00208340 	call	20834 <_malloc_r>
   207a8:	102d883a 	mov	r22,r2
   207ac:	103f6c26 	beq	r2,zero,20560 <__alt_data_end+0xfffe7560>
   207b0:	81400417 	ldw	r5,16(r16)
   207b4:	1009883a 	mov	r4,r2
   207b8:	e00d883a 	mov	r6,fp
   207bc:	00210c40 	call	210c4 <memcpy>
   207c0:	8080030b 	ldhu	r2,12(r16)
   207c4:	00fedfc4 	movi	r3,-1153
   207c8:	10c4703a 	and	r2,r2,r3
   207cc:	10802014 	ori	r2,r2,128
   207d0:	8080030d 	sth	r2,12(r16)
   207d4:	b709883a 	add	r4,r22,fp
   207d8:	a707c83a 	sub	r3,r20,fp
   207dc:	85800415 	stw	r22,16(r16)
   207e0:	85000515 	stw	r20,20(r16)
   207e4:	81000015 	stw	r4,0(r16)
   207e8:	9039883a 	mov	fp,r18
   207ec:	80c00215 	stw	r3,8(r16)
   207f0:	9029883a 	mov	r20,r18
   207f4:	902d883a 	mov	r22,r18
   207f8:	003f3d06 	br	204f0 <__alt_data_end+0xfffe74f0>
   207fc:	b80b883a 	mov	r5,r23
   20800:	a00d883a 	mov	r6,r20
   20804:	00211fc0 	call	211fc <memmove>
   20808:	80800017 	ldw	r2,0(r16)
   2080c:	a809883a 	mov	r4,r21
   20810:	800b883a 	mov	r5,r16
   20814:	1505883a 	add	r2,r2,r20
   20818:	80800015 	stw	r2,0(r16)
   2081c:	0021a7c0 	call	21a7c <_fflush_r>
   20820:	103fa526 	beq	r2,zero,206b8 <__alt_data_end+0xfffe76b8>
   20824:	003f5006 	br	20568 <__alt_data_end+0xfffe7568>
   20828:	95000044 	addi	r20,r18,1
   2082c:	02000044 	movi	r8,1
   20830:	003f5806 	br	20594 <__alt_data_end+0xfffe7594>

00020834 <_malloc_r>:
   20834:	defff504 	addi	sp,sp,-44
   20838:	dc800315 	stw	r18,12(sp)
   2083c:	dfc00a15 	stw	ra,40(sp)
   20840:	df000915 	stw	fp,36(sp)
   20844:	ddc00815 	stw	r23,32(sp)
   20848:	dd800715 	stw	r22,28(sp)
   2084c:	dd400615 	stw	r21,24(sp)
   20850:	dd000515 	stw	r20,20(sp)
   20854:	dcc00415 	stw	r19,16(sp)
   20858:	dc400215 	stw	r17,8(sp)
   2085c:	dc000115 	stw	r16,4(sp)
   20860:	288002c4 	addi	r2,r5,11
   20864:	00c00584 	movi	r3,22
   20868:	2025883a 	mov	r18,r4
   2086c:	18802a2e 	bgeu	r3,r2,20918 <_malloc_r+0xe4>
   20870:	047ffe04 	movi	r17,-8
   20874:	1462703a 	and	r17,r2,r17
   20878:	88009e16 	blt	r17,zero,20af4 <_malloc_r+0x2c0>
   2087c:	89409d36 	bltu	r17,r5,20af4 <_malloc_r+0x2c0>
   20880:	00233540 	call	23354 <__malloc_lock>
   20884:	00807dc4 	movi	r2,503
   20888:	14402736 	bltu	r2,r17,20928 <_malloc_r+0xf4>
   2088c:	8806d0fa 	srli	r3,r17,3
   20890:	04c000b4 	movhi	r19,2
   20894:	9cd62604 	addi	r19,r19,22680
   20898:	18c5883a 	add	r2,r3,r3
   2089c:	1085883a 	add	r2,r2,r2
   208a0:	1085883a 	add	r2,r2,r2
   208a4:	9885883a 	add	r2,r19,r2
   208a8:	14000317 	ldw	r16,12(r2)
   208ac:	80814a26 	beq	r16,r2,20dd8 <_malloc_r+0x5a4>
   208b0:	80c00117 	ldw	r3,4(r16)
   208b4:	81000317 	ldw	r4,12(r16)
   208b8:	00bfff04 	movi	r2,-4
   208bc:	1884703a 	and	r2,r3,r2
   208c0:	81400217 	ldw	r5,8(r16)
   208c4:	8085883a 	add	r2,r16,r2
   208c8:	10c00117 	ldw	r3,4(r2)
   208cc:	29000315 	stw	r4,12(r5)
   208d0:	21400215 	stw	r5,8(r4)
   208d4:	18c00054 	ori	r3,r3,1
   208d8:	10c00115 	stw	r3,4(r2)
   208dc:	9009883a 	mov	r4,r18
   208e0:	00233740 	call	23374 <__malloc_unlock>
   208e4:	80800204 	addi	r2,r16,8
   208e8:	dfc00a17 	ldw	ra,40(sp)
   208ec:	df000917 	ldw	fp,36(sp)
   208f0:	ddc00817 	ldw	r23,32(sp)
   208f4:	dd800717 	ldw	r22,28(sp)
   208f8:	dd400617 	ldw	r21,24(sp)
   208fc:	dd000517 	ldw	r20,20(sp)
   20900:	dcc00417 	ldw	r19,16(sp)
   20904:	dc800317 	ldw	r18,12(sp)
   20908:	dc400217 	ldw	r17,8(sp)
   2090c:	dc000117 	ldw	r16,4(sp)
   20910:	dec00b04 	addi	sp,sp,44
   20914:	f800283a 	ret
   20918:	04400404 	movi	r17,16
   2091c:	89407536 	bltu	r17,r5,20af4 <_malloc_r+0x2c0>
   20920:	00233540 	call	23354 <__malloc_lock>
   20924:	003fd906 	br	2088c <__alt_data_end+0xfffe788c>
   20928:	8806d27a 	srli	r3,r17,9
   2092c:	18007526 	beq	r3,zero,20b04 <_malloc_r+0x2d0>
   20930:	00800104 	movi	r2,4
   20934:	10c0ef36 	bltu	r2,r3,20cf4 <_malloc_r+0x4c0>
   20938:	8806d1ba 	srli	r3,r17,6
   2093c:	19c00e04 	addi	r7,r3,56
   20940:	39cb883a 	add	r5,r7,r7
   20944:	04c000b4 	movhi	r19,2
   20948:	294b883a 	add	r5,r5,r5
   2094c:	9cd62604 	addi	r19,r19,22680
   20950:	294b883a 	add	r5,r5,r5
   20954:	994b883a 	add	r5,r19,r5
   20958:	2c000317 	ldw	r16,12(r5)
   2095c:	2c000e26 	beq	r5,r16,20998 <_malloc_r+0x164>
   20960:	80800117 	ldw	r2,4(r16)
   20964:	01bfff04 	movi	r6,-4
   20968:	010003c4 	movi	r4,15
   2096c:	1184703a 	and	r2,r2,r6
   20970:	1447c83a 	sub	r3,r2,r17
   20974:	20c00716 	blt	r4,r3,20994 <_malloc_r+0x160>
   20978:	1800650e 	bge	r3,zero,20b10 <_malloc_r+0x2dc>
   2097c:	84000317 	ldw	r16,12(r16)
   20980:	2c000526 	beq	r5,r16,20998 <_malloc_r+0x164>
   20984:	80800117 	ldw	r2,4(r16)
   20988:	1184703a 	and	r2,r2,r6
   2098c:	1447c83a 	sub	r3,r2,r17
   20990:	20fff90e 	bge	r4,r3,20978 <__alt_data_end+0xfffe7978>
   20994:	39ffffc4 	addi	r7,r7,-1
   20998:	38c00044 	addi	r3,r7,1
   2099c:	018000b4 	movhi	r6,2
   209a0:	9c000417 	ldw	r16,16(r19)
   209a4:	31962604 	addi	r6,r6,22680
   209a8:	32400204 	addi	r9,r6,8
   209ac:	82410326 	beq	r16,r9,20dbc <_malloc_r+0x588>
   209b0:	81000117 	ldw	r4,4(r16)
   209b4:	00bfff04 	movi	r2,-4
   209b8:	208e703a 	and	r7,r4,r2
   209bc:	3c45c83a 	sub	r2,r7,r17
   209c0:	010003c4 	movi	r4,15
   209c4:	2080ee16 	blt	r4,r2,20d80 <_malloc_r+0x54c>
   209c8:	32400515 	stw	r9,20(r6)
   209cc:	32400415 	stw	r9,16(r6)
   209d0:	1000510e 	bge	r2,zero,20b18 <_malloc_r+0x2e4>
   209d4:	00807fc4 	movi	r2,511
   209d8:	11c0ce36 	bltu	r2,r7,20d14 <_malloc_r+0x4e0>
   209dc:	3808d0fa 	srli	r4,r7,3
   209e0:	01c00044 	movi	r7,1
   209e4:	30800117 	ldw	r2,4(r6)
   209e8:	210b883a 	add	r5,r4,r4
   209ec:	294b883a 	add	r5,r5,r5
   209f0:	2009d0ba 	srai	r4,r4,2
   209f4:	294b883a 	add	r5,r5,r5
   209f8:	298b883a 	add	r5,r5,r6
   209fc:	2a000217 	ldw	r8,8(r5)
   20a00:	3908983a 	sll	r4,r7,r4
   20a04:	81400315 	stw	r5,12(r16)
   20a08:	82000215 	stw	r8,8(r16)
   20a0c:	2088b03a 	or	r4,r4,r2
   20a10:	2c000215 	stw	r16,8(r5)
   20a14:	31000115 	stw	r4,4(r6)
   20a18:	44000315 	stw	r16,12(r8)
   20a1c:	1805d0ba 	srai	r2,r3,2
   20a20:	01400044 	movi	r5,1
   20a24:	288a983a 	sll	r5,r5,r2
   20a28:	21404336 	bltu	r4,r5,20b38 <_malloc_r+0x304>
   20a2c:	2144703a 	and	r2,r4,r5
   20a30:	10000a1e 	bne	r2,zero,20a5c <_malloc_r+0x228>
   20a34:	00bfff04 	movi	r2,-4
   20a38:	294b883a 	add	r5,r5,r5
   20a3c:	1886703a 	and	r3,r3,r2
   20a40:	2144703a 	and	r2,r4,r5
   20a44:	18c00104 	addi	r3,r3,4
   20a48:	1000041e 	bne	r2,zero,20a5c <_malloc_r+0x228>
   20a4c:	294b883a 	add	r5,r5,r5
   20a50:	2144703a 	and	r2,r4,r5
   20a54:	18c00104 	addi	r3,r3,4
   20a58:	103ffc26 	beq	r2,zero,20a4c <__alt_data_end+0xfffe7a4c>
   20a5c:	023fff04 	movi	r8,-4
   20a60:	01c003c4 	movi	r7,15
   20a64:	18c5883a 	add	r2,r3,r3
   20a68:	1085883a 	add	r2,r2,r2
   20a6c:	1085883a 	add	r2,r2,r2
   20a70:	9895883a 	add	r10,r19,r2
   20a74:	52c00304 	addi	r11,r10,12
   20a78:	1819883a 	mov	r12,r3
   20a7c:	5c000017 	ldw	r16,0(r11)
   20a80:	59bffd04 	addi	r6,r11,-12
   20a84:	8180041e 	bne	r16,r6,20a98 <_malloc_r+0x264>
   20a88:	0000ce06 	br	20dc4 <_malloc_r+0x590>
   20a8c:	2000d70e 	bge	r4,zero,20dec <_malloc_r+0x5b8>
   20a90:	84000317 	ldw	r16,12(r16)
   20a94:	8180cb26 	beq	r16,r6,20dc4 <_malloc_r+0x590>
   20a98:	80800117 	ldw	r2,4(r16)
   20a9c:	1204703a 	and	r2,r2,r8
   20aa0:	1449c83a 	sub	r4,r2,r17
   20aa4:	393ff90e 	bge	r7,r4,20a8c <__alt_data_end+0xfffe7a8c>
   20aa8:	80800317 	ldw	r2,12(r16)
   20aac:	80c00217 	ldw	r3,8(r16)
   20ab0:	89400054 	ori	r5,r17,1
   20ab4:	81400115 	stw	r5,4(r16)
   20ab8:	18800315 	stw	r2,12(r3)
   20abc:	10c00215 	stw	r3,8(r2)
   20ac0:	8463883a 	add	r17,r16,r17
   20ac4:	9c400515 	stw	r17,20(r19)
   20ac8:	9c400415 	stw	r17,16(r19)
   20acc:	20800054 	ori	r2,r4,1
   20ad0:	88800115 	stw	r2,4(r17)
   20ad4:	8a400315 	stw	r9,12(r17)
   20ad8:	8a400215 	stw	r9,8(r17)
   20adc:	8923883a 	add	r17,r17,r4
   20ae0:	89000015 	stw	r4,0(r17)
   20ae4:	9009883a 	mov	r4,r18
   20ae8:	00233740 	call	23374 <__malloc_unlock>
   20aec:	80800204 	addi	r2,r16,8
   20af0:	003f7d06 	br	208e8 <__alt_data_end+0xfffe78e8>
   20af4:	00800304 	movi	r2,12
   20af8:	90800015 	stw	r2,0(r18)
   20afc:	0005883a 	mov	r2,zero
   20b00:	003f7906 	br	208e8 <__alt_data_end+0xfffe78e8>
   20b04:	01401f84 	movi	r5,126
   20b08:	01c00fc4 	movi	r7,63
   20b0c:	003f8d06 	br	20944 <__alt_data_end+0xfffe7944>
   20b10:	81000317 	ldw	r4,12(r16)
   20b14:	003f6a06 	br	208c0 <__alt_data_end+0xfffe78c0>
   20b18:	81c5883a 	add	r2,r16,r7
   20b1c:	10c00117 	ldw	r3,4(r2)
   20b20:	9009883a 	mov	r4,r18
   20b24:	18c00054 	ori	r3,r3,1
   20b28:	10c00115 	stw	r3,4(r2)
   20b2c:	00233740 	call	23374 <__malloc_unlock>
   20b30:	80800204 	addi	r2,r16,8
   20b34:	003f6c06 	br	208e8 <__alt_data_end+0xfffe78e8>
   20b38:	9c000217 	ldw	r16,8(r19)
   20b3c:	00bfff04 	movi	r2,-4
   20b40:	85800117 	ldw	r22,4(r16)
   20b44:	b0ac703a 	and	r22,r22,r2
   20b48:	b4400336 	bltu	r22,r17,20b58 <_malloc_r+0x324>
   20b4c:	b445c83a 	sub	r2,r22,r17
   20b50:	00c003c4 	movi	r3,15
   20b54:	18805d16 	blt	r3,r2,20ccc <_malloc_r+0x498>
   20b58:	05c000b4 	movhi	r23,2
   20b5c:	008000f4 	movhi	r2,3
   20b60:	bddbac04 	addi	r23,r23,28336
   20b64:	10a25504 	addi	r2,r2,-30380
   20b68:	15400017 	ldw	r21,0(r2)
   20b6c:	b9000017 	ldw	r4,0(r23)
   20b70:	00ffffc4 	movi	r3,-1
   20b74:	858d883a 	add	r6,r16,r22
   20b78:	8d6b883a 	add	r21,r17,r21
   20b7c:	20c0e426 	beq	r4,r3,20f10 <_malloc_r+0x6dc>
   20b80:	ad4403c4 	addi	r21,r21,4111
   20b84:	00fc0004 	movi	r3,-4096
   20b88:	a8ea703a 	and	r21,r21,r3
   20b8c:	9009883a 	mov	r4,r18
   20b90:	a80b883a 	mov	r5,r21
   20b94:	d9800015 	stw	r6,0(sp)
   20b98:	00218f80 	call	218f8 <_sbrk_r>
   20b9c:	00ffffc4 	movi	r3,-1
   20ba0:	1029883a 	mov	r20,r2
   20ba4:	d9800017 	ldw	r6,0(sp)
   20ba8:	10c0a426 	beq	r2,r3,20e3c <_malloc_r+0x608>
   20bac:	1180a236 	bltu	r2,r6,20e38 <_malloc_r+0x604>
   20bb0:	070000f4 	movhi	fp,3
   20bb4:	e7225d04 	addi	fp,fp,-30348
   20bb8:	e0c00017 	ldw	r3,0(fp)
   20bbc:	a8c7883a 	add	r3,r21,r3
   20bc0:	e0c00015 	stw	r3,0(fp)
   20bc4:	3500da26 	beq	r6,r20,20f30 <_malloc_r+0x6fc>
   20bc8:	b9000017 	ldw	r4,0(r23)
   20bcc:	00bfffc4 	movi	r2,-1
   20bd0:	2080e426 	beq	r4,r2,20f64 <_malloc_r+0x730>
   20bd4:	a185c83a 	sub	r2,r20,r6
   20bd8:	1885883a 	add	r2,r3,r2
   20bdc:	e0800015 	stw	r2,0(fp)
   20be0:	a0c001cc 	andi	r3,r20,7
   20be4:	1800b526 	beq	r3,zero,20ebc <_malloc_r+0x688>
   20be8:	a0e9c83a 	sub	r20,r20,r3
   20bec:	00840204 	movi	r2,4104
   20bf0:	a5000204 	addi	r20,r20,8
   20bf4:	10c7c83a 	sub	r3,r2,r3
   20bf8:	a545883a 	add	r2,r20,r21
   20bfc:	1083ffcc 	andi	r2,r2,4095
   20c00:	18abc83a 	sub	r21,r3,r2
   20c04:	9009883a 	mov	r4,r18
   20c08:	a80b883a 	mov	r5,r21
   20c0c:	00218f80 	call	218f8 <_sbrk_r>
   20c10:	00ffffc4 	movi	r3,-1
   20c14:	10c0d026 	beq	r2,r3,20f58 <_malloc_r+0x724>
   20c18:	1507c83a 	sub	r3,r2,r20
   20c1c:	a8c7883a 	add	r3,r21,r3
   20c20:	18c00054 	ori	r3,r3,1
   20c24:	e0800017 	ldw	r2,0(fp)
   20c28:	9d000215 	stw	r20,8(r19)
   20c2c:	a0c00115 	stw	r3,4(r20)
   20c30:	a887883a 	add	r3,r21,r2
   20c34:	e0c00015 	stw	r3,0(fp)
   20c38:	84c00e26 	beq	r16,r19,20c74 <_malloc_r+0x440>
   20c3c:	018003c4 	movi	r6,15
   20c40:	3580a02e 	bgeu	r6,r22,20ec4 <_malloc_r+0x690>
   20c44:	81400117 	ldw	r5,4(r16)
   20c48:	013ffe04 	movi	r4,-8
   20c4c:	b0bffd04 	addi	r2,r22,-12
   20c50:	1104703a 	and	r2,r2,r4
   20c54:	2900004c 	andi	r4,r5,1
   20c58:	1108b03a 	or	r4,r2,r4
   20c5c:	81000115 	stw	r4,4(r16)
   20c60:	01400144 	movi	r5,5
   20c64:	8089883a 	add	r4,r16,r2
   20c68:	21400115 	stw	r5,4(r4)
   20c6c:	21400215 	stw	r5,8(r4)
   20c70:	3080c036 	bltu	r6,r2,20f74 <_malloc_r+0x740>
   20c74:	008000f4 	movhi	r2,3
   20c78:	10a25404 	addi	r2,r2,-30384
   20c7c:	11000017 	ldw	r4,0(r2)
   20c80:	20c0012e 	bgeu	r4,r3,20c88 <_malloc_r+0x454>
   20c84:	10c00015 	stw	r3,0(r2)
   20c88:	008000f4 	movhi	r2,3
   20c8c:	10a25304 	addi	r2,r2,-30388
   20c90:	11000017 	ldw	r4,0(r2)
   20c94:	9c000217 	ldw	r16,8(r19)
   20c98:	20c0012e 	bgeu	r4,r3,20ca0 <_malloc_r+0x46c>
   20c9c:	10c00015 	stw	r3,0(r2)
   20ca0:	80c00117 	ldw	r3,4(r16)
   20ca4:	00bfff04 	movi	r2,-4
   20ca8:	1886703a 	and	r3,r3,r2
   20cac:	1c45c83a 	sub	r2,r3,r17
   20cb0:	1c400236 	bltu	r3,r17,20cbc <_malloc_r+0x488>
   20cb4:	00c003c4 	movi	r3,15
   20cb8:	18800416 	blt	r3,r2,20ccc <_malloc_r+0x498>
   20cbc:	9009883a 	mov	r4,r18
   20cc0:	00233740 	call	23374 <__malloc_unlock>
   20cc4:	0005883a 	mov	r2,zero
   20cc8:	003f0706 	br	208e8 <__alt_data_end+0xfffe78e8>
   20ccc:	88c00054 	ori	r3,r17,1
   20cd0:	80c00115 	stw	r3,4(r16)
   20cd4:	8463883a 	add	r17,r16,r17
   20cd8:	10800054 	ori	r2,r2,1
   20cdc:	9c400215 	stw	r17,8(r19)
   20ce0:	88800115 	stw	r2,4(r17)
   20ce4:	9009883a 	mov	r4,r18
   20ce8:	00233740 	call	23374 <__malloc_unlock>
   20cec:	80800204 	addi	r2,r16,8
   20cf0:	003efd06 	br	208e8 <__alt_data_end+0xfffe78e8>
   20cf4:	00800504 	movi	r2,20
   20cf8:	10c0482e 	bgeu	r2,r3,20e1c <_malloc_r+0x5e8>
   20cfc:	00801504 	movi	r2,84
   20d00:	10c06836 	bltu	r2,r3,20ea4 <_malloc_r+0x670>
   20d04:	8806d33a 	srli	r3,r17,12
   20d08:	19c01b84 	addi	r7,r3,110
   20d0c:	39cb883a 	add	r5,r7,r7
   20d10:	003f0c06 	br	20944 <__alt_data_end+0xfffe7944>
   20d14:	3804d27a 	srli	r2,r7,9
   20d18:	01000104 	movi	r4,4
   20d1c:	2080422e 	bgeu	r4,r2,20e28 <_malloc_r+0x5f4>
   20d20:	01000504 	movi	r4,20
   20d24:	20807c36 	bltu	r4,r2,20f18 <_malloc_r+0x6e4>
   20d28:	110016c4 	addi	r4,r2,91
   20d2c:	210b883a 	add	r5,r4,r4
   20d30:	294b883a 	add	r5,r5,r5
   20d34:	294b883a 	add	r5,r5,r5
   20d38:	994b883a 	add	r5,r19,r5
   20d3c:	28800217 	ldw	r2,8(r5)
   20d40:	020000b4 	movhi	r8,2
   20d44:	42162604 	addi	r8,r8,22680
   20d48:	11406326 	beq	r2,r5,20ed8 <_malloc_r+0x6a4>
   20d4c:	01bfff04 	movi	r6,-4
   20d50:	11000117 	ldw	r4,4(r2)
   20d54:	2188703a 	and	r4,r4,r6
   20d58:	3900022e 	bgeu	r7,r4,20d64 <_malloc_r+0x530>
   20d5c:	10800217 	ldw	r2,8(r2)
   20d60:	28bffb1e 	bne	r5,r2,20d50 <__alt_data_end+0xfffe7d50>
   20d64:	11800317 	ldw	r6,12(r2)
   20d68:	99000117 	ldw	r4,4(r19)
   20d6c:	81800315 	stw	r6,12(r16)
   20d70:	80800215 	stw	r2,8(r16)
   20d74:	34000215 	stw	r16,8(r6)
   20d78:	14000315 	stw	r16,12(r2)
   20d7c:	003f2706 	br	20a1c <__alt_data_end+0xfffe7a1c>
   20d80:	88c00054 	ori	r3,r17,1
   20d84:	80c00115 	stw	r3,4(r16)
   20d88:	8463883a 	add	r17,r16,r17
   20d8c:	34400515 	stw	r17,20(r6)
   20d90:	34400415 	stw	r17,16(r6)
   20d94:	10c00054 	ori	r3,r2,1
   20d98:	8a400315 	stw	r9,12(r17)
   20d9c:	8a400215 	stw	r9,8(r17)
   20da0:	88c00115 	stw	r3,4(r17)
   20da4:	88a3883a 	add	r17,r17,r2
   20da8:	88800015 	stw	r2,0(r17)
   20dac:	9009883a 	mov	r4,r18
   20db0:	00233740 	call	23374 <__malloc_unlock>
   20db4:	80800204 	addi	r2,r16,8
   20db8:	003ecb06 	br	208e8 <__alt_data_end+0xfffe78e8>
   20dbc:	31000117 	ldw	r4,4(r6)
   20dc0:	003f1606 	br	20a1c <__alt_data_end+0xfffe7a1c>
   20dc4:	63000044 	addi	r12,r12,1
   20dc8:	608000cc 	andi	r2,r12,3
   20dcc:	5ac00204 	addi	r11,r11,8
   20dd0:	103f2a1e 	bne	r2,zero,20a7c <__alt_data_end+0xfffe7a7c>
   20dd4:	00002106 	br	20e5c <_malloc_r+0x628>
   20dd8:	80800204 	addi	r2,r16,8
   20ddc:	84000517 	ldw	r16,20(r16)
   20de0:	143eb31e 	bne	r2,r16,208b0 <__alt_data_end+0xfffe78b0>
   20de4:	18c00084 	addi	r3,r3,2
   20de8:	003eec06 	br	2099c <__alt_data_end+0xfffe799c>
   20dec:	8085883a 	add	r2,r16,r2
   20df0:	10c00117 	ldw	r3,4(r2)
   20df4:	81000317 	ldw	r4,12(r16)
   20df8:	81400217 	ldw	r5,8(r16)
   20dfc:	18c00054 	ori	r3,r3,1
   20e00:	10c00115 	stw	r3,4(r2)
   20e04:	29000315 	stw	r4,12(r5)
   20e08:	21400215 	stw	r5,8(r4)
   20e0c:	9009883a 	mov	r4,r18
   20e10:	00233740 	call	23374 <__malloc_unlock>
   20e14:	80800204 	addi	r2,r16,8
   20e18:	003eb306 	br	208e8 <__alt_data_end+0xfffe78e8>
   20e1c:	19c016c4 	addi	r7,r3,91
   20e20:	39cb883a 	add	r5,r7,r7
   20e24:	003ec706 	br	20944 <__alt_data_end+0xfffe7944>
   20e28:	3804d1ba 	srli	r2,r7,6
   20e2c:	11000e04 	addi	r4,r2,56
   20e30:	210b883a 	add	r5,r4,r4
   20e34:	003fbe06 	br	20d30 <__alt_data_end+0xfffe7d30>
   20e38:	84ff5d26 	beq	r16,r19,20bb0 <__alt_data_end+0xfffe7bb0>
   20e3c:	9c000217 	ldw	r16,8(r19)
   20e40:	00bfff04 	movi	r2,-4
   20e44:	80c00117 	ldw	r3,4(r16)
   20e48:	1886703a 	and	r3,r3,r2
   20e4c:	003f9706 	br	20cac <__alt_data_end+0xfffe7cac>
   20e50:	52800017 	ldw	r10,0(r10)
   20e54:	18ffffc4 	addi	r3,r3,-1
   20e58:	50805c1e 	bne	r10,r2,20fcc <_malloc_r+0x798>
   20e5c:	190000cc 	andi	r4,r3,3
   20e60:	50bffe04 	addi	r2,r10,-8
   20e64:	203ffa1e 	bne	r4,zero,20e50 <__alt_data_end+0xfffe7e50>
   20e68:	98800117 	ldw	r2,4(r19)
   20e6c:	0146303a 	nor	r3,zero,r5
   20e70:	1884703a 	and	r2,r3,r2
   20e74:	98800115 	stw	r2,4(r19)
   20e78:	294b883a 	add	r5,r5,r5
   20e7c:	117f2e36 	bltu	r2,r5,20b38 <__alt_data_end+0xfffe7b38>
   20e80:	283f2d26 	beq	r5,zero,20b38 <__alt_data_end+0xfffe7b38>
   20e84:	1146703a 	and	r3,r2,r5
   20e88:	1800521e 	bne	r3,zero,20fd4 <_malloc_r+0x7a0>
   20e8c:	6007883a 	mov	r3,r12
   20e90:	294b883a 	add	r5,r5,r5
   20e94:	1148703a 	and	r4,r2,r5
   20e98:	18c00104 	addi	r3,r3,4
   20e9c:	203ffc26 	beq	r4,zero,20e90 <__alt_data_end+0xfffe7e90>
   20ea0:	003ef006 	br	20a64 <__alt_data_end+0xfffe7a64>
   20ea4:	00805504 	movi	r2,340
   20ea8:	10c01336 	bltu	r2,r3,20ef8 <_malloc_r+0x6c4>
   20eac:	8806d3fa 	srli	r3,r17,15
   20eb0:	19c01dc4 	addi	r7,r3,119
   20eb4:	39cb883a 	add	r5,r7,r7
   20eb8:	003ea206 	br	20944 <__alt_data_end+0xfffe7944>
   20ebc:	00c40004 	movi	r3,4096
   20ec0:	003f4d06 	br	20bf8 <__alt_data_end+0xfffe7bf8>
   20ec4:	00800044 	movi	r2,1
   20ec8:	a0800115 	stw	r2,4(r20)
   20ecc:	a021883a 	mov	r16,r20
   20ed0:	0007883a 	mov	r3,zero
   20ed4:	003f7506 	br	20cac <__alt_data_end+0xfffe7cac>
   20ed8:	200bd0ba 	srai	r5,r4,2
   20edc:	01800044 	movi	r6,1
   20ee0:	41000117 	ldw	r4,4(r8)
   20ee4:	314a983a 	sll	r5,r6,r5
   20ee8:	100d883a 	mov	r6,r2
   20eec:	2908b03a 	or	r4,r5,r4
   20ef0:	41000115 	stw	r4,4(r8)
   20ef4:	003f9d06 	br	20d6c <__alt_data_end+0xfffe7d6c>
   20ef8:	00815504 	movi	r2,1364
   20efc:	10c01336 	bltu	r2,r3,20f4c <_malloc_r+0x718>
   20f00:	8806d4ba 	srli	r3,r17,18
   20f04:	19c01f04 	addi	r7,r3,124
   20f08:	39cb883a 	add	r5,r7,r7
   20f0c:	003e8d06 	br	20944 <__alt_data_end+0xfffe7944>
   20f10:	ad400404 	addi	r21,r21,16
   20f14:	003f1d06 	br	20b8c <__alt_data_end+0xfffe7b8c>
   20f18:	01001504 	movi	r4,84
   20f1c:	20801c36 	bltu	r4,r2,20f90 <_malloc_r+0x75c>
   20f20:	3804d33a 	srli	r2,r7,12
   20f24:	11001b84 	addi	r4,r2,110
   20f28:	210b883a 	add	r5,r4,r4
   20f2c:	003f8006 	br	20d30 <__alt_data_end+0xfffe7d30>
   20f30:	3083ffcc 	andi	r2,r6,4095
   20f34:	103f241e 	bne	r2,zero,20bc8 <__alt_data_end+0xfffe7bc8>
   20f38:	99000217 	ldw	r4,8(r19)
   20f3c:	ad85883a 	add	r2,r21,r22
   20f40:	10800054 	ori	r2,r2,1
   20f44:	20800115 	stw	r2,4(r4)
   20f48:	003f4a06 	br	20c74 <__alt_data_end+0xfffe7c74>
   20f4c:	01403f04 	movi	r5,252
   20f50:	01c01f84 	movi	r7,126
   20f54:	003e7b06 	br	20944 <__alt_data_end+0xfffe7944>
   20f58:	00c00044 	movi	r3,1
   20f5c:	002b883a 	mov	r21,zero
   20f60:	003f3006 	br	20c24 <__alt_data_end+0xfffe7c24>
   20f64:	008000b4 	movhi	r2,2
   20f68:	109bac04 	addi	r2,r2,28336
   20f6c:	15000015 	stw	r20,0(r2)
   20f70:	003f1b06 	br	20be0 <__alt_data_end+0xfffe7be0>
   20f74:	9009883a 	mov	r4,r18
   20f78:	81400204 	addi	r5,r16,8
   20f7c:	00221ac0 	call	221ac <_free_r>
   20f80:	008000f4 	movhi	r2,3
   20f84:	10a25d04 	addi	r2,r2,-30348
   20f88:	10c00017 	ldw	r3,0(r2)
   20f8c:	003f3906 	br	20c74 <__alt_data_end+0xfffe7c74>
   20f90:	01005504 	movi	r4,340
   20f94:	20800436 	bltu	r4,r2,20fa8 <_malloc_r+0x774>
   20f98:	3804d3fa 	srli	r2,r7,15
   20f9c:	11001dc4 	addi	r4,r2,119
   20fa0:	210b883a 	add	r5,r4,r4
   20fa4:	003f6206 	br	20d30 <__alt_data_end+0xfffe7d30>
   20fa8:	01015504 	movi	r4,1364
   20fac:	20800436 	bltu	r4,r2,20fc0 <_malloc_r+0x78c>
   20fb0:	3804d4ba 	srli	r2,r7,18
   20fb4:	11001f04 	addi	r4,r2,124
   20fb8:	210b883a 	add	r5,r4,r4
   20fbc:	003f5c06 	br	20d30 <__alt_data_end+0xfffe7d30>
   20fc0:	01403f04 	movi	r5,252
   20fc4:	01001f84 	movi	r4,126
   20fc8:	003f5906 	br	20d30 <__alt_data_end+0xfffe7d30>
   20fcc:	98800117 	ldw	r2,4(r19)
   20fd0:	003fa906 	br	20e78 <__alt_data_end+0xfffe7e78>
   20fd4:	6007883a 	mov	r3,r12
   20fd8:	003ea206 	br	20a64 <__alt_data_end+0xfffe7a64>

00020fdc <memchr>:
   20fdc:	208000cc 	andi	r2,r4,3
   20fe0:	280f883a 	mov	r7,r5
   20fe4:	10003526 	beq	r2,zero,210bc <memchr+0xe0>
   20fe8:	30bfffc4 	addi	r2,r6,-1
   20fec:	30001b26 	beq	r6,zero,2105c <memchr+0x80>
   20ff0:	21800003 	ldbu	r6,0(r4)
   20ff4:	28c03fcc 	andi	r3,r5,255
   20ff8:	30c01a26 	beq	r6,r3,21064 <memchr+0x88>
   20ffc:	180d883a 	mov	r6,r3
   21000:	00000406 	br	21014 <memchr+0x38>
   21004:	10001526 	beq	r2,zero,2105c <memchr+0x80>
   21008:	20c00003 	ldbu	r3,0(r4)
   2100c:	10bfffc4 	addi	r2,r2,-1
   21010:	19801426 	beq	r3,r6,21064 <memchr+0x88>
   21014:	21000044 	addi	r4,r4,1
   21018:	20c000cc 	andi	r3,r4,3
   2101c:	183ff91e 	bne	r3,zero,21004 <__alt_data_end+0xfffe8004>
   21020:	024000c4 	movi	r9,3
   21024:	48801136 	bltu	r9,r2,2106c <memchr+0x90>
   21028:	10000c26 	beq	r2,zero,2105c <memchr+0x80>
   2102c:	20c00003 	ldbu	r3,0(r4)
   21030:	29403fcc 	andi	r5,r5,255
   21034:	19400b26 	beq	r3,r5,21064 <memchr+0x88>
   21038:	20c00044 	addi	r3,r4,1
   2103c:	2085883a 	add	r2,r4,r2
   21040:	39803fcc 	andi	r6,r7,255
   21044:	00000306 	br	21054 <memchr+0x78>
   21048:	18c00044 	addi	r3,r3,1
   2104c:	197fffc3 	ldbu	r5,-1(r3)
   21050:	29800426 	beq	r5,r6,21064 <memchr+0x88>
   21054:	1809883a 	mov	r4,r3
   21058:	18bffb1e 	bne	r3,r2,21048 <__alt_data_end+0xfffe8048>
   2105c:	0005883a 	mov	r2,zero
   21060:	f800283a 	ret
   21064:	2005883a 	mov	r2,r4
   21068:	f800283a 	ret
   2106c:	28c03fcc 	andi	r3,r5,255
   21070:	1810923a 	slli	r8,r3,8
   21074:	02ffbff4 	movhi	r11,65279
   21078:	02a02074 	movhi	r10,32897
   2107c:	40c6b03a 	or	r3,r8,r3
   21080:	1810943a 	slli	r8,r3,16
   21084:	5affbfc4 	addi	r11,r11,-257
   21088:	52a02004 	addi	r10,r10,-32640
   2108c:	40d0b03a 	or	r8,r8,r3
   21090:	20c00017 	ldw	r3,0(r4)
   21094:	40c6f03a 	xor	r3,r8,r3
   21098:	1acd883a 	add	r6,r3,r11
   2109c:	00c6303a 	nor	r3,zero,r3
   210a0:	30c6703a 	and	r3,r6,r3
   210a4:	1a86703a 	and	r3,r3,r10
   210a8:	183fdf1e 	bne	r3,zero,21028 <__alt_data_end+0xfffe8028>
   210ac:	10bfff04 	addi	r2,r2,-4
   210b0:	21000104 	addi	r4,r4,4
   210b4:	48bff636 	bltu	r9,r2,21090 <__alt_data_end+0xfffe8090>
   210b8:	003fdb06 	br	21028 <__alt_data_end+0xfffe8028>
   210bc:	3005883a 	mov	r2,r6
   210c0:	003fd706 	br	21020 <__alt_data_end+0xfffe8020>

000210c4 <memcpy>:
   210c4:	deffff04 	addi	sp,sp,-4
   210c8:	dc000015 	stw	r16,0(sp)
   210cc:	00c003c4 	movi	r3,15
   210d0:	2005883a 	mov	r2,r4
   210d4:	1980432e 	bgeu	r3,r6,211e4 <memcpy+0x120>
   210d8:	2146b03a 	or	r3,r4,r5
   210dc:	18c000cc 	andi	r3,r3,3
   210e0:	1800421e 	bne	r3,zero,211ec <memcpy+0x128>
   210e4:	343ffc04 	addi	r16,r6,-16
   210e8:	8020d13a 	srli	r16,r16,4
   210ec:	28c00104 	addi	r3,r5,4
   210f0:	23400104 	addi	r13,r4,4
   210f4:	801e913a 	slli	r15,r16,4
   210f8:	2b000204 	addi	r12,r5,8
   210fc:	22c00204 	addi	r11,r4,8
   21100:	7bc00504 	addi	r15,r15,20
   21104:	2a800304 	addi	r10,r5,12
   21108:	22400304 	addi	r9,r4,12
   2110c:	2bdf883a 	add	r15,r5,r15
   21110:	2811883a 	mov	r8,r5
   21114:	200f883a 	mov	r7,r4
   21118:	41000017 	ldw	r4,0(r8)
   2111c:	39c00404 	addi	r7,r7,16
   21120:	18c00404 	addi	r3,r3,16
   21124:	393ffc15 	stw	r4,-16(r7)
   21128:	1bbffc17 	ldw	r14,-16(r3)
   2112c:	6b400404 	addi	r13,r13,16
   21130:	5ac00404 	addi	r11,r11,16
   21134:	6bbffc15 	stw	r14,-16(r13)
   21138:	63800017 	ldw	r14,0(r12)
   2113c:	4a400404 	addi	r9,r9,16
   21140:	42000404 	addi	r8,r8,16
   21144:	5bbffc15 	stw	r14,-16(r11)
   21148:	53800017 	ldw	r14,0(r10)
   2114c:	63000404 	addi	r12,r12,16
   21150:	52800404 	addi	r10,r10,16
   21154:	4bbffc15 	stw	r14,-16(r9)
   21158:	1bffef1e 	bne	r3,r15,21118 <__alt_data_end+0xfffe8118>
   2115c:	81c00044 	addi	r7,r16,1
   21160:	380e913a 	slli	r7,r7,4
   21164:	310003cc 	andi	r4,r6,15
   21168:	02c000c4 	movi	r11,3
   2116c:	11c7883a 	add	r3,r2,r7
   21170:	29cb883a 	add	r5,r5,r7
   21174:	59001f2e 	bgeu	r11,r4,211f4 <memcpy+0x130>
   21178:	1813883a 	mov	r9,r3
   2117c:	2811883a 	mov	r8,r5
   21180:	200f883a 	mov	r7,r4
   21184:	42800017 	ldw	r10,0(r8)
   21188:	4a400104 	addi	r9,r9,4
   2118c:	39ffff04 	addi	r7,r7,-4
   21190:	4abfff15 	stw	r10,-4(r9)
   21194:	42000104 	addi	r8,r8,4
   21198:	59fffa36 	bltu	r11,r7,21184 <__alt_data_end+0xfffe8184>
   2119c:	213fff04 	addi	r4,r4,-4
   211a0:	2008d0ba 	srli	r4,r4,2
   211a4:	318000cc 	andi	r6,r6,3
   211a8:	21000044 	addi	r4,r4,1
   211ac:	2109883a 	add	r4,r4,r4
   211b0:	2109883a 	add	r4,r4,r4
   211b4:	1907883a 	add	r3,r3,r4
   211b8:	290b883a 	add	r5,r5,r4
   211bc:	30000626 	beq	r6,zero,211d8 <memcpy+0x114>
   211c0:	198d883a 	add	r6,r3,r6
   211c4:	29c00003 	ldbu	r7,0(r5)
   211c8:	18c00044 	addi	r3,r3,1
   211cc:	29400044 	addi	r5,r5,1
   211d0:	19ffffc5 	stb	r7,-1(r3)
   211d4:	19bffb1e 	bne	r3,r6,211c4 <__alt_data_end+0xfffe81c4>
   211d8:	dc000017 	ldw	r16,0(sp)
   211dc:	dec00104 	addi	sp,sp,4
   211e0:	f800283a 	ret
   211e4:	2007883a 	mov	r3,r4
   211e8:	003ff406 	br	211bc <__alt_data_end+0xfffe81bc>
   211ec:	2007883a 	mov	r3,r4
   211f0:	003ff306 	br	211c0 <__alt_data_end+0xfffe81c0>
   211f4:	200d883a 	mov	r6,r4
   211f8:	003ff006 	br	211bc <__alt_data_end+0xfffe81bc>

000211fc <memmove>:
   211fc:	2005883a 	mov	r2,r4
   21200:	29000b2e 	bgeu	r5,r4,21230 <memmove+0x34>
   21204:	298f883a 	add	r7,r5,r6
   21208:	21c0092e 	bgeu	r4,r7,21230 <memmove+0x34>
   2120c:	2187883a 	add	r3,r4,r6
   21210:	198bc83a 	sub	r5,r3,r6
   21214:	30004b26 	beq	r6,zero,21344 <memmove+0x148>
   21218:	39ffffc4 	addi	r7,r7,-1
   2121c:	39000003 	ldbu	r4,0(r7)
   21220:	18ffffc4 	addi	r3,r3,-1
   21224:	19000005 	stb	r4,0(r3)
   21228:	197ffb1e 	bne	r3,r5,21218 <__alt_data_end+0xfffe8218>
   2122c:	f800283a 	ret
   21230:	00c003c4 	movi	r3,15
   21234:	1980412e 	bgeu	r3,r6,2133c <memmove+0x140>
   21238:	1146b03a 	or	r3,r2,r5
   2123c:	18c000cc 	andi	r3,r3,3
   21240:	1800411e 	bne	r3,zero,21348 <memmove+0x14c>
   21244:	33fffc04 	addi	r15,r6,-16
   21248:	781ed13a 	srli	r15,r15,4
   2124c:	28c00104 	addi	r3,r5,4
   21250:	13400104 	addi	r13,r2,4
   21254:	781c913a 	slli	r14,r15,4
   21258:	2b000204 	addi	r12,r5,8
   2125c:	12c00204 	addi	r11,r2,8
   21260:	73800504 	addi	r14,r14,20
   21264:	2a800304 	addi	r10,r5,12
   21268:	12400304 	addi	r9,r2,12
   2126c:	2b9d883a 	add	r14,r5,r14
   21270:	2811883a 	mov	r8,r5
   21274:	100f883a 	mov	r7,r2
   21278:	41000017 	ldw	r4,0(r8)
   2127c:	39c00404 	addi	r7,r7,16
   21280:	18c00404 	addi	r3,r3,16
   21284:	393ffc15 	stw	r4,-16(r7)
   21288:	193ffc17 	ldw	r4,-16(r3)
   2128c:	6b400404 	addi	r13,r13,16
   21290:	5ac00404 	addi	r11,r11,16
   21294:	693ffc15 	stw	r4,-16(r13)
   21298:	61000017 	ldw	r4,0(r12)
   2129c:	4a400404 	addi	r9,r9,16
   212a0:	42000404 	addi	r8,r8,16
   212a4:	593ffc15 	stw	r4,-16(r11)
   212a8:	51000017 	ldw	r4,0(r10)
   212ac:	63000404 	addi	r12,r12,16
   212b0:	52800404 	addi	r10,r10,16
   212b4:	493ffc15 	stw	r4,-16(r9)
   212b8:	1bbfef1e 	bne	r3,r14,21278 <__alt_data_end+0xfffe8278>
   212bc:	79000044 	addi	r4,r15,1
   212c0:	2008913a 	slli	r4,r4,4
   212c4:	328003cc 	andi	r10,r6,15
   212c8:	02c000c4 	movi	r11,3
   212cc:	1107883a 	add	r3,r2,r4
   212d0:	290b883a 	add	r5,r5,r4
   212d4:	5a801e2e 	bgeu	r11,r10,21350 <memmove+0x154>
   212d8:	1813883a 	mov	r9,r3
   212dc:	2811883a 	mov	r8,r5
   212e0:	500f883a 	mov	r7,r10
   212e4:	41000017 	ldw	r4,0(r8)
   212e8:	4a400104 	addi	r9,r9,4
   212ec:	39ffff04 	addi	r7,r7,-4
   212f0:	493fff15 	stw	r4,-4(r9)
   212f4:	42000104 	addi	r8,r8,4
   212f8:	59fffa36 	bltu	r11,r7,212e4 <__alt_data_end+0xfffe82e4>
   212fc:	513fff04 	addi	r4,r10,-4
   21300:	2008d0ba 	srli	r4,r4,2
   21304:	318000cc 	andi	r6,r6,3
   21308:	21000044 	addi	r4,r4,1
   2130c:	2109883a 	add	r4,r4,r4
   21310:	2109883a 	add	r4,r4,r4
   21314:	1907883a 	add	r3,r3,r4
   21318:	290b883a 	add	r5,r5,r4
   2131c:	30000926 	beq	r6,zero,21344 <memmove+0x148>
   21320:	198d883a 	add	r6,r3,r6
   21324:	29c00003 	ldbu	r7,0(r5)
   21328:	18c00044 	addi	r3,r3,1
   2132c:	29400044 	addi	r5,r5,1
   21330:	19ffffc5 	stb	r7,-1(r3)
   21334:	19bffb1e 	bne	r3,r6,21324 <__alt_data_end+0xfffe8324>
   21338:	f800283a 	ret
   2133c:	1007883a 	mov	r3,r2
   21340:	003ff606 	br	2131c <__alt_data_end+0xfffe831c>
   21344:	f800283a 	ret
   21348:	1007883a 	mov	r3,r2
   2134c:	003ff406 	br	21320 <__alt_data_end+0xfffe8320>
   21350:	500d883a 	mov	r6,r10
   21354:	003ff106 	br	2131c <__alt_data_end+0xfffe831c>

00021358 <_realloc_r>:
   21358:	defff604 	addi	sp,sp,-40
   2135c:	dcc00315 	stw	r19,12(sp)
   21360:	dc400115 	stw	r17,4(sp)
   21364:	dfc00915 	stw	ra,36(sp)
   21368:	df000815 	stw	fp,32(sp)
   2136c:	ddc00715 	stw	r23,28(sp)
   21370:	dd800615 	stw	r22,24(sp)
   21374:	dd400515 	stw	r21,20(sp)
   21378:	dd000415 	stw	r20,16(sp)
   2137c:	dc800215 	stw	r18,8(sp)
   21380:	dc000015 	stw	r16,0(sp)
   21384:	2827883a 	mov	r19,r5
   21388:	3023883a 	mov	r17,r6
   2138c:	2800bf26 	beq	r5,zero,2168c <_realloc_r+0x334>
   21390:	2025883a 	mov	r18,r4
   21394:	00233540 	call	23354 <__malloc_lock>
   21398:	98ffff17 	ldw	r3,-4(r19)
   2139c:	01bfff04 	movi	r6,-4
   213a0:	890002c4 	addi	r4,r17,11
   213a4:	01c00584 	movi	r7,22
   213a8:	9d7ffe04 	addi	r21,r19,-8
   213ac:	19a0703a 	and	r16,r3,r6
   213b0:	39003f2e 	bgeu	r7,r4,214b0 <_realloc_r+0x158>
   213b4:	053ffe04 	movi	r20,-8
   213b8:	2528703a 	and	r20,r4,r20
   213bc:	a00f883a 	mov	r7,r20
   213c0:	a0008216 	blt	r20,zero,215cc <_realloc_r+0x274>
   213c4:	a4408136 	bltu	r20,r17,215cc <_realloc_r+0x274>
   213c8:	81c03c0e 	bge	r16,r7,214bc <_realloc_r+0x164>
   213cc:	070000b4 	movhi	fp,2
   213d0:	e7162604 	addi	fp,fp,22680
   213d4:	e1000217 	ldw	r4,8(fp)
   213d8:	ac05883a 	add	r2,r21,r16
   213dc:	2080bf26 	beq	r4,r2,216dc <_realloc_r+0x384>
   213e0:	11000117 	ldw	r4,4(r2)
   213e4:	023fff84 	movi	r8,-2
   213e8:	2210703a 	and	r8,r4,r8
   213ec:	1211883a 	add	r8,r2,r8
   213f0:	41400117 	ldw	r5,4(r8)
   213f4:	2940004c 	andi	r5,r5,1
   213f8:	28004a1e 	bne	r5,zero,21524 <_realloc_r+0x1cc>
   213fc:	017fff04 	movi	r5,-4
   21400:	2148703a 	and	r4,r4,r5
   21404:	2409883a 	add	r4,r4,r16
   21408:	21c0ad0e 	bge	r4,r7,216c0 <_realloc_r+0x368>
   2140c:	18c0004c 	andi	r3,r3,1
   21410:	18007f1e 	bne	r3,zero,21610 <_realloc_r+0x2b8>
   21414:	9dfffe17 	ldw	r23,-8(r19)
   21418:	adefc83a 	sub	r23,r21,r23
   2141c:	bd800117 	ldw	r22,4(r23)
   21420:	b14a703a 	and	r5,r22,r5
   21424:	216d883a 	add	r22,r4,r5
   21428:	b1c04516 	blt	r22,r7,21540 <_realloc_r+0x1e8>
   2142c:	10c00317 	ldw	r3,12(r2)
   21430:	10800217 	ldw	r2,8(r2)
   21434:	81bfff04 	addi	r6,r16,-4
   21438:	bc400204 	addi	r17,r23,8
   2143c:	10c00315 	stw	r3,12(r2)
   21440:	18800215 	stw	r2,8(r3)
   21444:	b9400217 	ldw	r5,8(r23)
   21448:	b8c00317 	ldw	r3,12(r23)
   2144c:	00800904 	movi	r2,36
   21450:	28c00315 	stw	r3,12(r5)
   21454:	19400215 	stw	r5,8(r3)
   21458:	1180ef36 	bltu	r2,r6,21818 <_realloc_r+0x4c0>
   2145c:	008004c4 	movi	r2,19
   21460:	1180da2e 	bgeu	r2,r6,217cc <_realloc_r+0x474>
   21464:	98800017 	ldw	r2,0(r19)
   21468:	b8800215 	stw	r2,8(r23)
   2146c:	98800117 	ldw	r2,4(r19)
   21470:	b8800315 	stw	r2,12(r23)
   21474:	008006c4 	movi	r2,27
   21478:	1180fc2e 	bgeu	r2,r6,2186c <_realloc_r+0x514>
   2147c:	98800217 	ldw	r2,8(r19)
   21480:	b8800415 	stw	r2,16(r23)
   21484:	98800317 	ldw	r2,12(r19)
   21488:	b8800515 	stw	r2,20(r23)
   2148c:	00800904 	movi	r2,36
   21490:	3080421e 	bne	r6,r2,2159c <_realloc_r+0x244>
   21494:	98800417 	ldw	r2,16(r19)
   21498:	9cc00604 	addi	r19,r19,24
   2149c:	b8c00804 	addi	r3,r23,32
   214a0:	b8800615 	stw	r2,24(r23)
   214a4:	98bfff17 	ldw	r2,-4(r19)
   214a8:	b8800715 	stw	r2,28(r23)
   214ac:	00003d06 	br	215a4 <_realloc_r+0x24c>
   214b0:	01c00404 	movi	r7,16
   214b4:	3829883a 	mov	r20,r7
   214b8:	003fc206 	br	213c4 <__alt_data_end+0xfffe83c4>
   214bc:	9823883a 	mov	r17,r19
   214c0:	850fc83a 	sub	r7,r16,r20
   214c4:	008003c4 	movi	r2,15
   214c8:	18c0004c 	andi	r3,r3,1
   214cc:	11c04336 	bltu	r2,r7,215dc <_realloc_r+0x284>
   214d0:	1c06b03a 	or	r3,r3,r16
   214d4:	a8c00115 	stw	r3,4(r21)
   214d8:	ac21883a 	add	r16,r21,r16
   214dc:	80c00117 	ldw	r3,4(r16)
   214e0:	18c00054 	ori	r3,r3,1
   214e4:	80c00115 	stw	r3,4(r16)
   214e8:	9009883a 	mov	r4,r18
   214ec:	00233740 	call	23374 <__malloc_unlock>
   214f0:	8805883a 	mov	r2,r17
   214f4:	dfc00917 	ldw	ra,36(sp)
   214f8:	df000817 	ldw	fp,32(sp)
   214fc:	ddc00717 	ldw	r23,28(sp)
   21500:	dd800617 	ldw	r22,24(sp)
   21504:	dd400517 	ldw	r21,20(sp)
   21508:	dd000417 	ldw	r20,16(sp)
   2150c:	dcc00317 	ldw	r19,12(sp)
   21510:	dc800217 	ldw	r18,8(sp)
   21514:	dc400117 	ldw	r17,4(sp)
   21518:	dc000017 	ldw	r16,0(sp)
   2151c:	dec00a04 	addi	sp,sp,40
   21520:	f800283a 	ret
   21524:	18c0004c 	andi	r3,r3,1
   21528:	1800391e 	bne	r3,zero,21610 <_realloc_r+0x2b8>
   2152c:	9dfffe17 	ldw	r23,-8(r19)
   21530:	00bfff04 	movi	r2,-4
   21534:	adefc83a 	sub	r23,r21,r23
   21538:	b9400117 	ldw	r5,4(r23)
   2153c:	288a703a 	and	r5,r5,r2
   21540:	2c2d883a 	add	r22,r5,r16
   21544:	b1c03216 	blt	r22,r7,21610 <_realloc_r+0x2b8>
   21548:	b8800317 	ldw	r2,12(r23)
   2154c:	b8c00217 	ldw	r3,8(r23)
   21550:	81bfff04 	addi	r6,r16,-4
   21554:	01000904 	movi	r4,36
   21558:	18800315 	stw	r2,12(r3)
   2155c:	10c00215 	stw	r3,8(r2)
   21560:	bc400204 	addi	r17,r23,8
   21564:	2180ac36 	bltu	r4,r6,21818 <_realloc_r+0x4c0>
   21568:	008004c4 	movi	r2,19
   2156c:	1180972e 	bgeu	r2,r6,217cc <_realloc_r+0x474>
   21570:	98800017 	ldw	r2,0(r19)
   21574:	b8800215 	stw	r2,8(r23)
   21578:	98800117 	ldw	r2,4(r19)
   2157c:	b8800315 	stw	r2,12(r23)
   21580:	008006c4 	movi	r2,27
   21584:	1180b92e 	bgeu	r2,r6,2186c <_realloc_r+0x514>
   21588:	98800217 	ldw	r2,8(r19)
   2158c:	b8800415 	stw	r2,16(r23)
   21590:	98800317 	ldw	r2,12(r19)
   21594:	b8800515 	stw	r2,20(r23)
   21598:	313fbe26 	beq	r6,r4,21494 <__alt_data_end+0xfffe8494>
   2159c:	b8c00604 	addi	r3,r23,24
   215a0:	9cc00404 	addi	r19,r19,16
   215a4:	98800017 	ldw	r2,0(r19)
   215a8:	b021883a 	mov	r16,r22
   215ac:	b82b883a 	mov	r21,r23
   215b0:	18800015 	stw	r2,0(r3)
   215b4:	98800117 	ldw	r2,4(r19)
   215b8:	18800115 	stw	r2,4(r3)
   215bc:	98800217 	ldw	r2,8(r19)
   215c0:	18800215 	stw	r2,8(r3)
   215c4:	b8c00117 	ldw	r3,4(r23)
   215c8:	003fbd06 	br	214c0 <__alt_data_end+0xfffe84c0>
   215cc:	00800304 	movi	r2,12
   215d0:	90800015 	stw	r2,0(r18)
   215d4:	0005883a 	mov	r2,zero
   215d8:	003fc606 	br	214f4 <__alt_data_end+0xfffe84f4>
   215dc:	1d06b03a 	or	r3,r3,r20
   215e0:	ad0b883a 	add	r5,r21,r20
   215e4:	a8c00115 	stw	r3,4(r21)
   215e8:	38800054 	ori	r2,r7,1
   215ec:	28800115 	stw	r2,4(r5)
   215f0:	29cf883a 	add	r7,r5,r7
   215f4:	38800117 	ldw	r2,4(r7)
   215f8:	9009883a 	mov	r4,r18
   215fc:	29400204 	addi	r5,r5,8
   21600:	10800054 	ori	r2,r2,1
   21604:	38800115 	stw	r2,4(r7)
   21608:	00221ac0 	call	221ac <_free_r>
   2160c:	003fb606 	br	214e8 <__alt_data_end+0xfffe84e8>
   21610:	880b883a 	mov	r5,r17
   21614:	9009883a 	mov	r4,r18
   21618:	00208340 	call	20834 <_malloc_r>
   2161c:	1023883a 	mov	r17,r2
   21620:	1000aa26 	beq	r2,zero,218cc <_realloc_r+0x574>
   21624:	98ffff17 	ldw	r3,-4(r19)
   21628:	113ffe04 	addi	r4,r2,-8
   2162c:	00bfff84 	movi	r2,-2
   21630:	1884703a 	and	r2,r3,r2
   21634:	a885883a 	add	r2,r21,r2
   21638:	20808626 	beq	r4,r2,21854 <_realloc_r+0x4fc>
   2163c:	81bfff04 	addi	r6,r16,-4
   21640:	00800904 	movi	r2,36
   21644:	11807036 	bltu	r2,r6,21808 <_realloc_r+0x4b0>
   21648:	00c004c4 	movi	r3,19
   2164c:	19805636 	bltu	r3,r6,217a8 <_realloc_r+0x450>
   21650:	8805883a 	mov	r2,r17
   21654:	9807883a 	mov	r3,r19
   21658:	19000017 	ldw	r4,0(r3)
   2165c:	11000015 	stw	r4,0(r2)
   21660:	19000117 	ldw	r4,4(r3)
   21664:	11000115 	stw	r4,4(r2)
   21668:	18c00217 	ldw	r3,8(r3)
   2166c:	10c00215 	stw	r3,8(r2)
   21670:	980b883a 	mov	r5,r19
   21674:	9009883a 	mov	r4,r18
   21678:	00221ac0 	call	221ac <_free_r>
   2167c:	9009883a 	mov	r4,r18
   21680:	00233740 	call	23374 <__malloc_unlock>
   21684:	8805883a 	mov	r2,r17
   21688:	003f9a06 	br	214f4 <__alt_data_end+0xfffe84f4>
   2168c:	300b883a 	mov	r5,r6
   21690:	dfc00917 	ldw	ra,36(sp)
   21694:	df000817 	ldw	fp,32(sp)
   21698:	ddc00717 	ldw	r23,28(sp)
   2169c:	dd800617 	ldw	r22,24(sp)
   216a0:	dd400517 	ldw	r21,20(sp)
   216a4:	dd000417 	ldw	r20,16(sp)
   216a8:	dcc00317 	ldw	r19,12(sp)
   216ac:	dc800217 	ldw	r18,8(sp)
   216b0:	dc400117 	ldw	r17,4(sp)
   216b4:	dc000017 	ldw	r16,0(sp)
   216b8:	dec00a04 	addi	sp,sp,40
   216bc:	00208341 	jmpi	20834 <_malloc_r>
   216c0:	11400317 	ldw	r5,12(r2)
   216c4:	10800217 	ldw	r2,8(r2)
   216c8:	9823883a 	mov	r17,r19
   216cc:	2021883a 	mov	r16,r4
   216d0:	11400315 	stw	r5,12(r2)
   216d4:	28800215 	stw	r2,8(r5)
   216d8:	003f7906 	br	214c0 <__alt_data_end+0xfffe84c0>
   216dc:	21000117 	ldw	r4,4(r4)
   216e0:	00bfff04 	movi	r2,-4
   216e4:	a1800404 	addi	r6,r20,16
   216e8:	2088703a 	and	r4,r4,r2
   216ec:	2409883a 	add	r4,r4,r16
   216f0:	2180380e 	bge	r4,r6,217d4 <_realloc_r+0x47c>
   216f4:	18c0004c 	andi	r3,r3,1
   216f8:	183fc51e 	bne	r3,zero,21610 <__alt_data_end+0xfffe8610>
   216fc:	9dfffe17 	ldw	r23,-8(r19)
   21700:	adefc83a 	sub	r23,r21,r23
   21704:	b9400117 	ldw	r5,4(r23)
   21708:	288a703a 	and	r5,r5,r2
   2170c:	216d883a 	add	r22,r4,r5
   21710:	b1bf8b16 	blt	r22,r6,21540 <__alt_data_end+0xfffe8540>
   21714:	b8800317 	ldw	r2,12(r23)
   21718:	b8c00217 	ldw	r3,8(r23)
   2171c:	81bfff04 	addi	r6,r16,-4
   21720:	01000904 	movi	r4,36
   21724:	18800315 	stw	r2,12(r3)
   21728:	10c00215 	stw	r3,8(r2)
   2172c:	bc400204 	addi	r17,r23,8
   21730:	21805a36 	bltu	r4,r6,2189c <_realloc_r+0x544>
   21734:	008004c4 	movi	r2,19
   21738:	1180562e 	bgeu	r2,r6,21894 <_realloc_r+0x53c>
   2173c:	98800017 	ldw	r2,0(r19)
   21740:	b8800215 	stw	r2,8(r23)
   21744:	98800117 	ldw	r2,4(r19)
   21748:	b8800315 	stw	r2,12(r23)
   2174c:	008006c4 	movi	r2,27
   21750:	11805636 	bltu	r2,r6,218ac <_realloc_r+0x554>
   21754:	b8800404 	addi	r2,r23,16
   21758:	9cc00204 	addi	r19,r19,8
   2175c:	98c00017 	ldw	r3,0(r19)
   21760:	10c00015 	stw	r3,0(r2)
   21764:	98c00117 	ldw	r3,4(r19)
   21768:	10c00115 	stw	r3,4(r2)
   2176c:	98c00217 	ldw	r3,8(r19)
   21770:	10c00215 	stw	r3,8(r2)
   21774:	bd07883a 	add	r3,r23,r20
   21778:	b505c83a 	sub	r2,r22,r20
   2177c:	e0c00215 	stw	r3,8(fp)
   21780:	10800054 	ori	r2,r2,1
   21784:	18800115 	stw	r2,4(r3)
   21788:	b8800117 	ldw	r2,4(r23)
   2178c:	9009883a 	mov	r4,r18
   21790:	1080004c 	andi	r2,r2,1
   21794:	a0a8b03a 	or	r20,r20,r2
   21798:	bd000115 	stw	r20,4(r23)
   2179c:	00233740 	call	23374 <__malloc_unlock>
   217a0:	8805883a 	mov	r2,r17
   217a4:	003f5306 	br	214f4 <__alt_data_end+0xfffe84f4>
   217a8:	98c00017 	ldw	r3,0(r19)
   217ac:	88c00015 	stw	r3,0(r17)
   217b0:	98c00117 	ldw	r3,4(r19)
   217b4:	88c00115 	stw	r3,4(r17)
   217b8:	00c006c4 	movi	r3,27
   217bc:	19801d36 	bltu	r3,r6,21834 <_realloc_r+0x4dc>
   217c0:	88800204 	addi	r2,r17,8
   217c4:	98c00204 	addi	r3,r19,8
   217c8:	003fa306 	br	21658 <__alt_data_end+0xfffe8658>
   217cc:	8807883a 	mov	r3,r17
   217d0:	003f7406 	br	215a4 <__alt_data_end+0xfffe85a4>
   217d4:	ad2b883a 	add	r21,r21,r20
   217d8:	2505c83a 	sub	r2,r4,r20
   217dc:	e5400215 	stw	r21,8(fp)
   217e0:	10800054 	ori	r2,r2,1
   217e4:	a8800115 	stw	r2,4(r21)
   217e8:	98bfff17 	ldw	r2,-4(r19)
   217ec:	9009883a 	mov	r4,r18
   217f0:	1080004c 	andi	r2,r2,1
   217f4:	a0a8b03a 	or	r20,r20,r2
   217f8:	9d3fff15 	stw	r20,-4(r19)
   217fc:	00233740 	call	23374 <__malloc_unlock>
   21800:	9805883a 	mov	r2,r19
   21804:	003f3b06 	br	214f4 <__alt_data_end+0xfffe84f4>
   21808:	8809883a 	mov	r4,r17
   2180c:	980b883a 	mov	r5,r19
   21810:	00211fc0 	call	211fc <memmove>
   21814:	003f9606 	br	21670 <__alt_data_end+0xfffe8670>
   21818:	8809883a 	mov	r4,r17
   2181c:	980b883a 	mov	r5,r19
   21820:	00211fc0 	call	211fc <memmove>
   21824:	b8c00117 	ldw	r3,4(r23)
   21828:	b021883a 	mov	r16,r22
   2182c:	b82b883a 	mov	r21,r23
   21830:	003f2306 	br	214c0 <__alt_data_end+0xfffe84c0>
   21834:	98c00217 	ldw	r3,8(r19)
   21838:	88c00215 	stw	r3,8(r17)
   2183c:	98c00317 	ldw	r3,12(r19)
   21840:	88c00315 	stw	r3,12(r17)
   21844:	30800c26 	beq	r6,r2,21878 <_realloc_r+0x520>
   21848:	88800404 	addi	r2,r17,16
   2184c:	98c00404 	addi	r3,r19,16
   21850:	003f8106 	br	21658 <__alt_data_end+0xfffe8658>
   21854:	893fff17 	ldw	r4,-4(r17)
   21858:	00bfff04 	movi	r2,-4
   2185c:	9823883a 	mov	r17,r19
   21860:	2084703a 	and	r2,r4,r2
   21864:	80a1883a 	add	r16,r16,r2
   21868:	003f1506 	br	214c0 <__alt_data_end+0xfffe84c0>
   2186c:	b8c00404 	addi	r3,r23,16
   21870:	9cc00204 	addi	r19,r19,8
   21874:	003f4b06 	br	215a4 <__alt_data_end+0xfffe85a4>
   21878:	99000417 	ldw	r4,16(r19)
   2187c:	88800604 	addi	r2,r17,24
   21880:	98c00604 	addi	r3,r19,24
   21884:	89000415 	stw	r4,16(r17)
   21888:	99000517 	ldw	r4,20(r19)
   2188c:	89000515 	stw	r4,20(r17)
   21890:	003f7106 	br	21658 <__alt_data_end+0xfffe8658>
   21894:	8805883a 	mov	r2,r17
   21898:	003fb006 	br	2175c <__alt_data_end+0xfffe875c>
   2189c:	8809883a 	mov	r4,r17
   218a0:	980b883a 	mov	r5,r19
   218a4:	00211fc0 	call	211fc <memmove>
   218a8:	003fb206 	br	21774 <__alt_data_end+0xfffe8774>
   218ac:	98800217 	ldw	r2,8(r19)
   218b0:	b8800415 	stw	r2,16(r23)
   218b4:	98800317 	ldw	r2,12(r19)
   218b8:	b8800515 	stw	r2,20(r23)
   218bc:	31000726 	beq	r6,r4,218dc <_realloc_r+0x584>
   218c0:	b8800604 	addi	r2,r23,24
   218c4:	9cc00404 	addi	r19,r19,16
   218c8:	003fa406 	br	2175c <__alt_data_end+0xfffe875c>
   218cc:	9009883a 	mov	r4,r18
   218d0:	00233740 	call	23374 <__malloc_unlock>
   218d4:	0005883a 	mov	r2,zero
   218d8:	003f0606 	br	214f4 <__alt_data_end+0xfffe84f4>
   218dc:	98c00417 	ldw	r3,16(r19)
   218e0:	9cc00604 	addi	r19,r19,24
   218e4:	b8800804 	addi	r2,r23,32
   218e8:	b8c00615 	stw	r3,24(r23)
   218ec:	98ffff17 	ldw	r3,-4(r19)
   218f0:	b8c00715 	stw	r3,28(r23)
   218f4:	003f9906 	br	2175c <__alt_data_end+0xfffe875c>

000218f8 <_sbrk_r>:
   218f8:	defffd04 	addi	sp,sp,-12
   218fc:	dc000015 	stw	r16,0(sp)
   21900:	040000f4 	movhi	r16,3
   21904:	dc400115 	stw	r17,4(sp)
   21908:	84225604 	addi	r16,r16,-30376
   2190c:	2023883a 	mov	r17,r4
   21910:	2809883a 	mov	r4,r5
   21914:	dfc00215 	stw	ra,8(sp)
   21918:	80000015 	stw	zero,0(r16)
   2191c:	00235680 	call	23568 <sbrk>
   21920:	00ffffc4 	movi	r3,-1
   21924:	10c00526 	beq	r2,r3,2193c <_sbrk_r+0x44>
   21928:	dfc00217 	ldw	ra,8(sp)
   2192c:	dc400117 	ldw	r17,4(sp)
   21930:	dc000017 	ldw	r16,0(sp)
   21934:	dec00304 	addi	sp,sp,12
   21938:	f800283a 	ret
   2193c:	80c00017 	ldw	r3,0(r16)
   21940:	183ff926 	beq	r3,zero,21928 <__alt_data_end+0xfffe8928>
   21944:	88c00015 	stw	r3,0(r17)
   21948:	003ff706 	br	21928 <__alt_data_end+0xfffe8928>

0002194c <__swsetup_r>:
   2194c:	008000b4 	movhi	r2,2
   21950:	defffd04 	addi	sp,sp,-12
   21954:	109bab04 	addi	r2,r2,28332
   21958:	dc400115 	stw	r17,4(sp)
   2195c:	2023883a 	mov	r17,r4
   21960:	11000017 	ldw	r4,0(r2)
   21964:	dc000015 	stw	r16,0(sp)
   21968:	dfc00215 	stw	ra,8(sp)
   2196c:	2821883a 	mov	r16,r5
   21970:	20000226 	beq	r4,zero,2197c <__swsetup_r+0x30>
   21974:	20c00e17 	ldw	r3,56(r4)
   21978:	18002e26 	beq	r3,zero,21a34 <__swsetup_r+0xe8>
   2197c:	8080030b 	ldhu	r2,12(r16)
   21980:	10c0020c 	andi	r3,r2,8
   21984:	100d883a 	mov	r6,r2
   21988:	18000f26 	beq	r3,zero,219c8 <__swsetup_r+0x7c>
   2198c:	80c00417 	ldw	r3,16(r16)
   21990:	18001526 	beq	r3,zero,219e8 <__swsetup_r+0x9c>
   21994:	1100004c 	andi	r4,r2,1
   21998:	20001c1e 	bne	r4,zero,21a0c <__swsetup_r+0xc0>
   2199c:	1080008c 	andi	r2,r2,2
   219a0:	1000261e 	bne	r2,zero,21a3c <__swsetup_r+0xf0>
   219a4:	80800517 	ldw	r2,20(r16)
   219a8:	80800215 	stw	r2,8(r16)
   219ac:	18001c26 	beq	r3,zero,21a20 <__swsetup_r+0xd4>
   219b0:	0005883a 	mov	r2,zero
   219b4:	dfc00217 	ldw	ra,8(sp)
   219b8:	dc400117 	ldw	r17,4(sp)
   219bc:	dc000017 	ldw	r16,0(sp)
   219c0:	dec00304 	addi	sp,sp,12
   219c4:	f800283a 	ret
   219c8:	3080040c 	andi	r2,r6,16
   219cc:	10001726 	beq	r2,zero,21a2c <__swsetup_r+0xe0>
   219d0:	3080010c 	andi	r2,r6,4
   219d4:	10001b1e 	bne	r2,zero,21a44 <__swsetup_r+0xf8>
   219d8:	80c00417 	ldw	r3,16(r16)
   219dc:	30800214 	ori	r2,r6,8
   219e0:	8080030d 	sth	r2,12(r16)
   219e4:	183feb1e 	bne	r3,zero,21994 <__alt_data_end+0xfffe8994>
   219e8:	1140a00c 	andi	r5,r2,640
   219ec:	01008004 	movi	r4,512
   219f0:	293fe826 	beq	r5,r4,21994 <__alt_data_end+0xfffe8994>
   219f4:	8809883a 	mov	r4,r17
   219f8:	800b883a 	mov	r5,r16
   219fc:	002260c0 	call	2260c <__smakebuf_r>
   21a00:	8080030b 	ldhu	r2,12(r16)
   21a04:	80c00417 	ldw	r3,16(r16)
   21a08:	003fe206 	br	21994 <__alt_data_end+0xfffe8994>
   21a0c:	80800517 	ldw	r2,20(r16)
   21a10:	80000215 	stw	zero,8(r16)
   21a14:	0085c83a 	sub	r2,zero,r2
   21a18:	80800615 	stw	r2,24(r16)
   21a1c:	183fe41e 	bne	r3,zero,219b0 <__alt_data_end+0xfffe89b0>
   21a20:	8080030b 	ldhu	r2,12(r16)
   21a24:	1080200c 	andi	r2,r2,128
   21a28:	103fe226 	beq	r2,zero,219b4 <__alt_data_end+0xfffe89b4>
   21a2c:	00bfffc4 	movi	r2,-1
   21a30:	003fe006 	br	219b4 <__alt_data_end+0xfffe89b4>
   21a34:	00220380 	call	22038 <__sinit>
   21a38:	003fd006 	br	2197c <__alt_data_end+0xfffe897c>
   21a3c:	0005883a 	mov	r2,zero
   21a40:	003fd906 	br	219a8 <__alt_data_end+0xfffe89a8>
   21a44:	81400c17 	ldw	r5,48(r16)
   21a48:	28000626 	beq	r5,zero,21a64 <__swsetup_r+0x118>
   21a4c:	80801004 	addi	r2,r16,64
   21a50:	28800326 	beq	r5,r2,21a60 <__swsetup_r+0x114>
   21a54:	8809883a 	mov	r4,r17
   21a58:	00221ac0 	call	221ac <_free_r>
   21a5c:	8180030b 	ldhu	r6,12(r16)
   21a60:	80000c15 	stw	zero,48(r16)
   21a64:	80c00417 	ldw	r3,16(r16)
   21a68:	00bff6c4 	movi	r2,-37
   21a6c:	118c703a 	and	r6,r2,r6
   21a70:	80000115 	stw	zero,4(r16)
   21a74:	80c00015 	stw	r3,0(r16)
   21a78:	003fd806 	br	219dc <__alt_data_end+0xfffe89dc>

00021a7c <_fflush_r>:
   21a7c:	defffb04 	addi	sp,sp,-20
   21a80:	dcc00315 	stw	r19,12(sp)
   21a84:	dc000015 	stw	r16,0(sp)
   21a88:	dfc00415 	stw	ra,16(sp)
   21a8c:	dc800215 	stw	r18,8(sp)
   21a90:	dc400115 	stw	r17,4(sp)
   21a94:	2027883a 	mov	r19,r4
   21a98:	2821883a 	mov	r16,r5
   21a9c:	20000226 	beq	r4,zero,21aa8 <_fflush_r+0x2c>
   21aa0:	20800e17 	ldw	r2,56(r4)
   21aa4:	10005326 	beq	r2,zero,21bf4 <_fflush_r+0x178>
   21aa8:	8080030b 	ldhu	r2,12(r16)
   21aac:	10ffffcc 	andi	r3,r2,65535
   21ab0:	18e0001c 	xori	r3,r3,32768
   21ab4:	18e00004 	addi	r3,r3,-32768
   21ab8:	18002c26 	beq	r3,zero,21b6c <_fflush_r+0xf0>
   21abc:	10c0020c 	andi	r3,r2,8
   21ac0:	1800321e 	bne	r3,zero,21b8c <_fflush_r+0x110>
   21ac4:	80c00117 	ldw	r3,4(r16)
   21ac8:	10820014 	ori	r2,r2,2048
   21acc:	8080030d 	sth	r2,12(r16)
   21ad0:	00c0570e 	bge	zero,r3,21c30 <_fflush_r+0x1b4>
   21ad4:	82000a17 	ldw	r8,40(r16)
   21ad8:	40002426 	beq	r8,zero,21b6c <_fflush_r+0xf0>
   21adc:	9c400017 	ldw	r17,0(r19)
   21ae0:	10c4000c 	andi	r3,r2,4096
   21ae4:	98000015 	stw	zero,0(r19)
   21ae8:	18004626 	beq	r3,zero,21c04 <_fflush_r+0x188>
   21aec:	81801417 	ldw	r6,80(r16)
   21af0:	10c0010c 	andi	r3,r2,4
   21af4:	18000626 	beq	r3,zero,21b10 <_fflush_r+0x94>
   21af8:	80c00117 	ldw	r3,4(r16)
   21afc:	80800c17 	ldw	r2,48(r16)
   21b00:	30cdc83a 	sub	r6,r6,r3
   21b04:	10000226 	beq	r2,zero,21b10 <_fflush_r+0x94>
   21b08:	80800f17 	ldw	r2,60(r16)
   21b0c:	308dc83a 	sub	r6,r6,r2
   21b10:	81400717 	ldw	r5,28(r16)
   21b14:	9809883a 	mov	r4,r19
   21b18:	000f883a 	mov	r7,zero
   21b1c:	403ee83a 	callr	r8
   21b20:	00ffffc4 	movi	r3,-1
   21b24:	10c04526 	beq	r2,r3,21c3c <_fflush_r+0x1c0>
   21b28:	80c0030b 	ldhu	r3,12(r16)
   21b2c:	81000417 	ldw	r4,16(r16)
   21b30:	80000115 	stw	zero,4(r16)
   21b34:	197dffcc 	andi	r5,r3,63487
   21b38:	8140030d 	sth	r5,12(r16)
   21b3c:	81000015 	stw	r4,0(r16)
   21b40:	18c4000c 	andi	r3,r3,4096
   21b44:	18000126 	beq	r3,zero,21b4c <_fflush_r+0xd0>
   21b48:	80801415 	stw	r2,80(r16)
   21b4c:	81400c17 	ldw	r5,48(r16)
   21b50:	9c400015 	stw	r17,0(r19)
   21b54:	28000526 	beq	r5,zero,21b6c <_fflush_r+0xf0>
   21b58:	80801004 	addi	r2,r16,64
   21b5c:	28800226 	beq	r5,r2,21b68 <_fflush_r+0xec>
   21b60:	9809883a 	mov	r4,r19
   21b64:	00221ac0 	call	221ac <_free_r>
   21b68:	80000c15 	stw	zero,48(r16)
   21b6c:	0005883a 	mov	r2,zero
   21b70:	dfc00417 	ldw	ra,16(sp)
   21b74:	dcc00317 	ldw	r19,12(sp)
   21b78:	dc800217 	ldw	r18,8(sp)
   21b7c:	dc400117 	ldw	r17,4(sp)
   21b80:	dc000017 	ldw	r16,0(sp)
   21b84:	dec00504 	addi	sp,sp,20
   21b88:	f800283a 	ret
   21b8c:	84800417 	ldw	r18,16(r16)
   21b90:	903ff626 	beq	r18,zero,21b6c <__alt_data_end+0xfffe8b6c>
   21b94:	84400017 	ldw	r17,0(r16)
   21b98:	108000cc 	andi	r2,r2,3
   21b9c:	84800015 	stw	r18,0(r16)
   21ba0:	8ca3c83a 	sub	r17,r17,r18
   21ba4:	10001526 	beq	r2,zero,21bfc <_fflush_r+0x180>
   21ba8:	0005883a 	mov	r2,zero
   21bac:	80800215 	stw	r2,8(r16)
   21bb0:	04400316 	blt	zero,r17,21bc0 <_fflush_r+0x144>
   21bb4:	003fed06 	br	21b6c <__alt_data_end+0xfffe8b6c>
   21bb8:	90a5883a 	add	r18,r18,r2
   21bbc:	047feb0e 	bge	zero,r17,21b6c <__alt_data_end+0xfffe8b6c>
   21bc0:	80800917 	ldw	r2,36(r16)
   21bc4:	81400717 	ldw	r5,28(r16)
   21bc8:	880f883a 	mov	r7,r17
   21bcc:	900d883a 	mov	r6,r18
   21bd0:	9809883a 	mov	r4,r19
   21bd4:	103ee83a 	callr	r2
   21bd8:	88a3c83a 	sub	r17,r17,r2
   21bdc:	00bff616 	blt	zero,r2,21bb8 <__alt_data_end+0xfffe8bb8>
   21be0:	80c0030b 	ldhu	r3,12(r16)
   21be4:	00bfffc4 	movi	r2,-1
   21be8:	18c01014 	ori	r3,r3,64
   21bec:	80c0030d 	sth	r3,12(r16)
   21bf0:	003fdf06 	br	21b70 <__alt_data_end+0xfffe8b70>
   21bf4:	00220380 	call	22038 <__sinit>
   21bf8:	003fab06 	br	21aa8 <__alt_data_end+0xfffe8aa8>
   21bfc:	80800517 	ldw	r2,20(r16)
   21c00:	003fea06 	br	21bac <__alt_data_end+0xfffe8bac>
   21c04:	81400717 	ldw	r5,28(r16)
   21c08:	000d883a 	mov	r6,zero
   21c0c:	9809883a 	mov	r4,r19
   21c10:	01c00044 	movi	r7,1
   21c14:	403ee83a 	callr	r8
   21c18:	100d883a 	mov	r6,r2
   21c1c:	00bfffc4 	movi	r2,-1
   21c20:	30801326 	beq	r6,r2,21c70 <_fflush_r+0x1f4>
   21c24:	8080030b 	ldhu	r2,12(r16)
   21c28:	82000a17 	ldw	r8,40(r16)
   21c2c:	003fb006 	br	21af0 <__alt_data_end+0xfffe8af0>
   21c30:	80c00f17 	ldw	r3,60(r16)
   21c34:	00ffa716 	blt	zero,r3,21ad4 <__alt_data_end+0xfffe8ad4>
   21c38:	003fcc06 	br	21b6c <__alt_data_end+0xfffe8b6c>
   21c3c:	98c00017 	ldw	r3,0(r19)
   21c40:	183fb926 	beq	r3,zero,21b28 <__alt_data_end+0xfffe8b28>
   21c44:	01000744 	movi	r4,29
   21c48:	19000226 	beq	r3,r4,21c54 <_fflush_r+0x1d8>
   21c4c:	01000584 	movi	r4,22
   21c50:	1900101e 	bne	r3,r4,21c94 <_fflush_r+0x218>
   21c54:	8080030b 	ldhu	r2,12(r16)
   21c58:	80c00417 	ldw	r3,16(r16)
   21c5c:	80000115 	stw	zero,4(r16)
   21c60:	10bdffcc 	andi	r2,r2,63487
   21c64:	8080030d 	sth	r2,12(r16)
   21c68:	80c00015 	stw	r3,0(r16)
   21c6c:	003fb706 	br	21b4c <__alt_data_end+0xfffe8b4c>
   21c70:	98800017 	ldw	r2,0(r19)
   21c74:	103feb26 	beq	r2,zero,21c24 <__alt_data_end+0xfffe8c24>
   21c78:	00c00744 	movi	r3,29
   21c7c:	10c00226 	beq	r2,r3,21c88 <_fflush_r+0x20c>
   21c80:	00c00584 	movi	r3,22
   21c84:	10ffd61e 	bne	r2,r3,21be0 <__alt_data_end+0xfffe8be0>
   21c88:	9c400015 	stw	r17,0(r19)
   21c8c:	0005883a 	mov	r2,zero
   21c90:	003fb706 	br	21b70 <__alt_data_end+0xfffe8b70>
   21c94:	80c0030b 	ldhu	r3,12(r16)
   21c98:	18c01014 	ori	r3,r3,64
   21c9c:	80c0030d 	sth	r3,12(r16)
   21ca0:	003fb306 	br	21b70 <__alt_data_end+0xfffe8b70>

00021ca4 <fflush>:
   21ca4:	20000526 	beq	r4,zero,21cbc <fflush+0x18>
   21ca8:	008000b4 	movhi	r2,2
   21cac:	109bab04 	addi	r2,r2,28332
   21cb0:	200b883a 	mov	r5,r4
   21cb4:	11000017 	ldw	r4,0(r2)
   21cb8:	0021a7c1 	jmpi	21a7c <_fflush_r>
   21cbc:	008000b4 	movhi	r2,2
   21cc0:	109baa04 	addi	r2,r2,28328
   21cc4:	11000017 	ldw	r4,0(r2)
   21cc8:	014000b4 	movhi	r5,2
   21ccc:	29469f04 	addi	r5,r5,6780
   21cd0:	00225541 	jmpi	22554 <_fwalk_reent>

00021cd4 <__fp_lock>:
   21cd4:	0005883a 	mov	r2,zero
   21cd8:	f800283a 	ret

00021cdc <__fp_unlock>:
   21cdc:	0005883a 	mov	r2,zero
   21ce0:	f800283a 	ret

00021ce4 <_cleanup_r>:
   21ce4:	014000b4 	movhi	r5,2
   21ce8:	294af504 	addi	r5,r5,11220
   21cec:	002249c1 	jmpi	2249c <_fwalk>

00021cf0 <__sinit.part.1>:
   21cf0:	defff604 	addi	sp,sp,-40
   21cf4:	00c000b4 	movhi	r3,2
   21cf8:	dfc00915 	stw	ra,36(sp)
   21cfc:	df000815 	stw	fp,32(sp)
   21d00:	ddc00715 	stw	r23,28(sp)
   21d04:	dd800615 	stw	r22,24(sp)
   21d08:	dd400515 	stw	r21,20(sp)
   21d0c:	dd000415 	stw	r20,16(sp)
   21d10:	dcc00315 	stw	r19,12(sp)
   21d14:	dc800215 	stw	r18,8(sp)
   21d18:	dc400115 	stw	r17,4(sp)
   21d1c:	dc000015 	stw	r16,0(sp)
   21d20:	18c73904 	addi	r3,r3,7396
   21d24:	24000117 	ldw	r16,4(r4)
   21d28:	20c00f15 	stw	r3,60(r4)
   21d2c:	07000044 	movi	fp,1
   21d30:	00c000c4 	movi	r3,3
   21d34:	2080bb04 	addi	r2,r4,748
   21d38:	20c0b915 	stw	r3,740(r4)
   21d3c:	27000e15 	stw	fp,56(r4)
   21d40:	2080ba15 	stw	r2,744(r4)
   21d44:	2000b815 	stw	zero,736(r4)
   21d48:	05c00204 	movi	r23,8
   21d4c:	00800104 	movi	r2,4
   21d50:	2025883a 	mov	r18,r4
   21d54:	b80d883a 	mov	r6,r23
   21d58:	81001704 	addi	r4,r16,92
   21d5c:	000b883a 	mov	r5,zero
   21d60:	80000015 	stw	zero,0(r16)
   21d64:	80000115 	stw	zero,4(r16)
   21d68:	80000215 	stw	zero,8(r16)
   21d6c:	8080030d 	sth	r2,12(r16)
   21d70:	80001915 	stw	zero,100(r16)
   21d74:	8000038d 	sth	zero,14(r16)
   21d78:	80000415 	stw	zero,16(r16)
   21d7c:	80000515 	stw	zero,20(r16)
   21d80:	80000615 	stw	zero,24(r16)
   21d84:	00227c40 	call	227c4 <memset>
   21d88:	058000b4 	movhi	r22,2
   21d8c:	94400217 	ldw	r17,8(r18)
   21d90:	054000b4 	movhi	r21,2
   21d94:	050000b4 	movhi	r20,2
   21d98:	04c000b4 	movhi	r19,2
   21d9c:	b58a3a04 	addi	r22,r22,10472
   21da0:	ad4a5104 	addi	r21,r21,10564
   21da4:	a50a7004 	addi	r20,r20,10688
   21da8:	9cca8704 	addi	r19,r19,10780
   21dac:	85800815 	stw	r22,32(r16)
   21db0:	85400915 	stw	r21,36(r16)
   21db4:	85000a15 	stw	r20,40(r16)
   21db8:	84c00b15 	stw	r19,44(r16)
   21dbc:	84000715 	stw	r16,28(r16)
   21dc0:	00800284 	movi	r2,10
   21dc4:	89001704 	addi	r4,r17,92
   21dc8:	b80d883a 	mov	r6,r23
   21dcc:	000b883a 	mov	r5,zero
   21dd0:	88000015 	stw	zero,0(r17)
   21dd4:	88000115 	stw	zero,4(r17)
   21dd8:	88000215 	stw	zero,8(r17)
   21ddc:	8880030d 	sth	r2,12(r17)
   21de0:	88001915 	stw	zero,100(r17)
   21de4:	8f00038d 	sth	fp,14(r17)
   21de8:	88000415 	stw	zero,16(r17)
   21dec:	88000515 	stw	zero,20(r17)
   21df0:	88000615 	stw	zero,24(r17)
   21df4:	00227c40 	call	227c4 <memset>
   21df8:	94000317 	ldw	r16,12(r18)
   21dfc:	00800484 	movi	r2,18
   21e00:	8c400715 	stw	r17,28(r17)
   21e04:	8d800815 	stw	r22,32(r17)
   21e08:	8d400915 	stw	r21,36(r17)
   21e0c:	8d000a15 	stw	r20,40(r17)
   21e10:	8cc00b15 	stw	r19,44(r17)
   21e14:	8080030d 	sth	r2,12(r16)
   21e18:	00800084 	movi	r2,2
   21e1c:	80000015 	stw	zero,0(r16)
   21e20:	80000115 	stw	zero,4(r16)
   21e24:	80000215 	stw	zero,8(r16)
   21e28:	80001915 	stw	zero,100(r16)
   21e2c:	8080038d 	sth	r2,14(r16)
   21e30:	80000415 	stw	zero,16(r16)
   21e34:	80000515 	stw	zero,20(r16)
   21e38:	80000615 	stw	zero,24(r16)
   21e3c:	81001704 	addi	r4,r16,92
   21e40:	000b883a 	mov	r5,zero
   21e44:	b80d883a 	mov	r6,r23
   21e48:	00227c40 	call	227c4 <memset>
   21e4c:	84000715 	stw	r16,28(r16)
   21e50:	85800815 	stw	r22,32(r16)
   21e54:	85400915 	stw	r21,36(r16)
   21e58:	85000a15 	stw	r20,40(r16)
   21e5c:	84c00b15 	stw	r19,44(r16)
   21e60:	dfc00917 	ldw	ra,36(sp)
   21e64:	df000817 	ldw	fp,32(sp)
   21e68:	ddc00717 	ldw	r23,28(sp)
   21e6c:	dd800617 	ldw	r22,24(sp)
   21e70:	dd400517 	ldw	r21,20(sp)
   21e74:	dd000417 	ldw	r20,16(sp)
   21e78:	dcc00317 	ldw	r19,12(sp)
   21e7c:	dc800217 	ldw	r18,8(sp)
   21e80:	dc400117 	ldw	r17,4(sp)
   21e84:	dc000017 	ldw	r16,0(sp)
   21e88:	dec00a04 	addi	sp,sp,40
   21e8c:	f800283a 	ret

00021e90 <__sfmoreglue>:
   21e90:	defffc04 	addi	sp,sp,-16
   21e94:	dc800215 	stw	r18,8(sp)
   21e98:	2825883a 	mov	r18,r5
   21e9c:	dc000015 	stw	r16,0(sp)
   21ea0:	01401a04 	movi	r5,104
   21ea4:	2021883a 	mov	r16,r4
   21ea8:	9009883a 	mov	r4,r18
   21eac:	dfc00315 	stw	ra,12(sp)
   21eb0:	dc400115 	stw	r17,4(sp)
   21eb4:	0022d4c0 	call	22d4c <__mulsi3>
   21eb8:	8009883a 	mov	r4,r16
   21ebc:	11400304 	addi	r5,r2,12
   21ec0:	1023883a 	mov	r17,r2
   21ec4:	00208340 	call	20834 <_malloc_r>
   21ec8:	1021883a 	mov	r16,r2
   21ecc:	10000726 	beq	r2,zero,21eec <__sfmoreglue+0x5c>
   21ed0:	11000304 	addi	r4,r2,12
   21ed4:	10000015 	stw	zero,0(r2)
   21ed8:	14800115 	stw	r18,4(r2)
   21edc:	11000215 	stw	r4,8(r2)
   21ee0:	000b883a 	mov	r5,zero
   21ee4:	880d883a 	mov	r6,r17
   21ee8:	00227c40 	call	227c4 <memset>
   21eec:	8005883a 	mov	r2,r16
   21ef0:	dfc00317 	ldw	ra,12(sp)
   21ef4:	dc800217 	ldw	r18,8(sp)
   21ef8:	dc400117 	ldw	r17,4(sp)
   21efc:	dc000017 	ldw	r16,0(sp)
   21f00:	dec00404 	addi	sp,sp,16
   21f04:	f800283a 	ret

00021f08 <__sfp>:
   21f08:	008000b4 	movhi	r2,2
   21f0c:	defffb04 	addi	sp,sp,-20
   21f10:	109baa04 	addi	r2,r2,28328
   21f14:	dc800215 	stw	r18,8(sp)
   21f18:	14800017 	ldw	r18,0(r2)
   21f1c:	dcc00315 	stw	r19,12(sp)
   21f20:	dfc00415 	stw	ra,16(sp)
   21f24:	90800e17 	ldw	r2,56(r18)
   21f28:	dc400115 	stw	r17,4(sp)
   21f2c:	dc000015 	stw	r16,0(sp)
   21f30:	2027883a 	mov	r19,r4
   21f34:	1000021e 	bne	r2,zero,21f40 <__sfp+0x38>
   21f38:	9009883a 	mov	r4,r18
   21f3c:	0021cf00 	call	21cf0 <__sinit.part.1>
   21f40:	9480b804 	addi	r18,r18,736
   21f44:	047fffc4 	movi	r17,-1
   21f48:	91400117 	ldw	r5,4(r18)
   21f4c:	94000217 	ldw	r16,8(r18)
   21f50:	297fffc4 	addi	r5,r5,-1
   21f54:	28000a16 	blt	r5,zero,21f80 <__sfp+0x78>
   21f58:	8080030f 	ldh	r2,12(r16)
   21f5c:	10000c26 	beq	r2,zero,21f90 <__sfp+0x88>
   21f60:	80c01d04 	addi	r3,r16,116
   21f64:	00000206 	br	21f70 <__sfp+0x68>
   21f68:	18bfe60f 	ldh	r2,-104(r3)
   21f6c:	10000826 	beq	r2,zero,21f90 <__sfp+0x88>
   21f70:	297fffc4 	addi	r5,r5,-1
   21f74:	1c3ffd04 	addi	r16,r3,-12
   21f78:	18c01a04 	addi	r3,r3,104
   21f7c:	2c7ffa1e 	bne	r5,r17,21f68 <__alt_data_end+0xfffe8f68>
   21f80:	90800017 	ldw	r2,0(r18)
   21f84:	10001d26 	beq	r2,zero,21ffc <__sfp+0xf4>
   21f88:	1025883a 	mov	r18,r2
   21f8c:	003fee06 	br	21f48 <__alt_data_end+0xfffe8f48>
   21f90:	00bfffc4 	movi	r2,-1
   21f94:	8080038d 	sth	r2,14(r16)
   21f98:	00800044 	movi	r2,1
   21f9c:	8080030d 	sth	r2,12(r16)
   21fa0:	80001915 	stw	zero,100(r16)
   21fa4:	80000015 	stw	zero,0(r16)
   21fa8:	80000215 	stw	zero,8(r16)
   21fac:	80000115 	stw	zero,4(r16)
   21fb0:	80000415 	stw	zero,16(r16)
   21fb4:	80000515 	stw	zero,20(r16)
   21fb8:	80000615 	stw	zero,24(r16)
   21fbc:	81001704 	addi	r4,r16,92
   21fc0:	000b883a 	mov	r5,zero
   21fc4:	01800204 	movi	r6,8
   21fc8:	00227c40 	call	227c4 <memset>
   21fcc:	8005883a 	mov	r2,r16
   21fd0:	80000c15 	stw	zero,48(r16)
   21fd4:	80000d15 	stw	zero,52(r16)
   21fd8:	80001115 	stw	zero,68(r16)
   21fdc:	80001215 	stw	zero,72(r16)
   21fe0:	dfc00417 	ldw	ra,16(sp)
   21fe4:	dcc00317 	ldw	r19,12(sp)
   21fe8:	dc800217 	ldw	r18,8(sp)
   21fec:	dc400117 	ldw	r17,4(sp)
   21ff0:	dc000017 	ldw	r16,0(sp)
   21ff4:	dec00504 	addi	sp,sp,20
   21ff8:	f800283a 	ret
   21ffc:	9809883a 	mov	r4,r19
   22000:	01400104 	movi	r5,4
   22004:	0021e900 	call	21e90 <__sfmoreglue>
   22008:	90800015 	stw	r2,0(r18)
   2200c:	103fde1e 	bne	r2,zero,21f88 <__alt_data_end+0xfffe8f88>
   22010:	00800304 	movi	r2,12
   22014:	98800015 	stw	r2,0(r19)
   22018:	0005883a 	mov	r2,zero
   2201c:	003ff006 	br	21fe0 <__alt_data_end+0xfffe8fe0>

00022020 <_cleanup>:
   22020:	008000b4 	movhi	r2,2
   22024:	109baa04 	addi	r2,r2,28328
   22028:	11000017 	ldw	r4,0(r2)
   2202c:	014000b4 	movhi	r5,2
   22030:	294af504 	addi	r5,r5,11220
   22034:	002249c1 	jmpi	2249c <_fwalk>

00022038 <__sinit>:
   22038:	20800e17 	ldw	r2,56(r4)
   2203c:	10000126 	beq	r2,zero,22044 <__sinit+0xc>
   22040:	f800283a 	ret
   22044:	0021cf01 	jmpi	21cf0 <__sinit.part.1>

00022048 <__sfp_lock_acquire>:
   22048:	f800283a 	ret

0002204c <__sfp_lock_release>:
   2204c:	f800283a 	ret

00022050 <__sinit_lock_acquire>:
   22050:	f800283a 	ret

00022054 <__sinit_lock_release>:
   22054:	f800283a 	ret

00022058 <__fp_lock_all>:
   22058:	008000b4 	movhi	r2,2
   2205c:	109bab04 	addi	r2,r2,28332
   22060:	11000017 	ldw	r4,0(r2)
   22064:	014000b4 	movhi	r5,2
   22068:	29473504 	addi	r5,r5,7380
   2206c:	002249c1 	jmpi	2249c <_fwalk>

00022070 <__fp_unlock_all>:
   22070:	008000b4 	movhi	r2,2
   22074:	109bab04 	addi	r2,r2,28332
   22078:	11000017 	ldw	r4,0(r2)
   2207c:	014000b4 	movhi	r5,2
   22080:	29473704 	addi	r5,r5,7388
   22084:	002249c1 	jmpi	2249c <_fwalk>

00022088 <_malloc_trim_r>:
   22088:	defffb04 	addi	sp,sp,-20
   2208c:	dcc00315 	stw	r19,12(sp)
   22090:	04c000b4 	movhi	r19,2
   22094:	dc800215 	stw	r18,8(sp)
   22098:	dc400115 	stw	r17,4(sp)
   2209c:	dc000015 	stw	r16,0(sp)
   220a0:	dfc00415 	stw	ra,16(sp)
   220a4:	2821883a 	mov	r16,r5
   220a8:	9cd62604 	addi	r19,r19,22680
   220ac:	2025883a 	mov	r18,r4
   220b0:	00233540 	call	23354 <__malloc_lock>
   220b4:	98800217 	ldw	r2,8(r19)
   220b8:	14400117 	ldw	r17,4(r2)
   220bc:	00bfff04 	movi	r2,-4
   220c0:	88a2703a 	and	r17,r17,r2
   220c4:	8c21c83a 	sub	r16,r17,r16
   220c8:	8403fbc4 	addi	r16,r16,4079
   220cc:	8020d33a 	srli	r16,r16,12
   220d0:	0083ffc4 	movi	r2,4095
   220d4:	843fffc4 	addi	r16,r16,-1
   220d8:	8020933a 	slli	r16,r16,12
   220dc:	1400060e 	bge	r2,r16,220f8 <_malloc_trim_r+0x70>
   220e0:	9009883a 	mov	r4,r18
   220e4:	000b883a 	mov	r5,zero
   220e8:	00218f80 	call	218f8 <_sbrk_r>
   220ec:	98c00217 	ldw	r3,8(r19)
   220f0:	1c47883a 	add	r3,r3,r17
   220f4:	10c00a26 	beq	r2,r3,22120 <_malloc_trim_r+0x98>
   220f8:	9009883a 	mov	r4,r18
   220fc:	00233740 	call	23374 <__malloc_unlock>
   22100:	0005883a 	mov	r2,zero
   22104:	dfc00417 	ldw	ra,16(sp)
   22108:	dcc00317 	ldw	r19,12(sp)
   2210c:	dc800217 	ldw	r18,8(sp)
   22110:	dc400117 	ldw	r17,4(sp)
   22114:	dc000017 	ldw	r16,0(sp)
   22118:	dec00504 	addi	sp,sp,20
   2211c:	f800283a 	ret
   22120:	9009883a 	mov	r4,r18
   22124:	040bc83a 	sub	r5,zero,r16
   22128:	00218f80 	call	218f8 <_sbrk_r>
   2212c:	00ffffc4 	movi	r3,-1
   22130:	10c00d26 	beq	r2,r3,22168 <_malloc_trim_r+0xe0>
   22134:	00c000f4 	movhi	r3,3
   22138:	18e25d04 	addi	r3,r3,-30348
   2213c:	18800017 	ldw	r2,0(r3)
   22140:	99000217 	ldw	r4,8(r19)
   22144:	8c23c83a 	sub	r17,r17,r16
   22148:	8c400054 	ori	r17,r17,1
   2214c:	1421c83a 	sub	r16,r2,r16
   22150:	24400115 	stw	r17,4(r4)
   22154:	9009883a 	mov	r4,r18
   22158:	1c000015 	stw	r16,0(r3)
   2215c:	00233740 	call	23374 <__malloc_unlock>
   22160:	00800044 	movi	r2,1
   22164:	003fe706 	br	22104 <__alt_data_end+0xfffe9104>
   22168:	9009883a 	mov	r4,r18
   2216c:	000b883a 	mov	r5,zero
   22170:	00218f80 	call	218f8 <_sbrk_r>
   22174:	99000217 	ldw	r4,8(r19)
   22178:	014003c4 	movi	r5,15
   2217c:	1107c83a 	sub	r3,r2,r4
   22180:	28ffdd0e 	bge	r5,r3,220f8 <__alt_data_end+0xfffe90f8>
   22184:	014000b4 	movhi	r5,2
   22188:	295bac04 	addi	r5,r5,28336
   2218c:	29400017 	ldw	r5,0(r5)
   22190:	18c00054 	ori	r3,r3,1
   22194:	20c00115 	stw	r3,4(r4)
   22198:	00c000f4 	movhi	r3,3
   2219c:	1145c83a 	sub	r2,r2,r5
   221a0:	18e25d04 	addi	r3,r3,-30348
   221a4:	18800015 	stw	r2,0(r3)
   221a8:	003fd306 	br	220f8 <__alt_data_end+0xfffe90f8>

000221ac <_free_r>:
   221ac:	28004c26 	beq	r5,zero,222e0 <_free_r+0x134>
   221b0:	defffd04 	addi	sp,sp,-12
   221b4:	dc400115 	stw	r17,4(sp)
   221b8:	dc000015 	stw	r16,0(sp)
   221bc:	2023883a 	mov	r17,r4
   221c0:	2821883a 	mov	r16,r5
   221c4:	dfc00215 	stw	ra,8(sp)
   221c8:	00233540 	call	23354 <__malloc_lock>
   221cc:	813fff17 	ldw	r4,-4(r16)
   221d0:	00bfff84 	movi	r2,-2
   221d4:	024000b4 	movhi	r9,2
   221d8:	81bffe04 	addi	r6,r16,-8
   221dc:	2084703a 	and	r2,r4,r2
   221e0:	4a562604 	addi	r9,r9,22680
   221e4:	308b883a 	add	r5,r6,r2
   221e8:	2a000117 	ldw	r8,4(r5)
   221ec:	49c00217 	ldw	r7,8(r9)
   221f0:	00ffff04 	movi	r3,-4
   221f4:	40c6703a 	and	r3,r8,r3
   221f8:	39405326 	beq	r7,r5,22348 <_free_r+0x19c>
   221fc:	28c00115 	stw	r3,4(r5)
   22200:	2100004c 	andi	r4,r4,1
   22204:	2000091e 	bne	r4,zero,2222c <_free_r+0x80>
   22208:	81fffe17 	ldw	r7,-8(r16)
   2220c:	4a000204 	addi	r8,r9,8
   22210:	31cdc83a 	sub	r6,r6,r7
   22214:	31000217 	ldw	r4,8(r6)
   22218:	11c5883a 	add	r2,r2,r7
   2221c:	22006126 	beq	r4,r8,223a4 <_free_r+0x1f8>
   22220:	31c00317 	ldw	r7,12(r6)
   22224:	21c00315 	stw	r7,12(r4)
   22228:	39000215 	stw	r4,8(r7)
   2222c:	28c9883a 	add	r4,r5,r3
   22230:	21c00117 	ldw	r7,4(r4)
   22234:	39c0004c 	andi	r7,r7,1
   22238:	38000d1e 	bne	r7,zero,22270 <_free_r+0xc4>
   2223c:	29000217 	ldw	r4,8(r5)
   22240:	10c5883a 	add	r2,r2,r3
   22244:	00c000b4 	movhi	r3,2
   22248:	18d62804 	addi	r3,r3,22688
   2224c:	20c07526 	beq	r4,r3,22424 <_free_r+0x278>
   22250:	29c00317 	ldw	r7,12(r5)
   22254:	11400054 	ori	r5,r2,1
   22258:	3087883a 	add	r3,r6,r2
   2225c:	21c00315 	stw	r7,12(r4)
   22260:	39000215 	stw	r4,8(r7)
   22264:	31400115 	stw	r5,4(r6)
   22268:	18800015 	stw	r2,0(r3)
   2226c:	00000406 	br	22280 <_free_r+0xd4>
   22270:	10c00054 	ori	r3,r2,1
   22274:	30c00115 	stw	r3,4(r6)
   22278:	3087883a 	add	r3,r6,r2
   2227c:	18800015 	stw	r2,0(r3)
   22280:	00c07fc4 	movi	r3,511
   22284:	18801736 	bltu	r3,r2,222e4 <_free_r+0x138>
   22288:	1004d0fa 	srli	r2,r2,3
   2228c:	01400044 	movi	r5,1
   22290:	49000117 	ldw	r4,4(r9)
   22294:	1087883a 	add	r3,r2,r2
   22298:	18c7883a 	add	r3,r3,r3
   2229c:	1005d0ba 	srai	r2,r2,2
   222a0:	18c7883a 	add	r3,r3,r3
   222a4:	1a47883a 	add	r3,r3,r9
   222a8:	19c00217 	ldw	r7,8(r3)
   222ac:	2884983a 	sll	r2,r5,r2
   222b0:	30c00315 	stw	r3,12(r6)
   222b4:	31c00215 	stw	r7,8(r6)
   222b8:	1104b03a 	or	r2,r2,r4
   222bc:	19800215 	stw	r6,8(r3)
   222c0:	48800115 	stw	r2,4(r9)
   222c4:	39800315 	stw	r6,12(r7)
   222c8:	8809883a 	mov	r4,r17
   222cc:	dfc00217 	ldw	ra,8(sp)
   222d0:	dc400117 	ldw	r17,4(sp)
   222d4:	dc000017 	ldw	r16,0(sp)
   222d8:	dec00304 	addi	sp,sp,12
   222dc:	00233741 	jmpi	23374 <__malloc_unlock>
   222e0:	f800283a 	ret
   222e4:	1006d27a 	srli	r3,r2,9
   222e8:	01000104 	movi	r4,4
   222ec:	20c04036 	bltu	r4,r3,223f0 <_free_r+0x244>
   222f0:	1006d1ba 	srli	r3,r2,6
   222f4:	19400e04 	addi	r5,r3,56
   222f8:	2947883a 	add	r3,r5,r5
   222fc:	18c7883a 	add	r3,r3,r3
   22300:	18c7883a 	add	r3,r3,r3
   22304:	1a49883a 	add	r4,r3,r9
   22308:	20c00217 	ldw	r3,8(r4)
   2230c:	01c000b4 	movhi	r7,2
   22310:	39d62604 	addi	r7,r7,22680
   22314:	19003b26 	beq	r3,r4,22404 <_free_r+0x258>
   22318:	01ffff04 	movi	r7,-4
   2231c:	19400117 	ldw	r5,4(r3)
   22320:	29ca703a 	and	r5,r5,r7
   22324:	1140022e 	bgeu	r2,r5,22330 <_free_r+0x184>
   22328:	18c00217 	ldw	r3,8(r3)
   2232c:	20fffb1e 	bne	r4,r3,2231c <__alt_data_end+0xfffe931c>
   22330:	18800317 	ldw	r2,12(r3)
   22334:	30800315 	stw	r2,12(r6)
   22338:	30c00215 	stw	r3,8(r6)
   2233c:	11800215 	stw	r6,8(r2)
   22340:	19800315 	stw	r6,12(r3)
   22344:	003fe006 	br	222c8 <__alt_data_end+0xfffe92c8>
   22348:	2100004c 	andi	r4,r4,1
   2234c:	1885883a 	add	r2,r3,r2
   22350:	2000071e 	bne	r4,zero,22370 <_free_r+0x1c4>
   22354:	817ffe17 	ldw	r5,-8(r16)
   22358:	314dc83a 	sub	r6,r6,r5
   2235c:	30c00317 	ldw	r3,12(r6)
   22360:	31000217 	ldw	r4,8(r6)
   22364:	1145883a 	add	r2,r2,r5
   22368:	20c00315 	stw	r3,12(r4)
   2236c:	19000215 	stw	r4,8(r3)
   22370:	10c00054 	ori	r3,r2,1
   22374:	30c00115 	stw	r3,4(r6)
   22378:	00c000b4 	movhi	r3,2
   2237c:	18dbad04 	addi	r3,r3,28340
   22380:	18c00017 	ldw	r3,0(r3)
   22384:	49800215 	stw	r6,8(r9)
   22388:	10ffcf36 	bltu	r2,r3,222c8 <__alt_data_end+0xfffe92c8>
   2238c:	008000f4 	movhi	r2,3
   22390:	10a25504 	addi	r2,r2,-30380
   22394:	11400017 	ldw	r5,0(r2)
   22398:	8809883a 	mov	r4,r17
   2239c:	00220880 	call	22088 <_malloc_trim_r>
   223a0:	003fc906 	br	222c8 <__alt_data_end+0xfffe92c8>
   223a4:	28c9883a 	add	r4,r5,r3
   223a8:	21000117 	ldw	r4,4(r4)
   223ac:	2100004c 	andi	r4,r4,1
   223b0:	20000a1e 	bne	r4,zero,223dc <_free_r+0x230>
   223b4:	29000317 	ldw	r4,12(r5)
   223b8:	29400217 	ldw	r5,8(r5)
   223bc:	10c5883a 	add	r2,r2,r3
   223c0:	10c00054 	ori	r3,r2,1
   223c4:	29000315 	stw	r4,12(r5)
   223c8:	21400215 	stw	r5,8(r4)
   223cc:	30c00115 	stw	r3,4(r6)
   223d0:	308d883a 	add	r6,r6,r2
   223d4:	30800015 	stw	r2,0(r6)
   223d8:	003fbb06 	br	222c8 <__alt_data_end+0xfffe92c8>
   223dc:	10c00054 	ori	r3,r2,1
   223e0:	30c00115 	stw	r3,4(r6)
   223e4:	308d883a 	add	r6,r6,r2
   223e8:	30800015 	stw	r2,0(r6)
   223ec:	003fb606 	br	222c8 <__alt_data_end+0xfffe92c8>
   223f0:	01000504 	movi	r4,20
   223f4:	20c01436 	bltu	r4,r3,22448 <_free_r+0x29c>
   223f8:	194016c4 	addi	r5,r3,91
   223fc:	2947883a 	add	r3,r5,r5
   22400:	003fbe06 	br	222fc <__alt_data_end+0xfffe92fc>
   22404:	280bd0ba 	srai	r5,r5,2
   22408:	00800044 	movi	r2,1
   2240c:	39000117 	ldw	r4,4(r7)
   22410:	114a983a 	sll	r5,r2,r5
   22414:	1805883a 	mov	r2,r3
   22418:	2908b03a 	or	r4,r5,r4
   2241c:	39000115 	stw	r4,4(r7)
   22420:	003fc406 	br	22334 <__alt_data_end+0xfffe9334>
   22424:	49800515 	stw	r6,20(r9)
   22428:	49800415 	stw	r6,16(r9)
   2242c:	10c00054 	ori	r3,r2,1
   22430:	31000315 	stw	r4,12(r6)
   22434:	31000215 	stw	r4,8(r6)
   22438:	30c00115 	stw	r3,4(r6)
   2243c:	308d883a 	add	r6,r6,r2
   22440:	30800015 	stw	r2,0(r6)
   22444:	003fa006 	br	222c8 <__alt_data_end+0xfffe92c8>
   22448:	01001504 	movi	r4,84
   2244c:	20c00436 	bltu	r4,r3,22460 <_free_r+0x2b4>
   22450:	1006d33a 	srli	r3,r2,12
   22454:	19401b84 	addi	r5,r3,110
   22458:	2947883a 	add	r3,r5,r5
   2245c:	003fa706 	br	222fc <__alt_data_end+0xfffe92fc>
   22460:	01005504 	movi	r4,340
   22464:	20c00436 	bltu	r4,r3,22478 <_free_r+0x2cc>
   22468:	1006d3fa 	srli	r3,r2,15
   2246c:	19401dc4 	addi	r5,r3,119
   22470:	2947883a 	add	r3,r5,r5
   22474:	003fa106 	br	222fc <__alt_data_end+0xfffe92fc>
   22478:	01015504 	movi	r4,1364
   2247c:	20c00436 	bltu	r4,r3,22490 <_free_r+0x2e4>
   22480:	1006d4ba 	srli	r3,r2,18
   22484:	19401f04 	addi	r5,r3,124
   22488:	2947883a 	add	r3,r5,r5
   2248c:	003f9b06 	br	222fc <__alt_data_end+0xfffe92fc>
   22490:	00c03f04 	movi	r3,252
   22494:	01401f84 	movi	r5,126
   22498:	003f9806 	br	222fc <__alt_data_end+0xfffe92fc>

0002249c <_fwalk>:
   2249c:	defff804 	addi	sp,sp,-32
   224a0:	dd400515 	stw	r21,20(sp)
   224a4:	2540b804 	addi	r21,r4,736
   224a8:	dd800615 	stw	r22,24(sp)
   224ac:	dd000415 	stw	r20,16(sp)
   224b0:	dfc00715 	stw	ra,28(sp)
   224b4:	dcc00315 	stw	r19,12(sp)
   224b8:	dc800215 	stw	r18,8(sp)
   224bc:	dc400115 	stw	r17,4(sp)
   224c0:	dc000015 	stw	r16,0(sp)
   224c4:	2829883a 	mov	r20,r5
   224c8:	002d883a 	mov	r22,zero
   224cc:	00220480 	call	22048 <__sfp_lock_acquire>
   224d0:	a8001426 	beq	r21,zero,22524 <_fwalk+0x88>
   224d4:	04ffffc4 	movi	r19,-1
   224d8:	ac400117 	ldw	r17,4(r21)
   224dc:	ac800217 	ldw	r18,8(r21)
   224e0:	8c7fffc4 	addi	r17,r17,-1
   224e4:	88000d16 	blt	r17,zero,2251c <_fwalk+0x80>
   224e8:	94000304 	addi	r16,r18,12
   224ec:	94800384 	addi	r18,r18,14
   224f0:	80c0000f 	ldh	r3,0(r16)
   224f4:	8c7fffc4 	addi	r17,r17,-1
   224f8:	813ffd04 	addi	r4,r16,-12
   224fc:	18000426 	beq	r3,zero,22510 <_fwalk+0x74>
   22500:	90c0000f 	ldh	r3,0(r18)
   22504:	1cc00226 	beq	r3,r19,22510 <_fwalk+0x74>
   22508:	a03ee83a 	callr	r20
   2250c:	b0acb03a 	or	r22,r22,r2
   22510:	84001a04 	addi	r16,r16,104
   22514:	94801a04 	addi	r18,r18,104
   22518:	8cfff51e 	bne	r17,r19,224f0 <__alt_data_end+0xfffe94f0>
   2251c:	ad400017 	ldw	r21,0(r21)
   22520:	a83fed1e 	bne	r21,zero,224d8 <__alt_data_end+0xfffe94d8>
   22524:	002204c0 	call	2204c <__sfp_lock_release>
   22528:	b005883a 	mov	r2,r22
   2252c:	dfc00717 	ldw	ra,28(sp)
   22530:	dd800617 	ldw	r22,24(sp)
   22534:	dd400517 	ldw	r21,20(sp)
   22538:	dd000417 	ldw	r20,16(sp)
   2253c:	dcc00317 	ldw	r19,12(sp)
   22540:	dc800217 	ldw	r18,8(sp)
   22544:	dc400117 	ldw	r17,4(sp)
   22548:	dc000017 	ldw	r16,0(sp)
   2254c:	dec00804 	addi	sp,sp,32
   22550:	f800283a 	ret

00022554 <_fwalk_reent>:
   22554:	defff804 	addi	sp,sp,-32
   22558:	dd400515 	stw	r21,20(sp)
   2255c:	2540b804 	addi	r21,r4,736
   22560:	dd800615 	stw	r22,24(sp)
   22564:	dd000415 	stw	r20,16(sp)
   22568:	dcc00315 	stw	r19,12(sp)
   2256c:	dfc00715 	stw	ra,28(sp)
   22570:	dc800215 	stw	r18,8(sp)
   22574:	dc400115 	stw	r17,4(sp)
   22578:	dc000015 	stw	r16,0(sp)
   2257c:	2027883a 	mov	r19,r4
   22580:	2829883a 	mov	r20,r5
   22584:	002d883a 	mov	r22,zero
   22588:	00220480 	call	22048 <__sfp_lock_acquire>
   2258c:	a8001326 	beq	r21,zero,225dc <_fwalk_reent+0x88>
   22590:	04bfffc4 	movi	r18,-1
   22594:	ac400117 	ldw	r17,4(r21)
   22598:	ac000217 	ldw	r16,8(r21)
   2259c:	8c7fffc4 	addi	r17,r17,-1
   225a0:	88000c16 	blt	r17,zero,225d4 <_fwalk_reent+0x80>
   225a4:	84000304 	addi	r16,r16,12
   225a8:	80c0000f 	ldh	r3,0(r16)
   225ac:	8c7fffc4 	addi	r17,r17,-1
   225b0:	817ffd04 	addi	r5,r16,-12
   225b4:	18000526 	beq	r3,zero,225cc <_fwalk_reent+0x78>
   225b8:	80c0008f 	ldh	r3,2(r16)
   225bc:	9809883a 	mov	r4,r19
   225c0:	1c800226 	beq	r3,r18,225cc <_fwalk_reent+0x78>
   225c4:	a03ee83a 	callr	r20
   225c8:	b0acb03a 	or	r22,r22,r2
   225cc:	84001a04 	addi	r16,r16,104
   225d0:	8cbff51e 	bne	r17,r18,225a8 <__alt_data_end+0xfffe95a8>
   225d4:	ad400017 	ldw	r21,0(r21)
   225d8:	a83fee1e 	bne	r21,zero,22594 <__alt_data_end+0xfffe9594>
   225dc:	002204c0 	call	2204c <__sfp_lock_release>
   225e0:	b005883a 	mov	r2,r22
   225e4:	dfc00717 	ldw	ra,28(sp)
   225e8:	dd800617 	ldw	r22,24(sp)
   225ec:	dd400517 	ldw	r21,20(sp)
   225f0:	dd000417 	ldw	r20,16(sp)
   225f4:	dcc00317 	ldw	r19,12(sp)
   225f8:	dc800217 	ldw	r18,8(sp)
   225fc:	dc400117 	ldw	r17,4(sp)
   22600:	dc000017 	ldw	r16,0(sp)
   22604:	dec00804 	addi	sp,sp,32
   22608:	f800283a 	ret

0002260c <__smakebuf_r>:
   2260c:	2880030b 	ldhu	r2,12(r5)
   22610:	10c0008c 	andi	r3,r2,2
   22614:	1800401e 	bne	r3,zero,22718 <__smakebuf_r+0x10c>
   22618:	deffec04 	addi	sp,sp,-80
   2261c:	dc000f15 	stw	r16,60(sp)
   22620:	2821883a 	mov	r16,r5
   22624:	2940038f 	ldh	r5,14(r5)
   22628:	dc401015 	stw	r17,64(sp)
   2262c:	dfc01315 	stw	ra,76(sp)
   22630:	dcc01215 	stw	r19,72(sp)
   22634:	dc801115 	stw	r18,68(sp)
   22638:	2023883a 	mov	r17,r4
   2263c:	28001b16 	blt	r5,zero,226ac <__smakebuf_r+0xa0>
   22640:	d80d883a 	mov	r6,sp
   22644:	0022be80 	call	22be8 <_fstat_r>
   22648:	10001716 	blt	r2,zero,226a8 <__smakebuf_r+0x9c>
   2264c:	d8800117 	ldw	r2,4(sp)
   22650:	00e00014 	movui	r3,32768
   22654:	10bc000c 	andi	r2,r2,61440
   22658:	10c03726 	beq	r2,r3,22738 <__smakebuf_r+0x12c>
   2265c:	80c0030b 	ldhu	r3,12(r16)
   22660:	18c20014 	ori	r3,r3,2048
   22664:	80c0030d 	sth	r3,12(r16)
   22668:	00c80004 	movi	r3,8192
   2266c:	10c03c1e 	bne	r2,r3,22760 <__smakebuf_r+0x154>
   22670:	8140038f 	ldh	r5,14(r16)
   22674:	8809883a 	mov	r4,r17
   22678:	0022c400 	call	22c40 <_isatty_r>
   2267c:	10004e26 	beq	r2,zero,227b8 <__smakebuf_r+0x1ac>
   22680:	8080030b 	ldhu	r2,12(r16)
   22684:	04c00044 	movi	r19,1
   22688:	80c010c4 	addi	r3,r16,67
   2268c:	14c4b03a 	or	r2,r2,r19
   22690:	8080030d 	sth	r2,12(r16)
   22694:	80c00015 	stw	r3,0(r16)
   22698:	80c00415 	stw	r3,16(r16)
   2269c:	84c00515 	stw	r19,20(r16)
   226a0:	04810004 	movi	r18,1024
   226a4:	00000706 	br	226c4 <__smakebuf_r+0xb8>
   226a8:	8080030b 	ldhu	r2,12(r16)
   226ac:	10c0200c 	andi	r3,r2,128
   226b0:	18001f1e 	bne	r3,zero,22730 <__smakebuf_r+0x124>
   226b4:	04810004 	movi	r18,1024
   226b8:	10820014 	ori	r2,r2,2048
   226bc:	8080030d 	sth	r2,12(r16)
   226c0:	0027883a 	mov	r19,zero
   226c4:	8809883a 	mov	r4,r17
   226c8:	900b883a 	mov	r5,r18
   226cc:	00208340 	call	20834 <_malloc_r>
   226d0:	10002e26 	beq	r2,zero,2278c <__smakebuf_r+0x180>
   226d4:	80c0030b 	ldhu	r3,12(r16)
   226d8:	010000b4 	movhi	r4,2
   226dc:	21073904 	addi	r4,r4,7396
   226e0:	89000f15 	stw	r4,60(r17)
   226e4:	18c02014 	ori	r3,r3,128
   226e8:	80c0030d 	sth	r3,12(r16)
   226ec:	80800015 	stw	r2,0(r16)
   226f0:	80800415 	stw	r2,16(r16)
   226f4:	84800515 	stw	r18,20(r16)
   226f8:	98001c1e 	bne	r19,zero,2276c <__smakebuf_r+0x160>
   226fc:	dfc01317 	ldw	ra,76(sp)
   22700:	dcc01217 	ldw	r19,72(sp)
   22704:	dc801117 	ldw	r18,68(sp)
   22708:	dc401017 	ldw	r17,64(sp)
   2270c:	dc000f17 	ldw	r16,60(sp)
   22710:	dec01404 	addi	sp,sp,80
   22714:	f800283a 	ret
   22718:	288010c4 	addi	r2,r5,67
   2271c:	28800015 	stw	r2,0(r5)
   22720:	28800415 	stw	r2,16(r5)
   22724:	00800044 	movi	r2,1
   22728:	28800515 	stw	r2,20(r5)
   2272c:	f800283a 	ret
   22730:	04801004 	movi	r18,64
   22734:	003fe006 	br	226b8 <__alt_data_end+0xfffe96b8>
   22738:	81000a17 	ldw	r4,40(r16)
   2273c:	00c000b4 	movhi	r3,2
   22740:	18ca7004 	addi	r3,r3,10688
   22744:	20ffc51e 	bne	r4,r3,2265c <__alt_data_end+0xfffe965c>
   22748:	80c0030b 	ldhu	r3,12(r16)
   2274c:	01010004 	movi	r4,1024
   22750:	81001315 	stw	r4,76(r16)
   22754:	1906b03a 	or	r3,r3,r4
   22758:	80c0030d 	sth	r3,12(r16)
   2275c:	003fc206 	br	22668 <__alt_data_end+0xfffe9668>
   22760:	0027883a 	mov	r19,zero
   22764:	04810004 	movi	r18,1024
   22768:	003fd606 	br	226c4 <__alt_data_end+0xfffe96c4>
   2276c:	8140038f 	ldh	r5,14(r16)
   22770:	8809883a 	mov	r4,r17
   22774:	0022c400 	call	22c40 <_isatty_r>
   22778:	103fe026 	beq	r2,zero,226fc <__alt_data_end+0xfffe96fc>
   2277c:	8080030b 	ldhu	r2,12(r16)
   22780:	10800054 	ori	r2,r2,1
   22784:	8080030d 	sth	r2,12(r16)
   22788:	003fdc06 	br	226fc <__alt_data_end+0xfffe96fc>
   2278c:	8080030b 	ldhu	r2,12(r16)
   22790:	10c0800c 	andi	r3,r2,512
   22794:	183fd91e 	bne	r3,zero,226fc <__alt_data_end+0xfffe96fc>
   22798:	10800094 	ori	r2,r2,2
   2279c:	80c010c4 	addi	r3,r16,67
   227a0:	8080030d 	sth	r2,12(r16)
   227a4:	00800044 	movi	r2,1
   227a8:	80c00015 	stw	r3,0(r16)
   227ac:	80c00415 	stw	r3,16(r16)
   227b0:	80800515 	stw	r2,20(r16)
   227b4:	003fd106 	br	226fc <__alt_data_end+0xfffe96fc>
   227b8:	04c00044 	movi	r19,1
   227bc:	04810004 	movi	r18,1024
   227c0:	003fc006 	br	226c4 <__alt_data_end+0xfffe96c4>

000227c4 <memset>:
   227c4:	20c000cc 	andi	r3,r4,3
   227c8:	2005883a 	mov	r2,r4
   227cc:	18004326 	beq	r3,zero,228dc <memset+0x118>
   227d0:	31ffffc4 	addi	r7,r6,-1
   227d4:	30004026 	beq	r6,zero,228d8 <memset+0x114>
   227d8:	2813883a 	mov	r9,r5
   227dc:	200d883a 	mov	r6,r4
   227e0:	2007883a 	mov	r3,r4
   227e4:	00000406 	br	227f8 <memset+0x34>
   227e8:	3a3fffc4 	addi	r8,r7,-1
   227ec:	31800044 	addi	r6,r6,1
   227f0:	38003926 	beq	r7,zero,228d8 <memset+0x114>
   227f4:	400f883a 	mov	r7,r8
   227f8:	18c00044 	addi	r3,r3,1
   227fc:	32400005 	stb	r9,0(r6)
   22800:	1a0000cc 	andi	r8,r3,3
   22804:	403ff81e 	bne	r8,zero,227e8 <__alt_data_end+0xfffe97e8>
   22808:	010000c4 	movi	r4,3
   2280c:	21c02d2e 	bgeu	r4,r7,228c4 <memset+0x100>
   22810:	29803fcc 	andi	r6,r5,255
   22814:	3008923a 	slli	r4,r6,8
   22818:	218cb03a 	or	r6,r4,r6
   2281c:	3008943a 	slli	r4,r6,16
   22820:	218cb03a 	or	r6,r4,r6
   22824:	010003c4 	movi	r4,15
   22828:	21c0182e 	bgeu	r4,r7,2288c <memset+0xc8>
   2282c:	3b3ffc04 	addi	r12,r7,-16
   22830:	6018d13a 	srli	r12,r12,4
   22834:	1a000104 	addi	r8,r3,4
   22838:	1ac00204 	addi	r11,r3,8
   2283c:	6008913a 	slli	r4,r12,4
   22840:	1a800304 	addi	r10,r3,12
   22844:	1813883a 	mov	r9,r3
   22848:	21000504 	addi	r4,r4,20
   2284c:	1909883a 	add	r4,r3,r4
   22850:	49800015 	stw	r6,0(r9)
   22854:	41800015 	stw	r6,0(r8)
   22858:	59800015 	stw	r6,0(r11)
   2285c:	51800015 	stw	r6,0(r10)
   22860:	42000404 	addi	r8,r8,16
   22864:	4a400404 	addi	r9,r9,16
   22868:	5ac00404 	addi	r11,r11,16
   2286c:	52800404 	addi	r10,r10,16
   22870:	413ff71e 	bne	r8,r4,22850 <__alt_data_end+0xfffe9850>
   22874:	63000044 	addi	r12,r12,1
   22878:	6018913a 	slli	r12,r12,4
   2287c:	39c003cc 	andi	r7,r7,15
   22880:	010000c4 	movi	r4,3
   22884:	1b07883a 	add	r3,r3,r12
   22888:	21c00e2e 	bgeu	r4,r7,228c4 <memset+0x100>
   2288c:	1813883a 	mov	r9,r3
   22890:	3811883a 	mov	r8,r7
   22894:	010000c4 	movi	r4,3
   22898:	49800015 	stw	r6,0(r9)
   2289c:	423fff04 	addi	r8,r8,-4
   228a0:	4a400104 	addi	r9,r9,4
   228a4:	223ffc36 	bltu	r4,r8,22898 <__alt_data_end+0xfffe9898>
   228a8:	393fff04 	addi	r4,r7,-4
   228ac:	2008d0ba 	srli	r4,r4,2
   228b0:	39c000cc 	andi	r7,r7,3
   228b4:	21000044 	addi	r4,r4,1
   228b8:	2109883a 	add	r4,r4,r4
   228bc:	2109883a 	add	r4,r4,r4
   228c0:	1907883a 	add	r3,r3,r4
   228c4:	38000426 	beq	r7,zero,228d8 <memset+0x114>
   228c8:	19cf883a 	add	r7,r3,r7
   228cc:	19400005 	stb	r5,0(r3)
   228d0:	18c00044 	addi	r3,r3,1
   228d4:	19fffd1e 	bne	r3,r7,228cc <__alt_data_end+0xfffe98cc>
   228d8:	f800283a 	ret
   228dc:	2007883a 	mov	r3,r4
   228e0:	300f883a 	mov	r7,r6
   228e4:	003fc806 	br	22808 <__alt_data_end+0xfffe9808>

000228e8 <__sread>:
   228e8:	defffe04 	addi	sp,sp,-8
   228ec:	dc000015 	stw	r16,0(sp)
   228f0:	2821883a 	mov	r16,r5
   228f4:	2940038f 	ldh	r5,14(r5)
   228f8:	dfc00115 	stw	ra,4(sp)
   228fc:	0022cf00 	call	22cf0 <_read_r>
   22900:	10000716 	blt	r2,zero,22920 <__sread+0x38>
   22904:	80c01417 	ldw	r3,80(r16)
   22908:	1887883a 	add	r3,r3,r2
   2290c:	80c01415 	stw	r3,80(r16)
   22910:	dfc00117 	ldw	ra,4(sp)
   22914:	dc000017 	ldw	r16,0(sp)
   22918:	dec00204 	addi	sp,sp,8
   2291c:	f800283a 	ret
   22920:	80c0030b 	ldhu	r3,12(r16)
   22924:	18fbffcc 	andi	r3,r3,61439
   22928:	80c0030d 	sth	r3,12(r16)
   2292c:	dfc00117 	ldw	ra,4(sp)
   22930:	dc000017 	ldw	r16,0(sp)
   22934:	dec00204 	addi	sp,sp,8
   22938:	f800283a 	ret

0002293c <__seofread>:
   2293c:	0005883a 	mov	r2,zero
   22940:	f800283a 	ret

00022944 <__swrite>:
   22944:	2880030b 	ldhu	r2,12(r5)
   22948:	defffb04 	addi	sp,sp,-20
   2294c:	dcc00315 	stw	r19,12(sp)
   22950:	dc800215 	stw	r18,8(sp)
   22954:	dc400115 	stw	r17,4(sp)
   22958:	dc000015 	stw	r16,0(sp)
   2295c:	dfc00415 	stw	ra,16(sp)
   22960:	10c0400c 	andi	r3,r2,256
   22964:	2821883a 	mov	r16,r5
   22968:	2027883a 	mov	r19,r4
   2296c:	3025883a 	mov	r18,r6
   22970:	3823883a 	mov	r17,r7
   22974:	18000526 	beq	r3,zero,2298c <__swrite+0x48>
   22978:	2940038f 	ldh	r5,14(r5)
   2297c:	000d883a 	mov	r6,zero
   22980:	01c00084 	movi	r7,2
   22984:	0022c940 	call	22c94 <_lseek_r>
   22988:	8080030b 	ldhu	r2,12(r16)
   2298c:	8140038f 	ldh	r5,14(r16)
   22990:	10bbffcc 	andi	r2,r2,61439
   22994:	9809883a 	mov	r4,r19
   22998:	900d883a 	mov	r6,r18
   2299c:	880f883a 	mov	r7,r17
   229a0:	8080030d 	sth	r2,12(r16)
   229a4:	dfc00417 	ldw	ra,16(sp)
   229a8:	dcc00317 	ldw	r19,12(sp)
   229ac:	dc800217 	ldw	r18,8(sp)
   229b0:	dc400117 	ldw	r17,4(sp)
   229b4:	dc000017 	ldw	r16,0(sp)
   229b8:	dec00504 	addi	sp,sp,20
   229bc:	0022a241 	jmpi	22a24 <_write_r>

000229c0 <__sseek>:
   229c0:	defffe04 	addi	sp,sp,-8
   229c4:	dc000015 	stw	r16,0(sp)
   229c8:	2821883a 	mov	r16,r5
   229cc:	2940038f 	ldh	r5,14(r5)
   229d0:	dfc00115 	stw	ra,4(sp)
   229d4:	0022c940 	call	22c94 <_lseek_r>
   229d8:	00ffffc4 	movi	r3,-1
   229dc:	10c00826 	beq	r2,r3,22a00 <__sseek+0x40>
   229e0:	80c0030b 	ldhu	r3,12(r16)
   229e4:	80801415 	stw	r2,80(r16)
   229e8:	18c40014 	ori	r3,r3,4096
   229ec:	80c0030d 	sth	r3,12(r16)
   229f0:	dfc00117 	ldw	ra,4(sp)
   229f4:	dc000017 	ldw	r16,0(sp)
   229f8:	dec00204 	addi	sp,sp,8
   229fc:	f800283a 	ret
   22a00:	80c0030b 	ldhu	r3,12(r16)
   22a04:	18fbffcc 	andi	r3,r3,61439
   22a08:	80c0030d 	sth	r3,12(r16)
   22a0c:	dfc00117 	ldw	ra,4(sp)
   22a10:	dc000017 	ldw	r16,0(sp)
   22a14:	dec00204 	addi	sp,sp,8
   22a18:	f800283a 	ret

00022a1c <__sclose>:
   22a1c:	2940038f 	ldh	r5,14(r5)
   22a20:	0022a801 	jmpi	22a80 <_close_r>

00022a24 <_write_r>:
   22a24:	defffd04 	addi	sp,sp,-12
   22a28:	dc000015 	stw	r16,0(sp)
   22a2c:	040000f4 	movhi	r16,3
   22a30:	dc400115 	stw	r17,4(sp)
   22a34:	84225604 	addi	r16,r16,-30376
   22a38:	2023883a 	mov	r17,r4
   22a3c:	2809883a 	mov	r4,r5
   22a40:	300b883a 	mov	r5,r6
   22a44:	380d883a 	mov	r6,r7
   22a48:	dfc00215 	stw	ra,8(sp)
   22a4c:	80000015 	stw	zero,0(r16)
   22a50:	00236680 	call	23668 <write>
   22a54:	00ffffc4 	movi	r3,-1
   22a58:	10c00526 	beq	r2,r3,22a70 <_write_r+0x4c>
   22a5c:	dfc00217 	ldw	ra,8(sp)
   22a60:	dc400117 	ldw	r17,4(sp)
   22a64:	dc000017 	ldw	r16,0(sp)
   22a68:	dec00304 	addi	sp,sp,12
   22a6c:	f800283a 	ret
   22a70:	80c00017 	ldw	r3,0(r16)
   22a74:	183ff926 	beq	r3,zero,22a5c <__alt_data_end+0xfffe9a5c>
   22a78:	88c00015 	stw	r3,0(r17)
   22a7c:	003ff706 	br	22a5c <__alt_data_end+0xfffe9a5c>

00022a80 <_close_r>:
   22a80:	defffd04 	addi	sp,sp,-12
   22a84:	dc000015 	stw	r16,0(sp)
   22a88:	040000f4 	movhi	r16,3
   22a8c:	dc400115 	stw	r17,4(sp)
   22a90:	84225604 	addi	r16,r16,-30376
   22a94:	2023883a 	mov	r17,r4
   22a98:	2809883a 	mov	r4,r5
   22a9c:	dfc00215 	stw	ra,8(sp)
   22aa0:	80000015 	stw	zero,0(r16)
   22aa4:	0022dc40 	call	22dc4 <close>
   22aa8:	00ffffc4 	movi	r3,-1
   22aac:	10c00526 	beq	r2,r3,22ac4 <_close_r+0x44>
   22ab0:	dfc00217 	ldw	ra,8(sp)
   22ab4:	dc400117 	ldw	r17,4(sp)
   22ab8:	dc000017 	ldw	r16,0(sp)
   22abc:	dec00304 	addi	sp,sp,12
   22ac0:	f800283a 	ret
   22ac4:	80c00017 	ldw	r3,0(r16)
   22ac8:	183ff926 	beq	r3,zero,22ab0 <__alt_data_end+0xfffe9ab0>
   22acc:	88c00015 	stw	r3,0(r17)
   22ad0:	003ff706 	br	22ab0 <__alt_data_end+0xfffe9ab0>

00022ad4 <_fclose_r>:
   22ad4:	28003226 	beq	r5,zero,22ba0 <_fclose_r+0xcc>
   22ad8:	defffc04 	addi	sp,sp,-16
   22adc:	dc400115 	stw	r17,4(sp)
   22ae0:	2023883a 	mov	r17,r4
   22ae4:	dc000015 	stw	r16,0(sp)
   22ae8:	dfc00315 	stw	ra,12(sp)
   22aec:	dc800215 	stw	r18,8(sp)
   22af0:	2821883a 	mov	r16,r5
   22af4:	00220480 	call	22048 <__sfp_lock_acquire>
   22af8:	88000226 	beq	r17,zero,22b04 <_fclose_r+0x30>
   22afc:	88800e17 	ldw	r2,56(r17)
   22b00:	10002926 	beq	r2,zero,22ba8 <_fclose_r+0xd4>
   22b04:	8080030f 	ldh	r2,12(r16)
   22b08:	10002226 	beq	r2,zero,22b94 <_fclose_r+0xc0>
   22b0c:	8809883a 	mov	r4,r17
   22b10:	800b883a 	mov	r5,r16
   22b14:	0021a7c0 	call	21a7c <_fflush_r>
   22b18:	1025883a 	mov	r18,r2
   22b1c:	80800b17 	ldw	r2,44(r16)
   22b20:	10000426 	beq	r2,zero,22b34 <_fclose_r+0x60>
   22b24:	81400717 	ldw	r5,28(r16)
   22b28:	8809883a 	mov	r4,r17
   22b2c:	103ee83a 	callr	r2
   22b30:	10002616 	blt	r2,zero,22bcc <_fclose_r+0xf8>
   22b34:	8080030b 	ldhu	r2,12(r16)
   22b38:	1080200c 	andi	r2,r2,128
   22b3c:	10001f1e 	bne	r2,zero,22bbc <_fclose_r+0xe8>
   22b40:	81400c17 	ldw	r5,48(r16)
   22b44:	28000526 	beq	r5,zero,22b5c <_fclose_r+0x88>
   22b48:	80801004 	addi	r2,r16,64
   22b4c:	28800226 	beq	r5,r2,22b58 <_fclose_r+0x84>
   22b50:	8809883a 	mov	r4,r17
   22b54:	00221ac0 	call	221ac <_free_r>
   22b58:	80000c15 	stw	zero,48(r16)
   22b5c:	81401117 	ldw	r5,68(r16)
   22b60:	28000326 	beq	r5,zero,22b70 <_fclose_r+0x9c>
   22b64:	8809883a 	mov	r4,r17
   22b68:	00221ac0 	call	221ac <_free_r>
   22b6c:	80001115 	stw	zero,68(r16)
   22b70:	8000030d 	sth	zero,12(r16)
   22b74:	002204c0 	call	2204c <__sfp_lock_release>
   22b78:	9005883a 	mov	r2,r18
   22b7c:	dfc00317 	ldw	ra,12(sp)
   22b80:	dc800217 	ldw	r18,8(sp)
   22b84:	dc400117 	ldw	r17,4(sp)
   22b88:	dc000017 	ldw	r16,0(sp)
   22b8c:	dec00404 	addi	sp,sp,16
   22b90:	f800283a 	ret
   22b94:	002204c0 	call	2204c <__sfp_lock_release>
   22b98:	0005883a 	mov	r2,zero
   22b9c:	003ff706 	br	22b7c <__alt_data_end+0xfffe9b7c>
   22ba0:	0005883a 	mov	r2,zero
   22ba4:	f800283a 	ret
   22ba8:	8809883a 	mov	r4,r17
   22bac:	00220380 	call	22038 <__sinit>
   22bb0:	8080030f 	ldh	r2,12(r16)
   22bb4:	103fd51e 	bne	r2,zero,22b0c <__alt_data_end+0xfffe9b0c>
   22bb8:	003ff606 	br	22b94 <__alt_data_end+0xfffe9b94>
   22bbc:	81400417 	ldw	r5,16(r16)
   22bc0:	8809883a 	mov	r4,r17
   22bc4:	00221ac0 	call	221ac <_free_r>
   22bc8:	003fdd06 	br	22b40 <__alt_data_end+0xfffe9b40>
   22bcc:	04bfffc4 	movi	r18,-1
   22bd0:	003fd806 	br	22b34 <__alt_data_end+0xfffe9b34>

00022bd4 <fclose>:
   22bd4:	008000b4 	movhi	r2,2
   22bd8:	109bab04 	addi	r2,r2,28332
   22bdc:	200b883a 	mov	r5,r4
   22be0:	11000017 	ldw	r4,0(r2)
   22be4:	0022ad41 	jmpi	22ad4 <_fclose_r>

00022be8 <_fstat_r>:
   22be8:	defffd04 	addi	sp,sp,-12
   22bec:	dc000015 	stw	r16,0(sp)
   22bf0:	040000f4 	movhi	r16,3
   22bf4:	dc400115 	stw	r17,4(sp)
   22bf8:	84225604 	addi	r16,r16,-30376
   22bfc:	2023883a 	mov	r17,r4
   22c00:	2809883a 	mov	r4,r5
   22c04:	300b883a 	mov	r5,r6
   22c08:	dfc00215 	stw	ra,8(sp)
   22c0c:	80000015 	stw	zero,0(r16)
   22c10:	0022f180 	call	22f18 <fstat>
   22c14:	00ffffc4 	movi	r3,-1
   22c18:	10c00526 	beq	r2,r3,22c30 <_fstat_r+0x48>
   22c1c:	dfc00217 	ldw	ra,8(sp)
   22c20:	dc400117 	ldw	r17,4(sp)
   22c24:	dc000017 	ldw	r16,0(sp)
   22c28:	dec00304 	addi	sp,sp,12
   22c2c:	f800283a 	ret
   22c30:	80c00017 	ldw	r3,0(r16)
   22c34:	183ff926 	beq	r3,zero,22c1c <__alt_data_end+0xfffe9c1c>
   22c38:	88c00015 	stw	r3,0(r17)
   22c3c:	003ff706 	br	22c1c <__alt_data_end+0xfffe9c1c>

00022c40 <_isatty_r>:
   22c40:	defffd04 	addi	sp,sp,-12
   22c44:	dc000015 	stw	r16,0(sp)
   22c48:	040000f4 	movhi	r16,3
   22c4c:	dc400115 	stw	r17,4(sp)
   22c50:	84225604 	addi	r16,r16,-30376
   22c54:	2023883a 	mov	r17,r4
   22c58:	2809883a 	mov	r4,r5
   22c5c:	dfc00215 	stw	ra,8(sp)
   22c60:	80000015 	stw	zero,0(r16)
   22c64:	00230200 	call	23020 <isatty>
   22c68:	00ffffc4 	movi	r3,-1
   22c6c:	10c00526 	beq	r2,r3,22c84 <_isatty_r+0x44>
   22c70:	dfc00217 	ldw	ra,8(sp)
   22c74:	dc400117 	ldw	r17,4(sp)
   22c78:	dc000017 	ldw	r16,0(sp)
   22c7c:	dec00304 	addi	sp,sp,12
   22c80:	f800283a 	ret
   22c84:	80c00017 	ldw	r3,0(r16)
   22c88:	183ff926 	beq	r3,zero,22c70 <__alt_data_end+0xfffe9c70>
   22c8c:	88c00015 	stw	r3,0(r17)
   22c90:	003ff706 	br	22c70 <__alt_data_end+0xfffe9c70>

00022c94 <_lseek_r>:
   22c94:	defffd04 	addi	sp,sp,-12
   22c98:	dc000015 	stw	r16,0(sp)
   22c9c:	040000f4 	movhi	r16,3
   22ca0:	dc400115 	stw	r17,4(sp)
   22ca4:	84225604 	addi	r16,r16,-30376
   22ca8:	2023883a 	mov	r17,r4
   22cac:	2809883a 	mov	r4,r5
   22cb0:	300b883a 	mov	r5,r6
   22cb4:	380d883a 	mov	r6,r7
   22cb8:	dfc00215 	stw	ra,8(sp)
   22cbc:	80000015 	stw	zero,0(r16)
   22cc0:	00232000 	call	23200 <lseek>
   22cc4:	00ffffc4 	movi	r3,-1
   22cc8:	10c00526 	beq	r2,r3,22ce0 <_lseek_r+0x4c>
   22ccc:	dfc00217 	ldw	ra,8(sp)
   22cd0:	dc400117 	ldw	r17,4(sp)
   22cd4:	dc000017 	ldw	r16,0(sp)
   22cd8:	dec00304 	addi	sp,sp,12
   22cdc:	f800283a 	ret
   22ce0:	80c00017 	ldw	r3,0(r16)
   22ce4:	183ff926 	beq	r3,zero,22ccc <__alt_data_end+0xfffe9ccc>
   22ce8:	88c00015 	stw	r3,0(r17)
   22cec:	003ff706 	br	22ccc <__alt_data_end+0xfffe9ccc>

00022cf0 <_read_r>:
   22cf0:	defffd04 	addi	sp,sp,-12
   22cf4:	dc000015 	stw	r16,0(sp)
   22cf8:	040000f4 	movhi	r16,3
   22cfc:	dc400115 	stw	r17,4(sp)
   22d00:	84225604 	addi	r16,r16,-30376
   22d04:	2023883a 	mov	r17,r4
   22d08:	2809883a 	mov	r4,r5
   22d0c:	300b883a 	mov	r5,r6
   22d10:	380d883a 	mov	r6,r7
   22d14:	dfc00215 	stw	ra,8(sp)
   22d18:	80000015 	stw	zero,0(r16)
   22d1c:	00233e40 	call	233e4 <read>
   22d20:	00ffffc4 	movi	r3,-1
   22d24:	10c00526 	beq	r2,r3,22d3c <_read_r+0x4c>
   22d28:	dfc00217 	ldw	ra,8(sp)
   22d2c:	dc400117 	ldw	r17,4(sp)
   22d30:	dc000017 	ldw	r16,0(sp)
   22d34:	dec00304 	addi	sp,sp,12
   22d38:	f800283a 	ret
   22d3c:	80c00017 	ldw	r3,0(r16)
   22d40:	183ff926 	beq	r3,zero,22d28 <__alt_data_end+0xfffe9d28>
   22d44:	88c00015 	stw	r3,0(r17)
   22d48:	003ff706 	br	22d28 <__alt_data_end+0xfffe9d28>

00022d4c <__mulsi3>:
   22d4c:	0005883a 	mov	r2,zero
   22d50:	20000726 	beq	r4,zero,22d70 <__mulsi3+0x24>
   22d54:	20c0004c 	andi	r3,r4,1
   22d58:	2008d07a 	srli	r4,r4,1
   22d5c:	18000126 	beq	r3,zero,22d64 <__mulsi3+0x18>
   22d60:	1145883a 	add	r2,r2,r5
   22d64:	294b883a 	add	r5,r5,r5
   22d68:	203ffa1e 	bne	r4,zero,22d54 <__alt_data_end+0xfffe9d54>
   22d6c:	f800283a 	ret
   22d70:	f800283a 	ret

00022d74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22d74:	defffe04 	addi	sp,sp,-8
   22d78:	dfc00115 	stw	ra,4(sp)
   22d7c:	df000015 	stw	fp,0(sp)
   22d80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22d84:	008000b4 	movhi	r2,2
   22d88:	109bb304 	addi	r2,r2,28364
   22d8c:	10800017 	ldw	r2,0(r2)
   22d90:	10000526 	beq	r2,zero,22da8 <alt_get_errno+0x34>
   22d94:	008000b4 	movhi	r2,2
   22d98:	109bb304 	addi	r2,r2,28364
   22d9c:	10800017 	ldw	r2,0(r2)
   22da0:	103ee83a 	callr	r2
   22da4:	00000206 	br	22db0 <alt_get_errno+0x3c>
   22da8:	008000f4 	movhi	r2,3
   22dac:	10a25604 	addi	r2,r2,-30376
}
   22db0:	e037883a 	mov	sp,fp
   22db4:	dfc00117 	ldw	ra,4(sp)
   22db8:	df000017 	ldw	fp,0(sp)
   22dbc:	dec00204 	addi	sp,sp,8
   22dc0:	f800283a 	ret

00022dc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22dc4:	defffb04 	addi	sp,sp,-20
   22dc8:	dfc00415 	stw	ra,16(sp)
   22dcc:	df000315 	stw	fp,12(sp)
   22dd0:	df000304 	addi	fp,sp,12
   22dd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22dd8:	e0bfff17 	ldw	r2,-4(fp)
   22ddc:	10000816 	blt	r2,zero,22e00 <close+0x3c>
   22de0:	e13fff17 	ldw	r4,-4(fp)
   22de4:	01400304 	movi	r5,12
   22de8:	0022d4c0 	call	22d4c <__mulsi3>
   22dec:	1007883a 	mov	r3,r2
   22df0:	008000b4 	movhi	r2,2
   22df4:	10973204 	addi	r2,r2,23752
   22df8:	1885883a 	add	r2,r3,r2
   22dfc:	00000106 	br	22e04 <close+0x40>
   22e00:	0005883a 	mov	r2,zero
   22e04:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22e08:	e0bffd17 	ldw	r2,-12(fp)
   22e0c:	10001926 	beq	r2,zero,22e74 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22e10:	e0bffd17 	ldw	r2,-12(fp)
   22e14:	10800017 	ldw	r2,0(r2)
   22e18:	10800417 	ldw	r2,16(r2)
   22e1c:	10000626 	beq	r2,zero,22e38 <close+0x74>
   22e20:	e0bffd17 	ldw	r2,-12(fp)
   22e24:	10800017 	ldw	r2,0(r2)
   22e28:	10800417 	ldw	r2,16(r2)
   22e2c:	e13ffd17 	ldw	r4,-12(fp)
   22e30:	103ee83a 	callr	r2
   22e34:	00000106 	br	22e3c <close+0x78>
   22e38:	0005883a 	mov	r2,zero
   22e3c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22e40:	e13fff17 	ldw	r4,-4(fp)
   22e44:	00234e80 	call	234e8 <alt_release_fd>
    if (rval < 0)
   22e48:	e0bffe17 	ldw	r2,-8(fp)
   22e4c:	1000070e 	bge	r2,zero,22e6c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   22e50:	0022d740 	call	22d74 <alt_get_errno>
   22e54:	1007883a 	mov	r3,r2
   22e58:	e0bffe17 	ldw	r2,-8(fp)
   22e5c:	0085c83a 	sub	r2,zero,r2
   22e60:	18800015 	stw	r2,0(r3)
      return -1;
   22e64:	00bfffc4 	movi	r2,-1
   22e68:	00000706 	br	22e88 <close+0xc4>
    }
    return 0;
   22e6c:	0005883a 	mov	r2,zero
   22e70:	00000506 	br	22e88 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22e74:	0022d740 	call	22d74 <alt_get_errno>
   22e78:	1007883a 	mov	r3,r2
   22e7c:	00801444 	movi	r2,81
   22e80:	18800015 	stw	r2,0(r3)
    return -1;
   22e84:	00bfffc4 	movi	r2,-1
  }
}
   22e88:	e037883a 	mov	sp,fp
   22e8c:	dfc00117 	ldw	ra,4(sp)
   22e90:	df000017 	ldw	fp,0(sp)
   22e94:	dec00204 	addi	sp,sp,8
   22e98:	f800283a 	ret

00022e9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22e9c:	defffc04 	addi	sp,sp,-16
   22ea0:	df000315 	stw	fp,12(sp)
   22ea4:	df000304 	addi	fp,sp,12
   22ea8:	e13ffd15 	stw	r4,-12(fp)
   22eac:	e17ffe15 	stw	r5,-8(fp)
   22eb0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   22eb4:	e0bfff17 	ldw	r2,-4(fp)
}
   22eb8:	e037883a 	mov	sp,fp
   22ebc:	df000017 	ldw	fp,0(sp)
   22ec0:	dec00104 	addi	sp,sp,4
   22ec4:	f800283a 	ret

00022ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22ec8:	defffe04 	addi	sp,sp,-8
   22ecc:	dfc00115 	stw	ra,4(sp)
   22ed0:	df000015 	stw	fp,0(sp)
   22ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ed8:	008000b4 	movhi	r2,2
   22edc:	109bb304 	addi	r2,r2,28364
   22ee0:	10800017 	ldw	r2,0(r2)
   22ee4:	10000526 	beq	r2,zero,22efc <alt_get_errno+0x34>
   22ee8:	008000b4 	movhi	r2,2
   22eec:	109bb304 	addi	r2,r2,28364
   22ef0:	10800017 	ldw	r2,0(r2)
   22ef4:	103ee83a 	callr	r2
   22ef8:	00000206 	br	22f04 <alt_get_errno+0x3c>
   22efc:	008000f4 	movhi	r2,3
   22f00:	10a25604 	addi	r2,r2,-30376
}
   22f04:	e037883a 	mov	sp,fp
   22f08:	dfc00117 	ldw	ra,4(sp)
   22f0c:	df000017 	ldw	fp,0(sp)
   22f10:	dec00204 	addi	sp,sp,8
   22f14:	f800283a 	ret

00022f18 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   22f18:	defffb04 	addi	sp,sp,-20
   22f1c:	dfc00415 	stw	ra,16(sp)
   22f20:	df000315 	stw	fp,12(sp)
   22f24:	df000304 	addi	fp,sp,12
   22f28:	e13ffe15 	stw	r4,-8(fp)
   22f2c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22f30:	e0bffe17 	ldw	r2,-8(fp)
   22f34:	10000816 	blt	r2,zero,22f58 <fstat+0x40>
   22f38:	e13ffe17 	ldw	r4,-8(fp)
   22f3c:	01400304 	movi	r5,12
   22f40:	0022d4c0 	call	22d4c <__mulsi3>
   22f44:	1007883a 	mov	r3,r2
   22f48:	008000b4 	movhi	r2,2
   22f4c:	10973204 	addi	r2,r2,23752
   22f50:	1885883a 	add	r2,r3,r2
   22f54:	00000106 	br	22f5c <fstat+0x44>
   22f58:	0005883a 	mov	r2,zero
   22f5c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   22f60:	e0bffd17 	ldw	r2,-12(fp)
   22f64:	10001026 	beq	r2,zero,22fa8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   22f68:	e0bffd17 	ldw	r2,-12(fp)
   22f6c:	10800017 	ldw	r2,0(r2)
   22f70:	10800817 	ldw	r2,32(r2)
   22f74:	10000726 	beq	r2,zero,22f94 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   22f78:	e0bffd17 	ldw	r2,-12(fp)
   22f7c:	10800017 	ldw	r2,0(r2)
   22f80:	10800817 	ldw	r2,32(r2)
   22f84:	e13ffd17 	ldw	r4,-12(fp)
   22f88:	e17fff17 	ldw	r5,-4(fp)
   22f8c:	103ee83a 	callr	r2
   22f90:	00000a06 	br	22fbc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   22f94:	e0bfff17 	ldw	r2,-4(fp)
   22f98:	00c80004 	movi	r3,8192
   22f9c:	10c00115 	stw	r3,4(r2)
      return 0;
   22fa0:	0005883a 	mov	r2,zero
   22fa4:	00000506 	br	22fbc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22fa8:	0022ec80 	call	22ec8 <alt_get_errno>
   22fac:	1007883a 	mov	r3,r2
   22fb0:	00801444 	movi	r2,81
   22fb4:	18800015 	stw	r2,0(r3)
    return -1;
   22fb8:	00bfffc4 	movi	r2,-1
  }
}
   22fbc:	e037883a 	mov	sp,fp
   22fc0:	dfc00117 	ldw	ra,4(sp)
   22fc4:	df000017 	ldw	fp,0(sp)
   22fc8:	dec00204 	addi	sp,sp,8
   22fcc:	f800283a 	ret

00022fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22fd0:	defffe04 	addi	sp,sp,-8
   22fd4:	dfc00115 	stw	ra,4(sp)
   22fd8:	df000015 	stw	fp,0(sp)
   22fdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22fe0:	008000b4 	movhi	r2,2
   22fe4:	109bb304 	addi	r2,r2,28364
   22fe8:	10800017 	ldw	r2,0(r2)
   22fec:	10000526 	beq	r2,zero,23004 <alt_get_errno+0x34>
   22ff0:	008000b4 	movhi	r2,2
   22ff4:	109bb304 	addi	r2,r2,28364
   22ff8:	10800017 	ldw	r2,0(r2)
   22ffc:	103ee83a 	callr	r2
   23000:	00000206 	br	2300c <alt_get_errno+0x3c>
   23004:	008000f4 	movhi	r2,3
   23008:	10a25604 	addi	r2,r2,-30376
}
   2300c:	e037883a 	mov	sp,fp
   23010:	dfc00117 	ldw	ra,4(sp)
   23014:	df000017 	ldw	fp,0(sp)
   23018:	dec00204 	addi	sp,sp,8
   2301c:	f800283a 	ret

00023020 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23020:	deffed04 	addi	sp,sp,-76
   23024:	dfc01215 	stw	ra,72(sp)
   23028:	df001115 	stw	fp,68(sp)
   2302c:	df001104 	addi	fp,sp,68
   23030:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23034:	e0bfff17 	ldw	r2,-4(fp)
   23038:	10000816 	blt	r2,zero,2305c <isatty+0x3c>
   2303c:	e13fff17 	ldw	r4,-4(fp)
   23040:	01400304 	movi	r5,12
   23044:	0022d4c0 	call	22d4c <__mulsi3>
   23048:	1007883a 	mov	r3,r2
   2304c:	008000b4 	movhi	r2,2
   23050:	10973204 	addi	r2,r2,23752
   23054:	1885883a 	add	r2,r3,r2
   23058:	00000106 	br	23060 <isatty+0x40>
   2305c:	0005883a 	mov	r2,zero
   23060:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23064:	e0bfef17 	ldw	r2,-68(fp)
   23068:	10000e26 	beq	r2,zero,230a4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2306c:	e0bfef17 	ldw	r2,-68(fp)
   23070:	10800017 	ldw	r2,0(r2)
   23074:	10800817 	ldw	r2,32(r2)
   23078:	1000021e 	bne	r2,zero,23084 <isatty+0x64>
    {
      return 1;
   2307c:	00800044 	movi	r2,1
   23080:	00000d06 	br	230b8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23084:	e0bff004 	addi	r2,fp,-64
   23088:	e13fff17 	ldw	r4,-4(fp)
   2308c:	100b883a 	mov	r5,r2
   23090:	0022f180 	call	22f18 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23094:	e0bff117 	ldw	r2,-60(fp)
   23098:	10880020 	cmpeqi	r2,r2,8192
   2309c:	10803fcc 	andi	r2,r2,255
   230a0:	00000506 	br	230b8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   230a4:	0022fd00 	call	22fd0 <alt_get_errno>
   230a8:	1007883a 	mov	r3,r2
   230ac:	00801444 	movi	r2,81
   230b0:	18800015 	stw	r2,0(r3)
    return 0;
   230b4:	0005883a 	mov	r2,zero
  }
}
   230b8:	e037883a 	mov	sp,fp
   230bc:	dfc00117 	ldw	ra,4(sp)
   230c0:	df000017 	ldw	fp,0(sp)
   230c4:	dec00204 	addi	sp,sp,8
   230c8:	f800283a 	ret

000230cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   230cc:	defffc04 	addi	sp,sp,-16
   230d0:	df000315 	stw	fp,12(sp)
   230d4:	df000304 	addi	fp,sp,12
   230d8:	e13ffd15 	stw	r4,-12(fp)
   230dc:	e17ffe15 	stw	r5,-8(fp)
   230e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   230e4:	e0fffe17 	ldw	r3,-8(fp)
   230e8:	e0bffd17 	ldw	r2,-12(fp)
   230ec:	18800c26 	beq	r3,r2,23120 <alt_load_section+0x54>
  {
    while( to != end )
   230f0:	00000806 	br	23114 <alt_load_section+0x48>
    {
      *to++ = *from++;
   230f4:	e0bffe17 	ldw	r2,-8(fp)
   230f8:	10c00104 	addi	r3,r2,4
   230fc:	e0fffe15 	stw	r3,-8(fp)
   23100:	e0fffd17 	ldw	r3,-12(fp)
   23104:	19000104 	addi	r4,r3,4
   23108:	e13ffd15 	stw	r4,-12(fp)
   2310c:	18c00017 	ldw	r3,0(r3)
   23110:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23114:	e0fffe17 	ldw	r3,-8(fp)
   23118:	e0bfff17 	ldw	r2,-4(fp)
   2311c:	18bff51e 	bne	r3,r2,230f4 <__alt_data_end+0xfffea0f4>
    {
      *to++ = *from++;
    }
  }
}
   23120:	e037883a 	mov	sp,fp
   23124:	df000017 	ldw	fp,0(sp)
   23128:	dec00104 	addi	sp,sp,4
   2312c:	f800283a 	ret

00023130 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23130:	defffe04 	addi	sp,sp,-8
   23134:	dfc00115 	stw	ra,4(sp)
   23138:	df000015 	stw	fp,0(sp)
   2313c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23140:	010000b4 	movhi	r4,2
   23144:	211bb804 	addi	r4,r4,28384
   23148:	014000b4 	movhi	r5,2
   2314c:	29551d04 	addi	r5,r5,21620
   23150:	018000b4 	movhi	r6,2
   23154:	319bb804 	addi	r6,r6,28384
   23158:	00230cc0 	call	230cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2315c:	010000b4 	movhi	r4,2
   23160:	21000804 	addi	r4,r4,32
   23164:	014000b4 	movhi	r5,2
   23168:	29400804 	addi	r5,r5,32
   2316c:	018000b4 	movhi	r6,2
   23170:	31806f04 	addi	r6,r6,444
   23174:	00230cc0 	call	230cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23178:	010000b4 	movhi	r4,2
   2317c:	21150b04 	addi	r4,r4,21548
   23180:	014000b4 	movhi	r5,2
   23184:	29550b04 	addi	r5,r5,21548
   23188:	018000b4 	movhi	r6,2
   2318c:	31951d04 	addi	r6,r6,21620
   23190:	00230cc0 	call	230cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23194:	00243a40 	call	243a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23198:	002456c0 	call	2456c <alt_icache_flush_all>
}
   2319c:	e037883a 	mov	sp,fp
   231a0:	dfc00117 	ldw	ra,4(sp)
   231a4:	df000017 	ldw	fp,0(sp)
   231a8:	dec00204 	addi	sp,sp,8
   231ac:	f800283a 	ret

000231b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   231b0:	defffe04 	addi	sp,sp,-8
   231b4:	dfc00115 	stw	ra,4(sp)
   231b8:	df000015 	stw	fp,0(sp)
   231bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   231c0:	008000b4 	movhi	r2,2
   231c4:	109bb304 	addi	r2,r2,28364
   231c8:	10800017 	ldw	r2,0(r2)
   231cc:	10000526 	beq	r2,zero,231e4 <alt_get_errno+0x34>
   231d0:	008000b4 	movhi	r2,2
   231d4:	109bb304 	addi	r2,r2,28364
   231d8:	10800017 	ldw	r2,0(r2)
   231dc:	103ee83a 	callr	r2
   231e0:	00000206 	br	231ec <alt_get_errno+0x3c>
   231e4:	008000f4 	movhi	r2,3
   231e8:	10a25604 	addi	r2,r2,-30376
}
   231ec:	e037883a 	mov	sp,fp
   231f0:	dfc00117 	ldw	ra,4(sp)
   231f4:	df000017 	ldw	fp,0(sp)
   231f8:	dec00204 	addi	sp,sp,8
   231fc:	f800283a 	ret

00023200 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23200:	defff904 	addi	sp,sp,-28
   23204:	dfc00615 	stw	ra,24(sp)
   23208:	df000515 	stw	fp,20(sp)
   2320c:	df000504 	addi	fp,sp,20
   23210:	e13ffd15 	stw	r4,-12(fp)
   23214:	e17ffe15 	stw	r5,-8(fp)
   23218:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2321c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23220:	e0bffd17 	ldw	r2,-12(fp)
   23224:	10000816 	blt	r2,zero,23248 <lseek+0x48>
   23228:	e13ffd17 	ldw	r4,-12(fp)
   2322c:	01400304 	movi	r5,12
   23230:	0022d4c0 	call	22d4c <__mulsi3>
   23234:	1007883a 	mov	r3,r2
   23238:	008000b4 	movhi	r2,2
   2323c:	10973204 	addi	r2,r2,23752
   23240:	1885883a 	add	r2,r3,r2
   23244:	00000106 	br	2324c <lseek+0x4c>
   23248:	0005883a 	mov	r2,zero
   2324c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23250:	e0bffc17 	ldw	r2,-16(fp)
   23254:	10001026 	beq	r2,zero,23298 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23258:	e0bffc17 	ldw	r2,-16(fp)
   2325c:	10800017 	ldw	r2,0(r2)
   23260:	10800717 	ldw	r2,28(r2)
   23264:	10000926 	beq	r2,zero,2328c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23268:	e0bffc17 	ldw	r2,-16(fp)
   2326c:	10800017 	ldw	r2,0(r2)
   23270:	10800717 	ldw	r2,28(r2)
   23274:	e13ffc17 	ldw	r4,-16(fp)
   23278:	e17ffe17 	ldw	r5,-8(fp)
   2327c:	e1bfff17 	ldw	r6,-4(fp)
   23280:	103ee83a 	callr	r2
   23284:	e0bffb15 	stw	r2,-20(fp)
   23288:	00000506 	br	232a0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2328c:	00bfde84 	movi	r2,-134
   23290:	e0bffb15 	stw	r2,-20(fp)
   23294:	00000206 	br	232a0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23298:	00bfebc4 	movi	r2,-81
   2329c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   232a0:	e0bffb17 	ldw	r2,-20(fp)
   232a4:	1000070e 	bge	r2,zero,232c4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   232a8:	00231b00 	call	231b0 <alt_get_errno>
   232ac:	1007883a 	mov	r3,r2
   232b0:	e0bffb17 	ldw	r2,-20(fp)
   232b4:	0085c83a 	sub	r2,zero,r2
   232b8:	18800015 	stw	r2,0(r3)
    rc = -1;
   232bc:	00bfffc4 	movi	r2,-1
   232c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   232c4:	e0bffb17 	ldw	r2,-20(fp)
}
   232c8:	e037883a 	mov	sp,fp
   232cc:	dfc00117 	ldw	ra,4(sp)
   232d0:	df000017 	ldw	fp,0(sp)
   232d4:	dec00204 	addi	sp,sp,8
   232d8:	f800283a 	ret

000232dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   232dc:	defffd04 	addi	sp,sp,-12
   232e0:	dfc00215 	stw	ra,8(sp)
   232e4:	df000115 	stw	fp,4(sp)
   232e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   232ec:	0009883a 	mov	r4,zero
   232f0:	00237a00 	call	237a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   232f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   232f8:	00237d40 	call	237d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   232fc:	010000b4 	movhi	r4,2
   23300:	21151504 	addi	r4,r4,21588
   23304:	014000b4 	movhi	r5,2
   23308:	29551504 	addi	r5,r5,21588
   2330c:	018000b4 	movhi	r6,2
   23310:	31951504 	addi	r6,r6,21588
   23314:	00249380 	call	24938 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23318:	00244b40 	call	244b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2331c:	010000b4 	movhi	r4,2
   23320:	21114404 	addi	r4,r4,17680
   23324:	00250880 	call	25088 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23328:	d126ad17 	ldw	r4,-25932(gp)
   2332c:	d0e6ae17 	ldw	r3,-25928(gp)
   23330:	d0a6af17 	ldw	r2,-25924(gp)
   23334:	180b883a 	mov	r5,r3
   23338:	100d883a 	mov	r6,r2
   2333c:	00201f80 	call	201f8 <main>
   23340:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23344:	01000044 	movi	r4,1
   23348:	0022dc40 	call	22dc4 <close>
  exit (result);
   2334c:	e13fff17 	ldw	r4,-4(fp)
   23350:	002509c0 	call	2509c <exit>

00023354 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23354:	defffe04 	addi	sp,sp,-8
   23358:	df000115 	stw	fp,4(sp)
   2335c:	df000104 	addi	fp,sp,4
   23360:	e13fff15 	stw	r4,-4(fp)
}
   23364:	e037883a 	mov	sp,fp
   23368:	df000017 	ldw	fp,0(sp)
   2336c:	dec00104 	addi	sp,sp,4
   23370:	f800283a 	ret

00023374 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23374:	defffe04 	addi	sp,sp,-8
   23378:	df000115 	stw	fp,4(sp)
   2337c:	df000104 	addi	fp,sp,4
   23380:	e13fff15 	stw	r4,-4(fp)
}
   23384:	e037883a 	mov	sp,fp
   23388:	df000017 	ldw	fp,0(sp)
   2338c:	dec00104 	addi	sp,sp,4
   23390:	f800283a 	ret

00023394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23394:	defffe04 	addi	sp,sp,-8
   23398:	dfc00115 	stw	ra,4(sp)
   2339c:	df000015 	stw	fp,0(sp)
   233a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   233a4:	008000b4 	movhi	r2,2
   233a8:	109bb304 	addi	r2,r2,28364
   233ac:	10800017 	ldw	r2,0(r2)
   233b0:	10000526 	beq	r2,zero,233c8 <alt_get_errno+0x34>
   233b4:	008000b4 	movhi	r2,2
   233b8:	109bb304 	addi	r2,r2,28364
   233bc:	10800017 	ldw	r2,0(r2)
   233c0:	103ee83a 	callr	r2
   233c4:	00000206 	br	233d0 <alt_get_errno+0x3c>
   233c8:	008000f4 	movhi	r2,3
   233cc:	10a25604 	addi	r2,r2,-30376
}
   233d0:	e037883a 	mov	sp,fp
   233d4:	dfc00117 	ldw	ra,4(sp)
   233d8:	df000017 	ldw	fp,0(sp)
   233dc:	dec00204 	addi	sp,sp,8
   233e0:	f800283a 	ret

000233e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   233e4:	defff904 	addi	sp,sp,-28
   233e8:	dfc00615 	stw	ra,24(sp)
   233ec:	df000515 	stw	fp,20(sp)
   233f0:	df000504 	addi	fp,sp,20
   233f4:	e13ffd15 	stw	r4,-12(fp)
   233f8:	e17ffe15 	stw	r5,-8(fp)
   233fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23400:	e0bffd17 	ldw	r2,-12(fp)
   23404:	10000816 	blt	r2,zero,23428 <read+0x44>
   23408:	e13ffd17 	ldw	r4,-12(fp)
   2340c:	01400304 	movi	r5,12
   23410:	0022d4c0 	call	22d4c <__mulsi3>
   23414:	1007883a 	mov	r3,r2
   23418:	008000b4 	movhi	r2,2
   2341c:	10973204 	addi	r2,r2,23752
   23420:	1885883a 	add	r2,r3,r2
   23424:	00000106 	br	2342c <read+0x48>
   23428:	0005883a 	mov	r2,zero
   2342c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23430:	e0bffb17 	ldw	r2,-20(fp)
   23434:	10002226 	beq	r2,zero,234c0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23438:	e0bffb17 	ldw	r2,-20(fp)
   2343c:	10800217 	ldw	r2,8(r2)
   23440:	108000cc 	andi	r2,r2,3
   23444:	10800060 	cmpeqi	r2,r2,1
   23448:	1000181e 	bne	r2,zero,234ac <read+0xc8>
        (fd->dev->read))
   2344c:	e0bffb17 	ldw	r2,-20(fp)
   23450:	10800017 	ldw	r2,0(r2)
   23454:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23458:	10001426 	beq	r2,zero,234ac <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2345c:	e0bffb17 	ldw	r2,-20(fp)
   23460:	10800017 	ldw	r2,0(r2)
   23464:	10800517 	ldw	r2,20(r2)
   23468:	e0ffff17 	ldw	r3,-4(fp)
   2346c:	e13ffb17 	ldw	r4,-20(fp)
   23470:	e17ffe17 	ldw	r5,-8(fp)
   23474:	180d883a 	mov	r6,r3
   23478:	103ee83a 	callr	r2
   2347c:	e0bffc15 	stw	r2,-16(fp)
   23480:	e0bffc17 	ldw	r2,-16(fp)
   23484:	1000070e 	bge	r2,zero,234a4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23488:	00233940 	call	23394 <alt_get_errno>
   2348c:	1007883a 	mov	r3,r2
   23490:	e0bffc17 	ldw	r2,-16(fp)
   23494:	0085c83a 	sub	r2,zero,r2
   23498:	18800015 	stw	r2,0(r3)
          return -1;
   2349c:	00bfffc4 	movi	r2,-1
   234a0:	00000c06 	br	234d4 <read+0xf0>
        }
        return rval;
   234a4:	e0bffc17 	ldw	r2,-16(fp)
   234a8:	00000a06 	br	234d4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   234ac:	00233940 	call	23394 <alt_get_errno>
   234b0:	1007883a 	mov	r3,r2
   234b4:	00800344 	movi	r2,13
   234b8:	18800015 	stw	r2,0(r3)
   234bc:	00000406 	br	234d0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   234c0:	00233940 	call	23394 <alt_get_errno>
   234c4:	1007883a 	mov	r3,r2
   234c8:	00801444 	movi	r2,81
   234cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   234d0:	00bfffc4 	movi	r2,-1
}
   234d4:	e037883a 	mov	sp,fp
   234d8:	dfc00117 	ldw	ra,4(sp)
   234dc:	df000017 	ldw	fp,0(sp)
   234e0:	dec00204 	addi	sp,sp,8
   234e4:	f800283a 	ret

000234e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   234e8:	defffc04 	addi	sp,sp,-16
   234ec:	dfc00315 	stw	ra,12(sp)
   234f0:	df000215 	stw	fp,8(sp)
   234f4:	dc000115 	stw	r16,4(sp)
   234f8:	df000204 	addi	fp,sp,8
   234fc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23500:	e0bffe17 	ldw	r2,-8(fp)
   23504:	108000d0 	cmplti	r2,r2,3
   23508:	1000111e 	bne	r2,zero,23550 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2350c:	040000b4 	movhi	r16,2
   23510:	84173204 	addi	r16,r16,23752
   23514:	e0bffe17 	ldw	r2,-8(fp)
   23518:	1009883a 	mov	r4,r2
   2351c:	01400304 	movi	r5,12
   23520:	0022d4c0 	call	22d4c <__mulsi3>
   23524:	8085883a 	add	r2,r16,r2
   23528:	10800204 	addi	r2,r2,8
   2352c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23530:	040000b4 	movhi	r16,2
   23534:	84173204 	addi	r16,r16,23752
   23538:	e0bffe17 	ldw	r2,-8(fp)
   2353c:	1009883a 	mov	r4,r2
   23540:	01400304 	movi	r5,12
   23544:	0022d4c0 	call	22d4c <__mulsi3>
   23548:	8085883a 	add	r2,r16,r2
   2354c:	10000015 	stw	zero,0(r2)
  }
}
   23550:	e6ffff04 	addi	sp,fp,-4
   23554:	dfc00217 	ldw	ra,8(sp)
   23558:	df000117 	ldw	fp,4(sp)
   2355c:	dc000017 	ldw	r16,0(sp)
   23560:	dec00304 	addi	sp,sp,12
   23564:	f800283a 	ret

00023568 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23568:	defff904 	addi	sp,sp,-28
   2356c:	df000615 	stw	fp,24(sp)
   23570:	df000604 	addi	fp,sp,24
   23574:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23578:	0005303a 	rdctl	r2,status
   2357c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23580:	e0fffc17 	ldw	r3,-16(fp)
   23584:	00bfff84 	movi	r2,-2
   23588:	1884703a 	and	r2,r3,r2
   2358c:	1001703a 	wrctl	status,r2
  
  return context;
   23590:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23594:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23598:	d0a00a17 	ldw	r2,-32728(gp)
   2359c:	10c000c4 	addi	r3,r2,3
   235a0:	00bfff04 	movi	r2,-4
   235a4:	1884703a 	and	r2,r3,r2
   235a8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   235ac:	d0e00a17 	ldw	r3,-32728(gp)
   235b0:	e0bfff17 	ldw	r2,-4(fp)
   235b4:	1887883a 	add	r3,r3,r2
   235b8:	00800134 	movhi	r2,4
   235bc:	10a40004 	addi	r2,r2,-28672
   235c0:	10c0062e 	bgeu	r2,r3,235dc <sbrk+0x74>
   235c4:	e0bffa17 	ldw	r2,-24(fp)
   235c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   235cc:	e0bffd17 	ldw	r2,-12(fp)
   235d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   235d4:	00bfffc4 	movi	r2,-1
   235d8:	00000b06 	br	23608 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   235dc:	d0a00a17 	ldw	r2,-32728(gp)
   235e0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   235e4:	d0e00a17 	ldw	r3,-32728(gp)
   235e8:	e0bfff17 	ldw	r2,-4(fp)
   235ec:	1885883a 	add	r2,r3,r2
   235f0:	d0a00a15 	stw	r2,-32728(gp)
   235f4:	e0bffa17 	ldw	r2,-24(fp)
   235f8:	e0bffe15 	stw	r2,-8(fp)
   235fc:	e0bffe17 	ldw	r2,-8(fp)
   23600:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23604:	e0bffb17 	ldw	r2,-20(fp)
} 
   23608:	e037883a 	mov	sp,fp
   2360c:	df000017 	ldw	fp,0(sp)
   23610:	dec00104 	addi	sp,sp,4
   23614:	f800283a 	ret

00023618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23618:	defffe04 	addi	sp,sp,-8
   2361c:	dfc00115 	stw	ra,4(sp)
   23620:	df000015 	stw	fp,0(sp)
   23624:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23628:	008000b4 	movhi	r2,2
   2362c:	109bb304 	addi	r2,r2,28364
   23630:	10800017 	ldw	r2,0(r2)
   23634:	10000526 	beq	r2,zero,2364c <alt_get_errno+0x34>
   23638:	008000b4 	movhi	r2,2
   2363c:	109bb304 	addi	r2,r2,28364
   23640:	10800017 	ldw	r2,0(r2)
   23644:	103ee83a 	callr	r2
   23648:	00000206 	br	23654 <alt_get_errno+0x3c>
   2364c:	008000f4 	movhi	r2,3
   23650:	10a25604 	addi	r2,r2,-30376
}
   23654:	e037883a 	mov	sp,fp
   23658:	dfc00117 	ldw	ra,4(sp)
   2365c:	df000017 	ldw	fp,0(sp)
   23660:	dec00204 	addi	sp,sp,8
   23664:	f800283a 	ret

00023668 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23668:	defff904 	addi	sp,sp,-28
   2366c:	dfc00615 	stw	ra,24(sp)
   23670:	df000515 	stw	fp,20(sp)
   23674:	df000504 	addi	fp,sp,20
   23678:	e13ffd15 	stw	r4,-12(fp)
   2367c:	e17ffe15 	stw	r5,-8(fp)
   23680:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23684:	e0bffd17 	ldw	r2,-12(fp)
   23688:	10000816 	blt	r2,zero,236ac <write+0x44>
   2368c:	e13ffd17 	ldw	r4,-12(fp)
   23690:	01400304 	movi	r5,12
   23694:	0022d4c0 	call	22d4c <__mulsi3>
   23698:	1007883a 	mov	r3,r2
   2369c:	008000b4 	movhi	r2,2
   236a0:	10973204 	addi	r2,r2,23752
   236a4:	1885883a 	add	r2,r3,r2
   236a8:	00000106 	br	236b0 <write+0x48>
   236ac:	0005883a 	mov	r2,zero
   236b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   236b4:	e0bffb17 	ldw	r2,-20(fp)
   236b8:	10002126 	beq	r2,zero,23740 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   236bc:	e0bffb17 	ldw	r2,-20(fp)
   236c0:	10800217 	ldw	r2,8(r2)
   236c4:	108000cc 	andi	r2,r2,3
   236c8:	10001826 	beq	r2,zero,2372c <write+0xc4>
   236cc:	e0bffb17 	ldw	r2,-20(fp)
   236d0:	10800017 	ldw	r2,0(r2)
   236d4:	10800617 	ldw	r2,24(r2)
   236d8:	10001426 	beq	r2,zero,2372c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   236dc:	e0bffb17 	ldw	r2,-20(fp)
   236e0:	10800017 	ldw	r2,0(r2)
   236e4:	10800617 	ldw	r2,24(r2)
   236e8:	e0ffff17 	ldw	r3,-4(fp)
   236ec:	e13ffb17 	ldw	r4,-20(fp)
   236f0:	e17ffe17 	ldw	r5,-8(fp)
   236f4:	180d883a 	mov	r6,r3
   236f8:	103ee83a 	callr	r2
   236fc:	e0bffc15 	stw	r2,-16(fp)
   23700:	e0bffc17 	ldw	r2,-16(fp)
   23704:	1000070e 	bge	r2,zero,23724 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23708:	00236180 	call	23618 <alt_get_errno>
   2370c:	1007883a 	mov	r3,r2
   23710:	e0bffc17 	ldw	r2,-16(fp)
   23714:	0085c83a 	sub	r2,zero,r2
   23718:	18800015 	stw	r2,0(r3)
        return -1;
   2371c:	00bfffc4 	movi	r2,-1
   23720:	00000c06 	br	23754 <write+0xec>
      }
      return rval;
   23724:	e0bffc17 	ldw	r2,-16(fp)
   23728:	00000a06 	br	23754 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2372c:	00236180 	call	23618 <alt_get_errno>
   23730:	1007883a 	mov	r3,r2
   23734:	00800344 	movi	r2,13
   23738:	18800015 	stw	r2,0(r3)
   2373c:	00000406 	br	23750 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23740:	00236180 	call	23618 <alt_get_errno>
   23744:	1007883a 	mov	r3,r2
   23748:	00801444 	movi	r2,81
   2374c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23750:	00bfffc4 	movi	r2,-1
}
   23754:	e037883a 	mov	sp,fp
   23758:	dfc00117 	ldw	ra,4(sp)
   2375c:	df000017 	ldw	fp,0(sp)
   23760:	dec00204 	addi	sp,sp,8
   23764:	f800283a 	ret

00023768 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23768:	defffd04 	addi	sp,sp,-12
   2376c:	dfc00215 	stw	ra,8(sp)
   23770:	df000115 	stw	fp,4(sp)
   23774:	df000104 	addi	fp,sp,4
   23778:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2377c:	e13fff17 	ldw	r4,-4(fp)
   23780:	014000b4 	movhi	r5,2
   23784:	295bb004 	addi	r5,r5,28352
   23788:	00244100 	call	24410 <alt_dev_llist_insert>
}
   2378c:	e037883a 	mov	sp,fp
   23790:	dfc00117 	ldw	ra,4(sp)
   23794:	df000017 	ldw	fp,0(sp)
   23798:	dec00204 	addi	sp,sp,8
   2379c:	f800283a 	ret

000237a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   237a0:	defffd04 	addi	sp,sp,-12
   237a4:	dfc00215 	stw	ra,8(sp)
   237a8:	df000115 	stw	fp,4(sp)
   237ac:	df000104 	addi	fp,sp,4
   237b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   237b4:	0024df00 	call	24df0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   237b8:	00800044 	movi	r2,1
   237bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   237c0:	e037883a 	mov	sp,fp
   237c4:	dfc00117 	ldw	ra,4(sp)
   237c8:	df000017 	ldw	fp,0(sp)
   237cc:	dec00204 	addi	sp,sp,8
   237d0:	f800283a 	ret

000237d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   237d4:	defffe04 	addi	sp,sp,-8
   237d8:	dfc00115 	stw	ra,4(sp)
   237dc:	df000015 	stw	fp,0(sp)
   237e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   237e4:	010000b4 	movhi	r4,2
   237e8:	21179c04 	addi	r4,r4,24176
   237ec:	000b883a 	mov	r5,zero
   237f0:	000d883a 	mov	r6,zero
   237f4:	002397c0 	call	2397c <altera_avalon_jtag_uart_init>
   237f8:	010000b4 	movhi	r4,2
   237fc:	21179204 	addi	r4,r4,24136
   23800:	00237680 	call	23768 <alt_dev_reg>
}
   23804:	e037883a 	mov	sp,fp
   23808:	dfc00117 	ldw	ra,4(sp)
   2380c:	df000017 	ldw	fp,0(sp)
   23810:	dec00204 	addi	sp,sp,8
   23814:	f800283a 	ret

00023818 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23818:	defffa04 	addi	sp,sp,-24
   2381c:	dfc00515 	stw	ra,20(sp)
   23820:	df000415 	stw	fp,16(sp)
   23824:	df000404 	addi	fp,sp,16
   23828:	e13ffd15 	stw	r4,-12(fp)
   2382c:	e17ffe15 	stw	r5,-8(fp)
   23830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23834:	e0bffd17 	ldw	r2,-12(fp)
   23838:	10800017 	ldw	r2,0(r2)
   2383c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23840:	e0bffc17 	ldw	r2,-16(fp)
   23844:	10c00a04 	addi	r3,r2,40
   23848:	e0bffd17 	ldw	r2,-12(fp)
   2384c:	10800217 	ldw	r2,8(r2)
   23850:	1809883a 	mov	r4,r3
   23854:	e17ffe17 	ldw	r5,-8(fp)
   23858:	e1bfff17 	ldw	r6,-4(fp)
   2385c:	100f883a 	mov	r7,r2
   23860:	0023e400 	call	23e40 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23864:	e037883a 	mov	sp,fp
   23868:	dfc00117 	ldw	ra,4(sp)
   2386c:	df000017 	ldw	fp,0(sp)
   23870:	dec00204 	addi	sp,sp,8
   23874:	f800283a 	ret

00023878 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23878:	defffa04 	addi	sp,sp,-24
   2387c:	dfc00515 	stw	ra,20(sp)
   23880:	df000415 	stw	fp,16(sp)
   23884:	df000404 	addi	fp,sp,16
   23888:	e13ffd15 	stw	r4,-12(fp)
   2388c:	e17ffe15 	stw	r5,-8(fp)
   23890:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23894:	e0bffd17 	ldw	r2,-12(fp)
   23898:	10800017 	ldw	r2,0(r2)
   2389c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   238a0:	e0bffc17 	ldw	r2,-16(fp)
   238a4:	10c00a04 	addi	r3,r2,40
   238a8:	e0bffd17 	ldw	r2,-12(fp)
   238ac:	10800217 	ldw	r2,8(r2)
   238b0:	1809883a 	mov	r4,r3
   238b4:	e17ffe17 	ldw	r5,-8(fp)
   238b8:	e1bfff17 	ldw	r6,-4(fp)
   238bc:	100f883a 	mov	r7,r2
   238c0:	002404c0 	call	2404c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   238c4:	e037883a 	mov	sp,fp
   238c8:	dfc00117 	ldw	ra,4(sp)
   238cc:	df000017 	ldw	fp,0(sp)
   238d0:	dec00204 	addi	sp,sp,8
   238d4:	f800283a 	ret

000238d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   238d8:	defffc04 	addi	sp,sp,-16
   238dc:	dfc00315 	stw	ra,12(sp)
   238e0:	df000215 	stw	fp,8(sp)
   238e4:	df000204 	addi	fp,sp,8
   238e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   238ec:	e0bfff17 	ldw	r2,-4(fp)
   238f0:	10800017 	ldw	r2,0(r2)
   238f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   238f8:	e0bffe17 	ldw	r2,-8(fp)
   238fc:	10c00a04 	addi	r3,r2,40
   23900:	e0bfff17 	ldw	r2,-4(fp)
   23904:	10800217 	ldw	r2,8(r2)
   23908:	1809883a 	mov	r4,r3
   2390c:	100b883a 	mov	r5,r2
   23910:	0023cec0 	call	23cec <altera_avalon_jtag_uart_close>
}
   23914:	e037883a 	mov	sp,fp
   23918:	dfc00117 	ldw	ra,4(sp)
   2391c:	df000017 	ldw	fp,0(sp)
   23920:	dec00204 	addi	sp,sp,8
   23924:	f800283a 	ret

00023928 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23928:	defffa04 	addi	sp,sp,-24
   2392c:	dfc00515 	stw	ra,20(sp)
   23930:	df000415 	stw	fp,16(sp)
   23934:	df000404 	addi	fp,sp,16
   23938:	e13ffd15 	stw	r4,-12(fp)
   2393c:	e17ffe15 	stw	r5,-8(fp)
   23940:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23944:	e0bffd17 	ldw	r2,-12(fp)
   23948:	10800017 	ldw	r2,0(r2)
   2394c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23950:	e0bffc17 	ldw	r2,-16(fp)
   23954:	10800a04 	addi	r2,r2,40
   23958:	1009883a 	mov	r4,r2
   2395c:	e17ffe17 	ldw	r5,-8(fp)
   23960:	e1bfff17 	ldw	r6,-4(fp)
   23964:	0023d540 	call	23d54 <altera_avalon_jtag_uart_ioctl>
}
   23968:	e037883a 	mov	sp,fp
   2396c:	dfc00117 	ldw	ra,4(sp)
   23970:	df000017 	ldw	fp,0(sp)
   23974:	dec00204 	addi	sp,sp,8
   23978:	f800283a 	ret

0002397c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2397c:	defffa04 	addi	sp,sp,-24
   23980:	dfc00515 	stw	ra,20(sp)
   23984:	df000415 	stw	fp,16(sp)
   23988:	df000404 	addi	fp,sp,16
   2398c:	e13ffd15 	stw	r4,-12(fp)
   23990:	e17ffe15 	stw	r5,-8(fp)
   23994:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23998:	e0bffd17 	ldw	r2,-12(fp)
   2399c:	00c00044 	movi	r3,1
   239a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   239a4:	e0bffd17 	ldw	r2,-12(fp)
   239a8:	10800017 	ldw	r2,0(r2)
   239ac:	10800104 	addi	r2,r2,4
   239b0:	1007883a 	mov	r3,r2
   239b4:	e0bffd17 	ldw	r2,-12(fp)
   239b8:	10800817 	ldw	r2,32(r2)
   239bc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   239c0:	e0fffe17 	ldw	r3,-8(fp)
   239c4:	e0bfff17 	ldw	r2,-4(fp)
   239c8:	d8000015 	stw	zero,0(sp)
   239cc:	1809883a 	mov	r4,r3
   239d0:	100b883a 	mov	r5,r2
   239d4:	018000b4 	movhi	r6,2
   239d8:	318e9004 	addi	r6,r6,14912
   239dc:	e1fffd17 	ldw	r7,-12(fp)
   239e0:	00245880 	call	24588 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   239e4:	e0bffd17 	ldw	r2,-12(fp)
   239e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   239ec:	e0bffd17 	ldw	r2,-12(fp)
   239f0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   239f4:	008000f4 	movhi	r2,3
   239f8:	10a25b04 	addi	r2,r2,-30356
   239fc:	10800017 	ldw	r2,0(r2)
   23a00:	1809883a 	mov	r4,r3
   23a04:	100b883a 	mov	r5,r2
   23a08:	018000b4 	movhi	r6,2
   23a0c:	318f1104 	addi	r6,r6,15428
   23a10:	e1fffd17 	ldw	r7,-12(fp)
   23a14:	00242640 	call	24264 <alt_alarm_start>
   23a18:	1000040e 	bge	r2,zero,23a2c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23a1c:	e0fffd17 	ldw	r3,-12(fp)
   23a20:	00a00034 	movhi	r2,32768
   23a24:	10bfffc4 	addi	r2,r2,-1
   23a28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23a2c:	e037883a 	mov	sp,fp
   23a30:	dfc00117 	ldw	ra,4(sp)
   23a34:	df000017 	ldw	fp,0(sp)
   23a38:	dec00204 	addi	sp,sp,8
   23a3c:	f800283a 	ret

00023a40 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23a40:	defff804 	addi	sp,sp,-32
   23a44:	df000715 	stw	fp,28(sp)
   23a48:	df000704 	addi	fp,sp,28
   23a4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23a50:	e0bfff17 	ldw	r2,-4(fp)
   23a54:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23a58:	e0bffb17 	ldw	r2,-20(fp)
   23a5c:	10800017 	ldw	r2,0(r2)
   23a60:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23a64:	e0bffc17 	ldw	r2,-16(fp)
   23a68:	10800104 	addi	r2,r2,4
   23a6c:	10800037 	ldwio	r2,0(r2)
   23a70:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23a74:	e0bffd17 	ldw	r2,-12(fp)
   23a78:	1080c00c 	andi	r2,r2,768
   23a7c:	1000011e 	bne	r2,zero,23a84 <altera_avalon_jtag_uart_irq+0x44>
      break;
   23a80:	00006c06 	br	23c34 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23a84:	e0bffd17 	ldw	r2,-12(fp)
   23a88:	1080400c 	andi	r2,r2,256
   23a8c:	10003426 	beq	r2,zero,23b60 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23a90:	00800074 	movhi	r2,1
   23a94:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23a98:	e0bffb17 	ldw	r2,-20(fp)
   23a9c:	10800a17 	ldw	r2,40(r2)
   23aa0:	10800044 	addi	r2,r2,1
   23aa4:	1081ffcc 	andi	r2,r2,2047
   23aa8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23aac:	e0bffb17 	ldw	r2,-20(fp)
   23ab0:	10c00b17 	ldw	r3,44(r2)
   23ab4:	e0bffe17 	ldw	r2,-8(fp)
   23ab8:	1880011e 	bne	r3,r2,23ac0 <altera_avalon_jtag_uart_irq+0x80>
          break;
   23abc:	00001606 	br	23b18 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23ac0:	e0bffc17 	ldw	r2,-16(fp)
   23ac4:	10800037 	ldwio	r2,0(r2)
   23ac8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23acc:	e0bff917 	ldw	r2,-28(fp)
   23ad0:	10a0000c 	andi	r2,r2,32768
   23ad4:	1000011e 	bne	r2,zero,23adc <altera_avalon_jtag_uart_irq+0x9c>
          break;
   23ad8:	00000f06 	br	23b18 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23adc:	e0bffb17 	ldw	r2,-20(fp)
   23ae0:	10800a17 	ldw	r2,40(r2)
   23ae4:	e0fff917 	ldw	r3,-28(fp)
   23ae8:	1809883a 	mov	r4,r3
   23aec:	e0fffb17 	ldw	r3,-20(fp)
   23af0:	1885883a 	add	r2,r3,r2
   23af4:	10800e04 	addi	r2,r2,56
   23af8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23afc:	e0bffb17 	ldw	r2,-20(fp)
   23b00:	10800a17 	ldw	r2,40(r2)
   23b04:	10800044 	addi	r2,r2,1
   23b08:	10c1ffcc 	andi	r3,r2,2047
   23b0c:	e0bffb17 	ldw	r2,-20(fp)
   23b10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23b14:	003fe006 	br	23a98 <__alt_data_end+0xfffeaa98>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23b18:	e0bff917 	ldw	r2,-28(fp)
   23b1c:	10bfffec 	andhi	r2,r2,65535
   23b20:	10000f26 	beq	r2,zero,23b60 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23b24:	e0bffb17 	ldw	r2,-20(fp)
   23b28:	10c00817 	ldw	r3,32(r2)
   23b2c:	00bfff84 	movi	r2,-2
   23b30:	1886703a 	and	r3,r3,r2
   23b34:	e0bffb17 	ldw	r2,-20(fp)
   23b38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23b3c:	e0bffc17 	ldw	r2,-16(fp)
   23b40:	10800104 	addi	r2,r2,4
   23b44:	1007883a 	mov	r3,r2
   23b48:	e0bffb17 	ldw	r2,-20(fp)
   23b4c:	10800817 	ldw	r2,32(r2)
   23b50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23b54:	e0bffc17 	ldw	r2,-16(fp)
   23b58:	10800104 	addi	r2,r2,4
   23b5c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23b60:	e0bffd17 	ldw	r2,-12(fp)
   23b64:	1080800c 	andi	r2,r2,512
   23b68:	10003126 	beq	r2,zero,23c30 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23b6c:	e0bffd17 	ldw	r2,-12(fp)
   23b70:	1004d43a 	srli	r2,r2,16
   23b74:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23b78:	00001406 	br	23bcc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23b7c:	e0bffc17 	ldw	r2,-16(fp)
   23b80:	e0fffb17 	ldw	r3,-20(fp)
   23b84:	18c00d17 	ldw	r3,52(r3)
   23b88:	e13ffb17 	ldw	r4,-20(fp)
   23b8c:	20c7883a 	add	r3,r4,r3
   23b90:	18c20e04 	addi	r3,r3,2104
   23b94:	18c00003 	ldbu	r3,0(r3)
   23b98:	18c03fcc 	andi	r3,r3,255
   23b9c:	18c0201c 	xori	r3,r3,128
   23ba0:	18ffe004 	addi	r3,r3,-128
   23ba4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23ba8:	e0bffb17 	ldw	r2,-20(fp)
   23bac:	10800d17 	ldw	r2,52(r2)
   23bb0:	10800044 	addi	r2,r2,1
   23bb4:	10c1ffcc 	andi	r3,r2,2047
   23bb8:	e0bffb17 	ldw	r2,-20(fp)
   23bbc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23bc0:	e0bffa17 	ldw	r2,-24(fp)
   23bc4:	10bfffc4 	addi	r2,r2,-1
   23bc8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23bcc:	e0bffa17 	ldw	r2,-24(fp)
   23bd0:	10000526 	beq	r2,zero,23be8 <altera_avalon_jtag_uart_irq+0x1a8>
   23bd4:	e0bffb17 	ldw	r2,-20(fp)
   23bd8:	10c00d17 	ldw	r3,52(r2)
   23bdc:	e0bffb17 	ldw	r2,-20(fp)
   23be0:	10800c17 	ldw	r2,48(r2)
   23be4:	18bfe51e 	bne	r3,r2,23b7c <__alt_data_end+0xfffeab7c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23be8:	e0bffa17 	ldw	r2,-24(fp)
   23bec:	10001026 	beq	r2,zero,23c30 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23bf0:	e0bffb17 	ldw	r2,-20(fp)
   23bf4:	10c00817 	ldw	r3,32(r2)
   23bf8:	00bfff44 	movi	r2,-3
   23bfc:	1886703a 	and	r3,r3,r2
   23c00:	e0bffb17 	ldw	r2,-20(fp)
   23c04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23c08:	e0bffb17 	ldw	r2,-20(fp)
   23c0c:	10800017 	ldw	r2,0(r2)
   23c10:	10800104 	addi	r2,r2,4
   23c14:	1007883a 	mov	r3,r2
   23c18:	e0bffb17 	ldw	r2,-20(fp)
   23c1c:	10800817 	ldw	r2,32(r2)
   23c20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23c24:	e0bffc17 	ldw	r2,-16(fp)
   23c28:	10800104 	addi	r2,r2,4
   23c2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23c30:	003f8c06 	br	23a64 <__alt_data_end+0xfffeaa64>
}
   23c34:	e037883a 	mov	sp,fp
   23c38:	df000017 	ldw	fp,0(sp)
   23c3c:	dec00104 	addi	sp,sp,4
   23c40:	f800283a 	ret

00023c44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23c44:	defff804 	addi	sp,sp,-32
   23c48:	df000715 	stw	fp,28(sp)
   23c4c:	df000704 	addi	fp,sp,28
   23c50:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23c54:	e0bffb17 	ldw	r2,-20(fp)
   23c58:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23c5c:	e0bff917 	ldw	r2,-28(fp)
   23c60:	10800017 	ldw	r2,0(r2)
   23c64:	10800104 	addi	r2,r2,4
   23c68:	10800037 	ldwio	r2,0(r2)
   23c6c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23c70:	e0bffa17 	ldw	r2,-24(fp)
   23c74:	1081000c 	andi	r2,r2,1024
   23c78:	10000b26 	beq	r2,zero,23ca8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23c7c:	e0bff917 	ldw	r2,-28(fp)
   23c80:	10800017 	ldw	r2,0(r2)
   23c84:	10800104 	addi	r2,r2,4
   23c88:	1007883a 	mov	r3,r2
   23c8c:	e0bff917 	ldw	r2,-28(fp)
   23c90:	10800817 	ldw	r2,32(r2)
   23c94:	10810014 	ori	r2,r2,1024
   23c98:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23c9c:	e0bff917 	ldw	r2,-28(fp)
   23ca0:	10000915 	stw	zero,36(r2)
   23ca4:	00000a06 	br	23cd0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23ca8:	e0bff917 	ldw	r2,-28(fp)
   23cac:	10c00917 	ldw	r3,36(r2)
   23cb0:	00a00034 	movhi	r2,32768
   23cb4:	10bfff04 	addi	r2,r2,-4
   23cb8:	10c00536 	bltu	r2,r3,23cd0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   23cbc:	e0bff917 	ldw	r2,-28(fp)
   23cc0:	10800917 	ldw	r2,36(r2)
   23cc4:	10c00044 	addi	r3,r2,1
   23cc8:	e0bff917 	ldw	r2,-28(fp)
   23ccc:	10c00915 	stw	r3,36(r2)
   23cd0:	008000f4 	movhi	r2,3
   23cd4:	10a25b04 	addi	r2,r2,-30356
   23cd8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23cdc:	e037883a 	mov	sp,fp
   23ce0:	df000017 	ldw	fp,0(sp)
   23ce4:	dec00104 	addi	sp,sp,4
   23ce8:	f800283a 	ret

00023cec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23cec:	defffd04 	addi	sp,sp,-12
   23cf0:	df000215 	stw	fp,8(sp)
   23cf4:	df000204 	addi	fp,sp,8
   23cf8:	e13ffe15 	stw	r4,-8(fp)
   23cfc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23d00:	00000506 	br	23d18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23d04:	e0bfff17 	ldw	r2,-4(fp)
   23d08:	1090000c 	andi	r2,r2,16384
   23d0c:	10000226 	beq	r2,zero,23d18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23d10:	00bffd44 	movi	r2,-11
   23d14:	00000b06 	br	23d44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23d18:	e0bffe17 	ldw	r2,-8(fp)
   23d1c:	10c00d17 	ldw	r3,52(r2)
   23d20:	e0bffe17 	ldw	r2,-8(fp)
   23d24:	10800c17 	ldw	r2,48(r2)
   23d28:	18800526 	beq	r3,r2,23d40 <altera_avalon_jtag_uart_close+0x54>
   23d2c:	e0bffe17 	ldw	r2,-8(fp)
   23d30:	10c00917 	ldw	r3,36(r2)
   23d34:	e0bffe17 	ldw	r2,-8(fp)
   23d38:	10800117 	ldw	r2,4(r2)
   23d3c:	18bff136 	bltu	r3,r2,23d04 <__alt_data_end+0xfffead04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23d40:	0005883a 	mov	r2,zero
}
   23d44:	e037883a 	mov	sp,fp
   23d48:	df000017 	ldw	fp,0(sp)
   23d4c:	dec00104 	addi	sp,sp,4
   23d50:	f800283a 	ret

00023d54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23d54:	defffa04 	addi	sp,sp,-24
   23d58:	df000515 	stw	fp,20(sp)
   23d5c:	df000504 	addi	fp,sp,20
   23d60:	e13ffd15 	stw	r4,-12(fp)
   23d64:	e17ffe15 	stw	r5,-8(fp)
   23d68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23d6c:	00bff9c4 	movi	r2,-25
   23d70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23d74:	e0bffe17 	ldw	r2,-8(fp)
   23d78:	10da8060 	cmpeqi	r3,r2,27137
   23d7c:	1800031e 	bne	r3,zero,23d8c <altera_avalon_jtag_uart_ioctl+0x38>
   23d80:	109a80a0 	cmpeqi	r2,r2,27138
   23d84:	1000191e 	bne	r2,zero,23dec <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   23d88:	00002806 	br	23e2c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23d8c:	e0bffd17 	ldw	r2,-12(fp)
   23d90:	10c00117 	ldw	r3,4(r2)
   23d94:	00a00034 	movhi	r2,32768
   23d98:	10bfffc4 	addi	r2,r2,-1
   23d9c:	18801226 	beq	r3,r2,23de8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   23da0:	e0bfff17 	ldw	r2,-4(fp)
   23da4:	10800017 	ldw	r2,0(r2)
   23da8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23dac:	e0bffc17 	ldw	r2,-16(fp)
   23db0:	10800090 	cmplti	r2,r2,2
   23db4:	1000061e 	bne	r2,zero,23dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   23db8:	e0fffc17 	ldw	r3,-16(fp)
   23dbc:	00a00034 	movhi	r2,32768
   23dc0:	10bfffc4 	addi	r2,r2,-1
   23dc4:	18800226 	beq	r3,r2,23dd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   23dc8:	e0bffc17 	ldw	r2,-16(fp)
   23dcc:	00000206 	br	23dd8 <altera_avalon_jtag_uart_ioctl+0x84>
   23dd0:	00a00034 	movhi	r2,32768
   23dd4:	10bfff84 	addi	r2,r2,-2
   23dd8:	e0fffd17 	ldw	r3,-12(fp)
   23ddc:	18800115 	stw	r2,4(r3)
      rc = 0;
   23de0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23de4:	00001106 	br	23e2c <altera_avalon_jtag_uart_ioctl+0xd8>
   23de8:	00001006 	br	23e2c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23dec:	e0bffd17 	ldw	r2,-12(fp)
   23df0:	10c00117 	ldw	r3,4(r2)
   23df4:	00a00034 	movhi	r2,32768
   23df8:	10bfffc4 	addi	r2,r2,-1
   23dfc:	18800a26 	beq	r3,r2,23e28 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23e00:	e0bffd17 	ldw	r2,-12(fp)
   23e04:	10c00917 	ldw	r3,36(r2)
   23e08:	e0bffd17 	ldw	r2,-12(fp)
   23e0c:	10800117 	ldw	r2,4(r2)
   23e10:	1885803a 	cmpltu	r2,r3,r2
   23e14:	10c03fcc 	andi	r3,r2,255
   23e18:	e0bfff17 	ldw	r2,-4(fp)
   23e1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   23e20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23e24:	00000006 	br	23e28 <altera_avalon_jtag_uart_ioctl+0xd4>
   23e28:	0001883a 	nop

  default:
    break;
  }

  return rc;
   23e2c:	e0bffb17 	ldw	r2,-20(fp)
}
   23e30:	e037883a 	mov	sp,fp
   23e34:	df000017 	ldw	fp,0(sp)
   23e38:	dec00104 	addi	sp,sp,4
   23e3c:	f800283a 	ret

00023e40 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23e40:	defff304 	addi	sp,sp,-52
   23e44:	dfc00c15 	stw	ra,48(sp)
   23e48:	df000b15 	stw	fp,44(sp)
   23e4c:	df000b04 	addi	fp,sp,44
   23e50:	e13ffc15 	stw	r4,-16(fp)
   23e54:	e17ffd15 	stw	r5,-12(fp)
   23e58:	e1bffe15 	stw	r6,-8(fp)
   23e5c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   23e60:	e0bffd17 	ldw	r2,-12(fp)
   23e64:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23e68:	00004906 	br	23f90 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   23e6c:	e0bffc17 	ldw	r2,-16(fp)
   23e70:	10800a17 	ldw	r2,40(r2)
   23e74:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   23e78:	e0bffc17 	ldw	r2,-16(fp)
   23e7c:	10800b17 	ldw	r2,44(r2)
   23e80:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   23e84:	e0fff717 	ldw	r3,-36(fp)
   23e88:	e0bff817 	ldw	r2,-32(fp)
   23e8c:	18800536 	bltu	r3,r2,23ea4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23e90:	e0fff717 	ldw	r3,-36(fp)
   23e94:	e0bff817 	ldw	r2,-32(fp)
   23e98:	1885c83a 	sub	r2,r3,r2
   23e9c:	e0bff615 	stw	r2,-40(fp)
   23ea0:	00000406 	br	23eb4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   23ea4:	00c20004 	movi	r3,2048
   23ea8:	e0bff817 	ldw	r2,-32(fp)
   23eac:	1885c83a 	sub	r2,r3,r2
   23eb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   23eb4:	e0bff617 	ldw	r2,-40(fp)
   23eb8:	1000011e 	bne	r2,zero,23ec0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   23ebc:	00001d06 	br	23f34 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   23ec0:	e0fffe17 	ldw	r3,-8(fp)
   23ec4:	e0bff617 	ldw	r2,-40(fp)
   23ec8:	1880022e 	bgeu	r3,r2,23ed4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   23ecc:	e0bffe17 	ldw	r2,-8(fp)
   23ed0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23ed4:	e0bff817 	ldw	r2,-32(fp)
   23ed8:	10800e04 	addi	r2,r2,56
   23edc:	e0fffc17 	ldw	r3,-16(fp)
   23ee0:	1885883a 	add	r2,r3,r2
   23ee4:	e13ff517 	ldw	r4,-44(fp)
   23ee8:	100b883a 	mov	r5,r2
   23eec:	e1bff617 	ldw	r6,-40(fp)
   23ef0:	00210c40 	call	210c4 <memcpy>
      ptr   += n;
   23ef4:	e0fff517 	ldw	r3,-44(fp)
   23ef8:	e0bff617 	ldw	r2,-40(fp)
   23efc:	1885883a 	add	r2,r3,r2
   23f00:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   23f04:	e0fffe17 	ldw	r3,-8(fp)
   23f08:	e0bff617 	ldw	r2,-40(fp)
   23f0c:	1885c83a 	sub	r2,r3,r2
   23f10:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23f14:	e0fff817 	ldw	r3,-32(fp)
   23f18:	e0bff617 	ldw	r2,-40(fp)
   23f1c:	1885883a 	add	r2,r3,r2
   23f20:	10c1ffcc 	andi	r3,r2,2047
   23f24:	e0bffc17 	ldw	r2,-16(fp)
   23f28:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   23f2c:	e0bffe17 	ldw	r2,-8(fp)
   23f30:	00bfce16 	blt	zero,r2,23e6c <__alt_data_end+0xfffeae6c>

    /* If we read any data then return it */
    if (ptr != buffer)
   23f34:	e0fff517 	ldw	r3,-44(fp)
   23f38:	e0bffd17 	ldw	r2,-12(fp)
   23f3c:	18800126 	beq	r3,r2,23f44 <altera_avalon_jtag_uart_read+0x104>
      break;
   23f40:	00001506 	br	23f98 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   23f44:	e0bfff17 	ldw	r2,-4(fp)
   23f48:	1090000c 	andi	r2,r2,16384
   23f4c:	10000126 	beq	r2,zero,23f54 <altera_avalon_jtag_uart_read+0x114>
      break;
   23f50:	00001106 	br	23f98 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23f54:	0001883a 	nop
   23f58:	e0bffc17 	ldw	r2,-16(fp)
   23f5c:	10c00a17 	ldw	r3,40(r2)
   23f60:	e0bff717 	ldw	r2,-36(fp)
   23f64:	1880051e 	bne	r3,r2,23f7c <altera_avalon_jtag_uart_read+0x13c>
   23f68:	e0bffc17 	ldw	r2,-16(fp)
   23f6c:	10c00917 	ldw	r3,36(r2)
   23f70:	e0bffc17 	ldw	r2,-16(fp)
   23f74:	10800117 	ldw	r2,4(r2)
   23f78:	18bff736 	bltu	r3,r2,23f58 <__alt_data_end+0xfffeaf58>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   23f7c:	e0bffc17 	ldw	r2,-16(fp)
   23f80:	10c00a17 	ldw	r3,40(r2)
   23f84:	e0bff717 	ldw	r2,-36(fp)
   23f88:	1880011e 	bne	r3,r2,23f90 <altera_avalon_jtag_uart_read+0x150>
      break;
   23f8c:	00000206 	br	23f98 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23f90:	e0bffe17 	ldw	r2,-8(fp)
   23f94:	00bfb516 	blt	zero,r2,23e6c <__alt_data_end+0xfffeae6c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23f98:	e0fff517 	ldw	r3,-44(fp)
   23f9c:	e0bffd17 	ldw	r2,-12(fp)
   23fa0:	18801826 	beq	r3,r2,24004 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23fa4:	0005303a 	rdctl	r2,status
   23fa8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23fac:	e0fffa17 	ldw	r3,-24(fp)
   23fb0:	00bfff84 	movi	r2,-2
   23fb4:	1884703a 	and	r2,r3,r2
   23fb8:	1001703a 	wrctl	status,r2
  
  return context;
   23fbc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23fc0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23fc4:	e0bffc17 	ldw	r2,-16(fp)
   23fc8:	10800817 	ldw	r2,32(r2)
   23fcc:	10c00054 	ori	r3,r2,1
   23fd0:	e0bffc17 	ldw	r2,-16(fp)
   23fd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23fd8:	e0bffc17 	ldw	r2,-16(fp)
   23fdc:	10800017 	ldw	r2,0(r2)
   23fe0:	10800104 	addi	r2,r2,4
   23fe4:	1007883a 	mov	r3,r2
   23fe8:	e0bffc17 	ldw	r2,-16(fp)
   23fec:	10800817 	ldw	r2,32(r2)
   23ff0:	18800035 	stwio	r2,0(r3)
   23ff4:	e0bff917 	ldw	r2,-28(fp)
   23ff8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23ffc:	e0bffb17 	ldw	r2,-20(fp)
   24000:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24004:	e0fff517 	ldw	r3,-44(fp)
   24008:	e0bffd17 	ldw	r2,-12(fp)
   2400c:	18800426 	beq	r3,r2,24020 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   24010:	e0fff517 	ldw	r3,-44(fp)
   24014:	e0bffd17 	ldw	r2,-12(fp)
   24018:	1885c83a 	sub	r2,r3,r2
   2401c:	00000606 	br	24038 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   24020:	e0bfff17 	ldw	r2,-4(fp)
   24024:	1090000c 	andi	r2,r2,16384
   24028:	10000226 	beq	r2,zero,24034 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   2402c:	00bffd44 	movi	r2,-11
   24030:	00000106 	br	24038 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   24034:	00bffec4 	movi	r2,-5
}
   24038:	e037883a 	mov	sp,fp
   2403c:	dfc00117 	ldw	ra,4(sp)
   24040:	df000017 	ldw	fp,0(sp)
   24044:	dec00204 	addi	sp,sp,8
   24048:	f800283a 	ret

0002404c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2404c:	defff304 	addi	sp,sp,-52
   24050:	dfc00c15 	stw	ra,48(sp)
   24054:	df000b15 	stw	fp,44(sp)
   24058:	df000b04 	addi	fp,sp,44
   2405c:	e13ffc15 	stw	r4,-16(fp)
   24060:	e17ffd15 	stw	r5,-12(fp)
   24064:	e1bffe15 	stw	r6,-8(fp)
   24068:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2406c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24070:	e0bffd17 	ldw	r2,-12(fp)
   24074:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24078:	00003806 	br	2415c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2407c:	e0bffc17 	ldw	r2,-16(fp)
   24080:	10800c17 	ldw	r2,48(r2)
   24084:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   24088:	e0bffc17 	ldw	r2,-16(fp)
   2408c:	10800d17 	ldw	r2,52(r2)
   24090:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   24094:	e0fff817 	ldw	r3,-32(fp)
   24098:	e0bff517 	ldw	r2,-44(fp)
   2409c:	1880062e 	bgeu	r3,r2,240b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   240a0:	e0fff517 	ldw	r3,-44(fp)
   240a4:	e0bff817 	ldw	r2,-32(fp)
   240a8:	1885c83a 	sub	r2,r3,r2
   240ac:	10bfffc4 	addi	r2,r2,-1
   240b0:	e0bff615 	stw	r2,-40(fp)
   240b4:	00000b06 	br	240e4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   240b8:	e0bff517 	ldw	r2,-44(fp)
   240bc:	10000526 	beq	r2,zero,240d4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   240c0:	00c20004 	movi	r3,2048
   240c4:	e0bff817 	ldw	r2,-32(fp)
   240c8:	1885c83a 	sub	r2,r3,r2
   240cc:	e0bff615 	stw	r2,-40(fp)
   240d0:	00000406 	br	240e4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   240d4:	00c1ffc4 	movi	r3,2047
   240d8:	e0bff817 	ldw	r2,-32(fp)
   240dc:	1885c83a 	sub	r2,r3,r2
   240e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   240e4:	e0bff617 	ldw	r2,-40(fp)
   240e8:	1000011e 	bne	r2,zero,240f0 <altera_avalon_jtag_uart_write+0xa4>
        break;
   240ec:	00001d06 	br	24164 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   240f0:	e0fffe17 	ldw	r3,-8(fp)
   240f4:	e0bff617 	ldw	r2,-40(fp)
   240f8:	1880022e 	bgeu	r3,r2,24104 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   240fc:	e0bffe17 	ldw	r2,-8(fp)
   24100:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24104:	e0bff817 	ldw	r2,-32(fp)
   24108:	10820e04 	addi	r2,r2,2104
   2410c:	e0fffc17 	ldw	r3,-16(fp)
   24110:	1885883a 	add	r2,r3,r2
   24114:	1009883a 	mov	r4,r2
   24118:	e17ffd17 	ldw	r5,-12(fp)
   2411c:	e1bff617 	ldw	r6,-40(fp)
   24120:	00210c40 	call	210c4 <memcpy>
      ptr   += n;
   24124:	e0fffd17 	ldw	r3,-12(fp)
   24128:	e0bff617 	ldw	r2,-40(fp)
   2412c:	1885883a 	add	r2,r3,r2
   24130:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24134:	e0fffe17 	ldw	r3,-8(fp)
   24138:	e0bff617 	ldw	r2,-40(fp)
   2413c:	1885c83a 	sub	r2,r3,r2
   24140:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24144:	e0fff817 	ldw	r3,-32(fp)
   24148:	e0bff617 	ldw	r2,-40(fp)
   2414c:	1885883a 	add	r2,r3,r2
   24150:	10c1ffcc 	andi	r3,r2,2047
   24154:	e0bffc17 	ldw	r2,-16(fp)
   24158:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2415c:	e0bffe17 	ldw	r2,-8(fp)
   24160:	00bfc616 	blt	zero,r2,2407c <__alt_data_end+0xfffeb07c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24164:	0005303a 	rdctl	r2,status
   24168:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2416c:	e0fffa17 	ldw	r3,-24(fp)
   24170:	00bfff84 	movi	r2,-2
   24174:	1884703a 	and	r2,r3,r2
   24178:	1001703a 	wrctl	status,r2
  
  return context;
   2417c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24180:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24184:	e0bffc17 	ldw	r2,-16(fp)
   24188:	10800817 	ldw	r2,32(r2)
   2418c:	10c00094 	ori	r3,r2,2
   24190:	e0bffc17 	ldw	r2,-16(fp)
   24194:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24198:	e0bffc17 	ldw	r2,-16(fp)
   2419c:	10800017 	ldw	r2,0(r2)
   241a0:	10800104 	addi	r2,r2,4
   241a4:	1007883a 	mov	r3,r2
   241a8:	e0bffc17 	ldw	r2,-16(fp)
   241ac:	10800817 	ldw	r2,32(r2)
   241b0:	18800035 	stwio	r2,0(r3)
   241b4:	e0bff917 	ldw	r2,-28(fp)
   241b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   241bc:	e0bffb17 	ldw	r2,-20(fp)
   241c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   241c4:	e0bffe17 	ldw	r2,-8(fp)
   241c8:	0080120e 	bge	zero,r2,24214 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   241cc:	e0bfff17 	ldw	r2,-4(fp)
   241d0:	1090000c 	andi	r2,r2,16384
   241d4:	10000126 	beq	r2,zero,241dc <altera_avalon_jtag_uart_write+0x190>
        break;
   241d8:	00001006 	br	2421c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   241dc:	0001883a 	nop
   241e0:	e0bffc17 	ldw	r2,-16(fp)
   241e4:	10c00d17 	ldw	r3,52(r2)
   241e8:	e0bff517 	ldw	r2,-44(fp)
   241ec:	1880051e 	bne	r3,r2,24204 <altera_avalon_jtag_uart_write+0x1b8>
   241f0:	e0bffc17 	ldw	r2,-16(fp)
   241f4:	10c00917 	ldw	r3,36(r2)
   241f8:	e0bffc17 	ldw	r2,-16(fp)
   241fc:	10800117 	ldw	r2,4(r2)
   24200:	18bff736 	bltu	r3,r2,241e0 <__alt_data_end+0xfffeb1e0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24204:	e0bffc17 	ldw	r2,-16(fp)
   24208:	10800917 	ldw	r2,36(r2)
   2420c:	10000126 	beq	r2,zero,24214 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   24210:	00000206 	br	2421c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   24214:	e0bffe17 	ldw	r2,-8(fp)
   24218:	00bf9716 	blt	zero,r2,24078 <__alt_data_end+0xfffeb078>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2421c:	e0fffd17 	ldw	r3,-12(fp)
   24220:	e0bff717 	ldw	r2,-36(fp)
   24224:	18800426 	beq	r3,r2,24238 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   24228:	e0fffd17 	ldw	r3,-12(fp)
   2422c:	e0bff717 	ldw	r2,-36(fp)
   24230:	1885c83a 	sub	r2,r3,r2
   24234:	00000606 	br	24250 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   24238:	e0bfff17 	ldw	r2,-4(fp)
   2423c:	1090000c 	andi	r2,r2,16384
   24240:	10000226 	beq	r2,zero,2424c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   24244:	00bffd44 	movi	r2,-11
   24248:	00000106 	br	24250 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2424c:	00bffec4 	movi	r2,-5
}
   24250:	e037883a 	mov	sp,fp
   24254:	dfc00117 	ldw	ra,4(sp)
   24258:	df000017 	ldw	fp,0(sp)
   2425c:	dec00204 	addi	sp,sp,8
   24260:	f800283a 	ret

00024264 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24264:	defff504 	addi	sp,sp,-44
   24268:	df000a15 	stw	fp,40(sp)
   2426c:	df000a04 	addi	fp,sp,40
   24270:	e13ffc15 	stw	r4,-16(fp)
   24274:	e17ffd15 	stw	r5,-12(fp)
   24278:	e1bffe15 	stw	r6,-8(fp)
   2427c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   24280:	e03ff615 	stw	zero,-40(fp)
   24284:	008000f4 	movhi	r2,3
   24288:	10a25b04 	addi	r2,r2,-30356
   2428c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   24290:	10003f26 	beq	r2,zero,24390 <alt_alarm_start+0x12c>
  {
    if (alarm)
   24294:	e0bffc17 	ldw	r2,-16(fp)
   24298:	10003b26 	beq	r2,zero,24388 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2429c:	e0bffc17 	ldw	r2,-16(fp)
   242a0:	e0fffe17 	ldw	r3,-8(fp)
   242a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   242a8:	e0bffc17 	ldw	r2,-16(fp)
   242ac:	e0ffff17 	ldw	r3,-4(fp)
   242b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   242b4:	0005303a 	rdctl	r2,status
   242b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242bc:	e0fff817 	ldw	r3,-32(fp)
   242c0:	00bfff84 	movi	r2,-2
   242c4:	1884703a 	and	r2,r3,r2
   242c8:	1001703a 	wrctl	status,r2
  
  return context;
   242cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   242d0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   242d4:	008000f4 	movhi	r2,3
   242d8:	10a25c04 	addi	r2,r2,-30352
   242dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   242e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   242e4:	e0fffd17 	ldw	r3,-12(fp)
   242e8:	e0bff617 	ldw	r2,-40(fp)
   242ec:	1885883a 	add	r2,r3,r2
   242f0:	10c00044 	addi	r3,r2,1
   242f4:	e0bffc17 	ldw	r2,-16(fp)
   242f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   242fc:	e0bffc17 	ldw	r2,-16(fp)
   24300:	10c00217 	ldw	r3,8(r2)
   24304:	e0bff617 	ldw	r2,-40(fp)
   24308:	1880042e 	bgeu	r3,r2,2431c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   2430c:	e0bffc17 	ldw	r2,-16(fp)
   24310:	00c00044 	movi	r3,1
   24314:	10c00405 	stb	r3,16(r2)
   24318:	00000206 	br	24324 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   2431c:	e0bffc17 	ldw	r2,-16(fp)
   24320:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24324:	e0fffc17 	ldw	r3,-16(fp)
   24328:	008000b4 	movhi	r2,2
   2432c:	109bb604 	addi	r2,r2,28376
   24330:	e0bff915 	stw	r2,-28(fp)
   24334:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24338:	e0bffa17 	ldw	r2,-24(fp)
   2433c:	e0fff917 	ldw	r3,-28(fp)
   24340:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24344:	e0bff917 	ldw	r2,-28(fp)
   24348:	10c00017 	ldw	r3,0(r2)
   2434c:	e0bffa17 	ldw	r2,-24(fp)
   24350:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24354:	e0bff917 	ldw	r2,-28(fp)
   24358:	10800017 	ldw	r2,0(r2)
   2435c:	e0fffa17 	ldw	r3,-24(fp)
   24360:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24364:	e0bff917 	ldw	r2,-28(fp)
   24368:	e0fffa17 	ldw	r3,-24(fp)
   2436c:	10c00015 	stw	r3,0(r2)
   24370:	e0bff717 	ldw	r2,-36(fp)
   24374:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24378:	e0bffb17 	ldw	r2,-20(fp)
   2437c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   24380:	0005883a 	mov	r2,zero
   24384:	00000306 	br	24394 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   24388:	00bffa84 	movi	r2,-22
   2438c:	00000106 	br	24394 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   24390:	00bfde84 	movi	r2,-134
  }
}
   24394:	e037883a 	mov	sp,fp
   24398:	df000017 	ldw	fp,0(sp)
   2439c:	dec00104 	addi	sp,sp,4
   243a0:	f800283a 	ret

000243a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   243a4:	deffff04 	addi	sp,sp,-4
   243a8:	df000015 	stw	fp,0(sp)
   243ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   243b0:	e037883a 	mov	sp,fp
   243b4:	df000017 	ldw	fp,0(sp)
   243b8:	dec00104 	addi	sp,sp,4
   243bc:	f800283a 	ret

000243c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   243c0:	defffe04 	addi	sp,sp,-8
   243c4:	dfc00115 	stw	ra,4(sp)
   243c8:	df000015 	stw	fp,0(sp)
   243cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   243d0:	008000b4 	movhi	r2,2
   243d4:	109bb304 	addi	r2,r2,28364
   243d8:	10800017 	ldw	r2,0(r2)
   243dc:	10000526 	beq	r2,zero,243f4 <alt_get_errno+0x34>
   243e0:	008000b4 	movhi	r2,2
   243e4:	109bb304 	addi	r2,r2,28364
   243e8:	10800017 	ldw	r2,0(r2)
   243ec:	103ee83a 	callr	r2
   243f0:	00000206 	br	243fc <alt_get_errno+0x3c>
   243f4:	008000f4 	movhi	r2,3
   243f8:	10a25604 	addi	r2,r2,-30376
}
   243fc:	e037883a 	mov	sp,fp
   24400:	dfc00117 	ldw	ra,4(sp)
   24404:	df000017 	ldw	fp,0(sp)
   24408:	dec00204 	addi	sp,sp,8
   2440c:	f800283a 	ret

00024410 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24410:	defffa04 	addi	sp,sp,-24
   24414:	dfc00515 	stw	ra,20(sp)
   24418:	df000415 	stw	fp,16(sp)
   2441c:	df000404 	addi	fp,sp,16
   24420:	e13ffe15 	stw	r4,-8(fp)
   24424:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24428:	e0bffe17 	ldw	r2,-8(fp)
   2442c:	10000326 	beq	r2,zero,2443c <alt_dev_llist_insert+0x2c>
   24430:	e0bffe17 	ldw	r2,-8(fp)
   24434:	10800217 	ldw	r2,8(r2)
   24438:	1000061e 	bne	r2,zero,24454 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2443c:	00243c00 	call	243c0 <alt_get_errno>
   24440:	1007883a 	mov	r3,r2
   24444:	00800584 	movi	r2,22
   24448:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2444c:	00bffa84 	movi	r2,-22
   24450:	00001306 	br	244a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24454:	e0bffe17 	ldw	r2,-8(fp)
   24458:	e0ffff17 	ldw	r3,-4(fp)
   2445c:	e0fffc15 	stw	r3,-16(fp)
   24460:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24464:	e0bffd17 	ldw	r2,-12(fp)
   24468:	e0fffc17 	ldw	r3,-16(fp)
   2446c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24470:	e0bffc17 	ldw	r2,-16(fp)
   24474:	10c00017 	ldw	r3,0(r2)
   24478:	e0bffd17 	ldw	r2,-12(fp)
   2447c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24480:	e0bffc17 	ldw	r2,-16(fp)
   24484:	10800017 	ldw	r2,0(r2)
   24488:	e0fffd17 	ldw	r3,-12(fp)
   2448c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24490:	e0bffc17 	ldw	r2,-16(fp)
   24494:	e0fffd17 	ldw	r3,-12(fp)
   24498:	10c00015 	stw	r3,0(r2)

  return 0;  
   2449c:	0005883a 	mov	r2,zero
}
   244a0:	e037883a 	mov	sp,fp
   244a4:	dfc00117 	ldw	ra,4(sp)
   244a8:	df000017 	ldw	fp,0(sp)
   244ac:	dec00204 	addi	sp,sp,8
   244b0:	f800283a 	ret

000244b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   244b4:	defffd04 	addi	sp,sp,-12
   244b8:	dfc00215 	stw	ra,8(sp)
   244bc:	df000115 	stw	fp,4(sp)
   244c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   244c4:	008000b4 	movhi	r2,2
   244c8:	10950a04 	addi	r2,r2,21544
   244cc:	e0bfff15 	stw	r2,-4(fp)
   244d0:	00000606 	br	244ec <_do_ctors+0x38>
        (*ctor) (); 
   244d4:	e0bfff17 	ldw	r2,-4(fp)
   244d8:	10800017 	ldw	r2,0(r2)
   244dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   244e0:	e0bfff17 	ldw	r2,-4(fp)
   244e4:	10bfff04 	addi	r2,r2,-4
   244e8:	e0bfff15 	stw	r2,-4(fp)
   244ec:	e0ffff17 	ldw	r3,-4(fp)
   244f0:	008000b4 	movhi	r2,2
   244f4:	10950b04 	addi	r2,r2,21548
   244f8:	18bff62e 	bgeu	r3,r2,244d4 <__alt_data_end+0xfffeb4d4>
        (*ctor) (); 
}
   244fc:	e037883a 	mov	sp,fp
   24500:	dfc00117 	ldw	ra,4(sp)
   24504:	df000017 	ldw	fp,0(sp)
   24508:	dec00204 	addi	sp,sp,8
   2450c:	f800283a 	ret

00024510 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24510:	defffd04 	addi	sp,sp,-12
   24514:	dfc00215 	stw	ra,8(sp)
   24518:	df000115 	stw	fp,4(sp)
   2451c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24520:	008000b4 	movhi	r2,2
   24524:	10950a04 	addi	r2,r2,21544
   24528:	e0bfff15 	stw	r2,-4(fp)
   2452c:	00000606 	br	24548 <_do_dtors+0x38>
        (*dtor) (); 
   24530:	e0bfff17 	ldw	r2,-4(fp)
   24534:	10800017 	ldw	r2,0(r2)
   24538:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2453c:	e0bfff17 	ldw	r2,-4(fp)
   24540:	10bfff04 	addi	r2,r2,-4
   24544:	e0bfff15 	stw	r2,-4(fp)
   24548:	e0ffff17 	ldw	r3,-4(fp)
   2454c:	008000b4 	movhi	r2,2
   24550:	10950b04 	addi	r2,r2,21548
   24554:	18bff62e 	bgeu	r3,r2,24530 <__alt_data_end+0xfffeb530>
        (*dtor) (); 
}
   24558:	e037883a 	mov	sp,fp
   2455c:	dfc00117 	ldw	ra,4(sp)
   24560:	df000017 	ldw	fp,0(sp)
   24564:	dec00204 	addi	sp,sp,8
   24568:	f800283a 	ret

0002456c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2456c:	deffff04 	addi	sp,sp,-4
   24570:	df000015 	stw	fp,0(sp)
   24574:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24578:	e037883a 	mov	sp,fp
   2457c:	df000017 	ldw	fp,0(sp)
   24580:	dec00104 	addi	sp,sp,4
   24584:	f800283a 	ret

00024588 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24588:	defff904 	addi	sp,sp,-28
   2458c:	dfc00615 	stw	ra,24(sp)
   24590:	df000515 	stw	fp,20(sp)
   24594:	df000504 	addi	fp,sp,20
   24598:	e13ffc15 	stw	r4,-16(fp)
   2459c:	e17ffd15 	stw	r5,-12(fp)
   245a0:	e1bffe15 	stw	r6,-8(fp)
   245a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   245a8:	e0800217 	ldw	r2,8(fp)
   245ac:	d8800015 	stw	r2,0(sp)
   245b0:	e13ffc17 	ldw	r4,-16(fp)
   245b4:	e17ffd17 	ldw	r5,-12(fp)
   245b8:	e1bffe17 	ldw	r6,-8(fp)
   245bc:	e1ffff17 	ldw	r7,-4(fp)
   245c0:	00247680 	call	24768 <alt_iic_isr_register>
}  
   245c4:	e037883a 	mov	sp,fp
   245c8:	dfc00117 	ldw	ra,4(sp)
   245cc:	df000017 	ldw	fp,0(sp)
   245d0:	dec00204 	addi	sp,sp,8
   245d4:	f800283a 	ret

000245d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   245d8:	defff904 	addi	sp,sp,-28
   245dc:	df000615 	stw	fp,24(sp)
   245e0:	df000604 	addi	fp,sp,24
   245e4:	e13ffe15 	stw	r4,-8(fp)
   245e8:	e17fff15 	stw	r5,-4(fp)
   245ec:	e0bfff17 	ldw	r2,-4(fp)
   245f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   245f4:	0005303a 	rdctl	r2,status
   245f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   245fc:	e0fffb17 	ldw	r3,-20(fp)
   24600:	00bfff84 	movi	r2,-2
   24604:	1884703a 	and	r2,r3,r2
   24608:	1001703a 	wrctl	status,r2
  
  return context;
   2460c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24610:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   24614:	e0bffa17 	ldw	r2,-24(fp)
   24618:	00c00044 	movi	r3,1
   2461c:	1884983a 	sll	r2,r3,r2
   24620:	1007883a 	mov	r3,r2
   24624:	008000f4 	movhi	r2,3
   24628:	10a25a04 	addi	r2,r2,-30360
   2462c:	10800017 	ldw	r2,0(r2)
   24630:	1886b03a 	or	r3,r3,r2
   24634:	008000f4 	movhi	r2,3
   24638:	10a25a04 	addi	r2,r2,-30360
   2463c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24640:	008000f4 	movhi	r2,3
   24644:	10a25a04 	addi	r2,r2,-30360
   24648:	10800017 	ldw	r2,0(r2)
   2464c:	100170fa 	wrctl	ienable,r2
   24650:	e0bffc17 	ldw	r2,-16(fp)
   24654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24658:	e0bffd17 	ldw	r2,-12(fp)
   2465c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24660:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   24664:	0001883a 	nop
}
   24668:	e037883a 	mov	sp,fp
   2466c:	df000017 	ldw	fp,0(sp)
   24670:	dec00104 	addi	sp,sp,4
   24674:	f800283a 	ret

00024678 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24678:	defff904 	addi	sp,sp,-28
   2467c:	df000615 	stw	fp,24(sp)
   24680:	df000604 	addi	fp,sp,24
   24684:	e13ffe15 	stw	r4,-8(fp)
   24688:	e17fff15 	stw	r5,-4(fp)
   2468c:	e0bfff17 	ldw	r2,-4(fp)
   24690:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24694:	0005303a 	rdctl	r2,status
   24698:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2469c:	e0fffb17 	ldw	r3,-20(fp)
   246a0:	00bfff84 	movi	r2,-2
   246a4:	1884703a 	and	r2,r3,r2
   246a8:	1001703a 	wrctl	status,r2
  
  return context;
   246ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   246b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   246b4:	e0bffa17 	ldw	r2,-24(fp)
   246b8:	00c00044 	movi	r3,1
   246bc:	1884983a 	sll	r2,r3,r2
   246c0:	0084303a 	nor	r2,zero,r2
   246c4:	1007883a 	mov	r3,r2
   246c8:	008000f4 	movhi	r2,3
   246cc:	10a25a04 	addi	r2,r2,-30360
   246d0:	10800017 	ldw	r2,0(r2)
   246d4:	1886703a 	and	r3,r3,r2
   246d8:	008000f4 	movhi	r2,3
   246dc:	10a25a04 	addi	r2,r2,-30360
   246e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   246e4:	008000f4 	movhi	r2,3
   246e8:	10a25a04 	addi	r2,r2,-30360
   246ec:	10800017 	ldw	r2,0(r2)
   246f0:	100170fa 	wrctl	ienable,r2
   246f4:	e0bffc17 	ldw	r2,-16(fp)
   246f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   246fc:	e0bffd17 	ldw	r2,-12(fp)
   24700:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24704:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   24708:	0001883a 	nop
}
   2470c:	e037883a 	mov	sp,fp
   24710:	df000017 	ldw	fp,0(sp)
   24714:	dec00104 	addi	sp,sp,4
   24718:	f800283a 	ret

0002471c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2471c:	defffc04 	addi	sp,sp,-16
   24720:	df000315 	stw	fp,12(sp)
   24724:	df000304 	addi	fp,sp,12
   24728:	e13ffe15 	stw	r4,-8(fp)
   2472c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24730:	000530fa 	rdctl	r2,ienable
   24734:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24738:	e0bfff17 	ldw	r2,-4(fp)
   2473c:	00c00044 	movi	r3,1
   24740:	1884983a 	sll	r2,r3,r2
   24744:	1007883a 	mov	r3,r2
   24748:	e0bffd17 	ldw	r2,-12(fp)
   2474c:	1884703a 	and	r2,r3,r2
   24750:	1004c03a 	cmpne	r2,r2,zero
   24754:	10803fcc 	andi	r2,r2,255
}
   24758:	e037883a 	mov	sp,fp
   2475c:	df000017 	ldw	fp,0(sp)
   24760:	dec00104 	addi	sp,sp,4
   24764:	f800283a 	ret

00024768 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24768:	defff504 	addi	sp,sp,-44
   2476c:	dfc00a15 	stw	ra,40(sp)
   24770:	df000915 	stw	fp,36(sp)
   24774:	df000904 	addi	fp,sp,36
   24778:	e13ffc15 	stw	r4,-16(fp)
   2477c:	e17ffd15 	stw	r5,-12(fp)
   24780:	e1bffe15 	stw	r6,-8(fp)
   24784:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   24788:	00bffa84 	movi	r2,-22
   2478c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24790:	e0bffd17 	ldw	r2,-12(fp)
   24794:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24798:	e0bff817 	ldw	r2,-32(fp)
   2479c:	10800808 	cmpgei	r2,r2,32
   247a0:	1000271e 	bne	r2,zero,24840 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   247a4:	0005303a 	rdctl	r2,status
   247a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   247ac:	e0fffa17 	ldw	r3,-24(fp)
   247b0:	00bfff84 	movi	r2,-2
   247b4:	1884703a 	and	r2,r3,r2
   247b8:	1001703a 	wrctl	status,r2
  
  return context;
   247bc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   247c0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   247c4:	008000f4 	movhi	r2,3
   247c8:	10a26704 	addi	r2,r2,-30308
   247cc:	e0fff817 	ldw	r3,-32(fp)
   247d0:	180690fa 	slli	r3,r3,3
   247d4:	10c5883a 	add	r2,r2,r3
   247d8:	e0fffe17 	ldw	r3,-8(fp)
   247dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   247e0:	008000f4 	movhi	r2,3
   247e4:	10a26704 	addi	r2,r2,-30308
   247e8:	e0fff817 	ldw	r3,-32(fp)
   247ec:	180690fa 	slli	r3,r3,3
   247f0:	10c5883a 	add	r2,r2,r3
   247f4:	10800104 	addi	r2,r2,4
   247f8:	e0ffff17 	ldw	r3,-4(fp)
   247fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24800:	e0bffe17 	ldw	r2,-8(fp)
   24804:	10000526 	beq	r2,zero,2481c <alt_iic_isr_register+0xb4>
   24808:	e0bff817 	ldw	r2,-32(fp)
   2480c:	e13ffc17 	ldw	r4,-16(fp)
   24810:	100b883a 	mov	r5,r2
   24814:	00245d80 	call	245d8 <alt_ic_irq_enable>
   24818:	00000406 	br	2482c <alt_iic_isr_register+0xc4>
   2481c:	e0bff817 	ldw	r2,-32(fp)
   24820:	e13ffc17 	ldw	r4,-16(fp)
   24824:	100b883a 	mov	r5,r2
   24828:	00246780 	call	24678 <alt_ic_irq_disable>
   2482c:	e0bff715 	stw	r2,-36(fp)
   24830:	e0bff917 	ldw	r2,-28(fp)
   24834:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24838:	e0bffb17 	ldw	r2,-20(fp)
   2483c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24840:	e0bff717 	ldw	r2,-36(fp)
}
   24844:	e037883a 	mov	sp,fp
   24848:	dfc00117 	ldw	ra,4(sp)
   2484c:	df000017 	ldw	fp,0(sp)
   24850:	dec00204 	addi	sp,sp,8
   24854:	f800283a 	ret

00024858 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24858:	defff804 	addi	sp,sp,-32
   2485c:	dfc00715 	stw	ra,28(sp)
   24860:	df000615 	stw	fp,24(sp)
   24864:	dc000515 	stw	r16,20(sp)
   24868:	df000604 	addi	fp,sp,24
   2486c:	e13ffb15 	stw	r4,-20(fp)
   24870:	e17ffc15 	stw	r5,-16(fp)
   24874:	e1bffd15 	stw	r6,-12(fp)
   24878:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2487c:	e13ffc17 	ldw	r4,-16(fp)
   24880:	e17ffd17 	ldw	r5,-12(fp)
   24884:	e1bffe17 	ldw	r6,-8(fp)
   24888:	0024af40 	call	24af4 <open>
   2488c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   24890:	e0bffa17 	ldw	r2,-24(fp)
   24894:	10002216 	blt	r2,zero,24920 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   24898:	040000b4 	movhi	r16,2
   2489c:	84173204 	addi	r16,r16,23752
   248a0:	e0bffa17 	ldw	r2,-24(fp)
   248a4:	1009883a 	mov	r4,r2
   248a8:	01400304 	movi	r5,12
   248ac:	0022d4c0 	call	22d4c <__mulsi3>
   248b0:	8085883a 	add	r2,r16,r2
   248b4:	10c00017 	ldw	r3,0(r2)
   248b8:	e0bffb17 	ldw	r2,-20(fp)
   248bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   248c0:	040000b4 	movhi	r16,2
   248c4:	84173204 	addi	r16,r16,23752
   248c8:	e0bffa17 	ldw	r2,-24(fp)
   248cc:	1009883a 	mov	r4,r2
   248d0:	01400304 	movi	r5,12
   248d4:	0022d4c0 	call	22d4c <__mulsi3>
   248d8:	8085883a 	add	r2,r16,r2
   248dc:	10800104 	addi	r2,r2,4
   248e0:	10c00017 	ldw	r3,0(r2)
   248e4:	e0bffb17 	ldw	r2,-20(fp)
   248e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   248ec:	040000b4 	movhi	r16,2
   248f0:	84173204 	addi	r16,r16,23752
   248f4:	e0bffa17 	ldw	r2,-24(fp)
   248f8:	1009883a 	mov	r4,r2
   248fc:	01400304 	movi	r5,12
   24900:	0022d4c0 	call	22d4c <__mulsi3>
   24904:	8085883a 	add	r2,r16,r2
   24908:	10800204 	addi	r2,r2,8
   2490c:	10c00017 	ldw	r3,0(r2)
   24910:	e0bffb17 	ldw	r2,-20(fp)
   24914:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24918:	e13ffa17 	ldw	r4,-24(fp)
   2491c:	00234e80 	call	234e8 <alt_release_fd>
  }
} 
   24920:	e6ffff04 	addi	sp,fp,-4
   24924:	dfc00217 	ldw	ra,8(sp)
   24928:	df000117 	ldw	fp,4(sp)
   2492c:	dc000017 	ldw	r16,0(sp)
   24930:	dec00304 	addi	sp,sp,12
   24934:	f800283a 	ret

00024938 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24938:	defffb04 	addi	sp,sp,-20
   2493c:	dfc00415 	stw	ra,16(sp)
   24940:	df000315 	stw	fp,12(sp)
   24944:	df000304 	addi	fp,sp,12
   24948:	e13ffd15 	stw	r4,-12(fp)
   2494c:	e17ffe15 	stw	r5,-8(fp)
   24950:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24954:	010000b4 	movhi	r4,2
   24958:	21173504 	addi	r4,r4,23764
   2495c:	e17ffd17 	ldw	r5,-12(fp)
   24960:	01800044 	movi	r6,1
   24964:	01c07fc4 	movi	r7,511
   24968:	00248580 	call	24858 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2496c:	010000b4 	movhi	r4,2
   24970:	21173204 	addi	r4,r4,23752
   24974:	e17ffe17 	ldw	r5,-8(fp)
   24978:	000d883a 	mov	r6,zero
   2497c:	01c07fc4 	movi	r7,511
   24980:	00248580 	call	24858 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24984:	010000b4 	movhi	r4,2
   24988:	21173804 	addi	r4,r4,23776
   2498c:	e17fff17 	ldw	r5,-4(fp)
   24990:	01800044 	movi	r6,1
   24994:	01c07fc4 	movi	r7,511
   24998:	00248580 	call	24858 <alt_open_fd>
}  
   2499c:	e037883a 	mov	sp,fp
   249a0:	dfc00117 	ldw	ra,4(sp)
   249a4:	df000017 	ldw	fp,0(sp)
   249a8:	dec00204 	addi	sp,sp,8
   249ac:	f800283a 	ret

000249b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   249b0:	defffe04 	addi	sp,sp,-8
   249b4:	dfc00115 	stw	ra,4(sp)
   249b8:	df000015 	stw	fp,0(sp)
   249bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   249c0:	008000b4 	movhi	r2,2
   249c4:	109bb304 	addi	r2,r2,28364
   249c8:	10800017 	ldw	r2,0(r2)
   249cc:	10000526 	beq	r2,zero,249e4 <alt_get_errno+0x34>
   249d0:	008000b4 	movhi	r2,2
   249d4:	109bb304 	addi	r2,r2,28364
   249d8:	10800017 	ldw	r2,0(r2)
   249dc:	103ee83a 	callr	r2
   249e0:	00000206 	br	249ec <alt_get_errno+0x3c>
   249e4:	008000f4 	movhi	r2,3
   249e8:	10a25604 	addi	r2,r2,-30376
}
   249ec:	e037883a 	mov	sp,fp
   249f0:	dfc00117 	ldw	ra,4(sp)
   249f4:	df000017 	ldw	fp,0(sp)
   249f8:	dec00204 	addi	sp,sp,8
   249fc:	f800283a 	ret

00024a00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24a00:	defffb04 	addi	sp,sp,-20
   24a04:	dfc00415 	stw	ra,16(sp)
   24a08:	df000315 	stw	fp,12(sp)
   24a0c:	dc000215 	stw	r16,8(sp)
   24a10:	df000304 	addi	fp,sp,12
   24a14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24a18:	e0bffe17 	ldw	r2,-8(fp)
   24a1c:	10800217 	ldw	r2,8(r2)
   24a20:	10d00034 	orhi	r3,r2,16384
   24a24:	e0bffe17 	ldw	r2,-8(fp)
   24a28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24a2c:	e03ffd15 	stw	zero,-12(fp)
   24a30:	00002306 	br	24ac0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24a34:	040000b4 	movhi	r16,2
   24a38:	84173204 	addi	r16,r16,23752
   24a3c:	e0bffd17 	ldw	r2,-12(fp)
   24a40:	1009883a 	mov	r4,r2
   24a44:	01400304 	movi	r5,12
   24a48:	0022d4c0 	call	22d4c <__mulsi3>
   24a4c:	8085883a 	add	r2,r16,r2
   24a50:	10c00017 	ldw	r3,0(r2)
   24a54:	e0bffe17 	ldw	r2,-8(fp)
   24a58:	10800017 	ldw	r2,0(r2)
   24a5c:	1880151e 	bne	r3,r2,24ab4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24a60:	040000b4 	movhi	r16,2
   24a64:	84173204 	addi	r16,r16,23752
   24a68:	e0bffd17 	ldw	r2,-12(fp)
   24a6c:	1009883a 	mov	r4,r2
   24a70:	01400304 	movi	r5,12
   24a74:	0022d4c0 	call	22d4c <__mulsi3>
   24a78:	8085883a 	add	r2,r16,r2
   24a7c:	10800204 	addi	r2,r2,8
   24a80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24a84:	10000b0e 	bge	r2,zero,24ab4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24a88:	e13ffd17 	ldw	r4,-12(fp)
   24a8c:	01400304 	movi	r5,12
   24a90:	0022d4c0 	call	22d4c <__mulsi3>
   24a94:	1007883a 	mov	r3,r2
   24a98:	008000b4 	movhi	r2,2
   24a9c:	10973204 	addi	r2,r2,23752
   24aa0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24aa4:	e0bffe17 	ldw	r2,-8(fp)
   24aa8:	18800226 	beq	r3,r2,24ab4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24aac:	00bffcc4 	movi	r2,-13
   24ab0:	00000a06 	br	24adc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24ab4:	e0bffd17 	ldw	r2,-12(fp)
   24ab8:	10800044 	addi	r2,r2,1
   24abc:	e0bffd15 	stw	r2,-12(fp)
   24ac0:	008000b4 	movhi	r2,2
   24ac4:	109bb204 	addi	r2,r2,28360
   24ac8:	10800017 	ldw	r2,0(r2)
   24acc:	1007883a 	mov	r3,r2
   24ad0:	e0bffd17 	ldw	r2,-12(fp)
   24ad4:	18bfd72e 	bgeu	r3,r2,24a34 <__alt_data_end+0xfffeba34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24ad8:	0005883a 	mov	r2,zero
}
   24adc:	e6ffff04 	addi	sp,fp,-4
   24ae0:	dfc00217 	ldw	ra,8(sp)
   24ae4:	df000117 	ldw	fp,4(sp)
   24ae8:	dc000017 	ldw	r16,0(sp)
   24aec:	dec00304 	addi	sp,sp,12
   24af0:	f800283a 	ret

00024af4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24af4:	defff604 	addi	sp,sp,-40
   24af8:	dfc00915 	stw	ra,36(sp)
   24afc:	df000815 	stw	fp,32(sp)
   24b00:	df000804 	addi	fp,sp,32
   24b04:	e13ffd15 	stw	r4,-12(fp)
   24b08:	e17ffe15 	stw	r5,-8(fp)
   24b0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24b10:	00bfffc4 	movi	r2,-1
   24b14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24b18:	00bffb44 	movi	r2,-19
   24b1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24b20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24b24:	e13ffd17 	ldw	r4,-12(fp)
   24b28:	014000b4 	movhi	r5,2
   24b2c:	295bb004 	addi	r5,r5,28352
   24b30:	0024e100 	call	24e10 <alt_find_dev>
   24b34:	e0bff815 	stw	r2,-32(fp)
   24b38:	e0bff817 	ldw	r2,-32(fp)
   24b3c:	1000051e 	bne	r2,zero,24b54 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24b40:	e13ffd17 	ldw	r4,-12(fp)
   24b44:	0024ea00 	call	24ea0 <alt_find_file>
   24b48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24b4c:	00800044 	movi	r2,1
   24b50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24b54:	e0bff817 	ldw	r2,-32(fp)
   24b58:	10002b26 	beq	r2,zero,24c08 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24b5c:	e13ff817 	ldw	r4,-32(fp)
   24b60:	0024fb40 	call	24fb4 <alt_get_fd>
   24b64:	e0bff915 	stw	r2,-28(fp)
   24b68:	e0bff917 	ldw	r2,-28(fp)
   24b6c:	1000030e 	bge	r2,zero,24b7c <open+0x88>
    {
      status = index;
   24b70:	e0bff917 	ldw	r2,-28(fp)
   24b74:	e0bffa15 	stw	r2,-24(fp)
   24b78:	00002506 	br	24c10 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   24b7c:	e13ff917 	ldw	r4,-28(fp)
   24b80:	01400304 	movi	r5,12
   24b84:	0022d4c0 	call	22d4c <__mulsi3>
   24b88:	1007883a 	mov	r3,r2
   24b8c:	008000b4 	movhi	r2,2
   24b90:	10973204 	addi	r2,r2,23752
   24b94:	1885883a 	add	r2,r3,r2
   24b98:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24b9c:	e0fffe17 	ldw	r3,-8(fp)
   24ba0:	00900034 	movhi	r2,16384
   24ba4:	10bfffc4 	addi	r2,r2,-1
   24ba8:	1886703a 	and	r3,r3,r2
   24bac:	e0bffc17 	ldw	r2,-16(fp)
   24bb0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24bb4:	e0bffb17 	ldw	r2,-20(fp)
   24bb8:	1000051e 	bne	r2,zero,24bd0 <open+0xdc>
   24bbc:	e13ffc17 	ldw	r4,-16(fp)
   24bc0:	0024a000 	call	24a00 <alt_file_locked>
   24bc4:	e0bffa15 	stw	r2,-24(fp)
   24bc8:	e0bffa17 	ldw	r2,-24(fp)
   24bcc:	10001016 	blt	r2,zero,24c10 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24bd0:	e0bff817 	ldw	r2,-32(fp)
   24bd4:	10800317 	ldw	r2,12(r2)
   24bd8:	10000826 	beq	r2,zero,24bfc <open+0x108>
   24bdc:	e0bff817 	ldw	r2,-32(fp)
   24be0:	10800317 	ldw	r2,12(r2)
   24be4:	e13ffc17 	ldw	r4,-16(fp)
   24be8:	e17ffd17 	ldw	r5,-12(fp)
   24bec:	e1bffe17 	ldw	r6,-8(fp)
   24bf0:	e1ffff17 	ldw	r7,-4(fp)
   24bf4:	103ee83a 	callr	r2
   24bf8:	00000106 	br	24c00 <open+0x10c>
   24bfc:	0005883a 	mov	r2,zero
   24c00:	e0bffa15 	stw	r2,-24(fp)
   24c04:	00000206 	br	24c10 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24c08:	00bffb44 	movi	r2,-19
   24c0c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24c10:	e0bffa17 	ldw	r2,-24(fp)
   24c14:	1000090e 	bge	r2,zero,24c3c <open+0x148>
  {
    alt_release_fd (index);  
   24c18:	e13ff917 	ldw	r4,-28(fp)
   24c1c:	00234e80 	call	234e8 <alt_release_fd>
    ALT_ERRNO = -status;
   24c20:	00249b00 	call	249b0 <alt_get_errno>
   24c24:	1007883a 	mov	r3,r2
   24c28:	e0bffa17 	ldw	r2,-24(fp)
   24c2c:	0085c83a 	sub	r2,zero,r2
   24c30:	18800015 	stw	r2,0(r3)
    return -1;
   24c34:	00bfffc4 	movi	r2,-1
   24c38:	00000106 	br	24c40 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   24c3c:	e0bff917 	ldw	r2,-28(fp)
}
   24c40:	e037883a 	mov	sp,fp
   24c44:	dfc00117 	ldw	ra,4(sp)
   24c48:	df000017 	ldw	fp,0(sp)
   24c4c:	dec00204 	addi	sp,sp,8
   24c50:	f800283a 	ret

00024c54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24c54:	defffa04 	addi	sp,sp,-24
   24c58:	df000515 	stw	fp,20(sp)
   24c5c:	df000504 	addi	fp,sp,20
   24c60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24c64:	0005303a 	rdctl	r2,status
   24c68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c6c:	e0fffc17 	ldw	r3,-16(fp)
   24c70:	00bfff84 	movi	r2,-2
   24c74:	1884703a 	and	r2,r3,r2
   24c78:	1001703a 	wrctl	status,r2
  
  return context;
   24c7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24c80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24c84:	e0bfff17 	ldw	r2,-4(fp)
   24c88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24c8c:	e0bffd17 	ldw	r2,-12(fp)
   24c90:	10800017 	ldw	r2,0(r2)
   24c94:	e0fffd17 	ldw	r3,-12(fp)
   24c98:	18c00117 	ldw	r3,4(r3)
   24c9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24ca0:	e0bffd17 	ldw	r2,-12(fp)
   24ca4:	10800117 	ldw	r2,4(r2)
   24ca8:	e0fffd17 	ldw	r3,-12(fp)
   24cac:	18c00017 	ldw	r3,0(r3)
   24cb0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24cb4:	e0bffd17 	ldw	r2,-12(fp)
   24cb8:	e0fffd17 	ldw	r3,-12(fp)
   24cbc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24cc0:	e0bffd17 	ldw	r2,-12(fp)
   24cc4:	e0fffd17 	ldw	r3,-12(fp)
   24cc8:	10c00015 	stw	r3,0(r2)
   24ccc:	e0bffb17 	ldw	r2,-20(fp)
   24cd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24cd4:	e0bffe17 	ldw	r2,-8(fp)
   24cd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24cdc:	e037883a 	mov	sp,fp
   24ce0:	df000017 	ldw	fp,0(sp)
   24ce4:	dec00104 	addi	sp,sp,4
   24ce8:	f800283a 	ret

00024cec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24cec:	defffb04 	addi	sp,sp,-20
   24cf0:	dfc00415 	stw	ra,16(sp)
   24cf4:	df000315 	stw	fp,12(sp)
   24cf8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24cfc:	d0a00c17 	ldw	r2,-32720(gp)
   24d00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24d04:	d0a6b217 	ldw	r2,-25912(gp)
   24d08:	10800044 	addi	r2,r2,1
   24d0c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24d10:	00002e06 	br	24dcc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24d14:	e0bffd17 	ldw	r2,-12(fp)
   24d18:	10800017 	ldw	r2,0(r2)
   24d1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24d20:	e0bffd17 	ldw	r2,-12(fp)
   24d24:	10800403 	ldbu	r2,16(r2)
   24d28:	10803fcc 	andi	r2,r2,255
   24d2c:	10000426 	beq	r2,zero,24d40 <alt_tick+0x54>
   24d30:	d0a6b217 	ldw	r2,-25912(gp)
   24d34:	1000021e 	bne	r2,zero,24d40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24d38:	e0bffd17 	ldw	r2,-12(fp)
   24d3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24d40:	e0bffd17 	ldw	r2,-12(fp)
   24d44:	10800217 	ldw	r2,8(r2)
   24d48:	d0e6b217 	ldw	r3,-25912(gp)
   24d4c:	18801d36 	bltu	r3,r2,24dc4 <alt_tick+0xd8>
   24d50:	e0bffd17 	ldw	r2,-12(fp)
   24d54:	10800403 	ldbu	r2,16(r2)
   24d58:	10803fcc 	andi	r2,r2,255
   24d5c:	1000191e 	bne	r2,zero,24dc4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24d60:	e0bffd17 	ldw	r2,-12(fp)
   24d64:	10800317 	ldw	r2,12(r2)
   24d68:	e0fffd17 	ldw	r3,-12(fp)
   24d6c:	18c00517 	ldw	r3,20(r3)
   24d70:	1809883a 	mov	r4,r3
   24d74:	103ee83a 	callr	r2
   24d78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24d7c:	e0bfff17 	ldw	r2,-4(fp)
   24d80:	1000031e 	bne	r2,zero,24d90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24d84:	e13ffd17 	ldw	r4,-12(fp)
   24d88:	0024c540 	call	24c54 <alt_alarm_stop>
   24d8c:	00000d06 	br	24dc4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24d90:	e0bffd17 	ldw	r2,-12(fp)
   24d94:	10c00217 	ldw	r3,8(r2)
   24d98:	e0bfff17 	ldw	r2,-4(fp)
   24d9c:	1887883a 	add	r3,r3,r2
   24da0:	e0bffd17 	ldw	r2,-12(fp)
   24da4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24da8:	e0bffd17 	ldw	r2,-12(fp)
   24dac:	10c00217 	ldw	r3,8(r2)
   24db0:	d0a6b217 	ldw	r2,-25912(gp)
   24db4:	1880032e 	bgeu	r3,r2,24dc4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24db8:	e0bffd17 	ldw	r2,-12(fp)
   24dbc:	00c00044 	movi	r3,1
   24dc0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24dc4:	e0bffe17 	ldw	r2,-8(fp)
   24dc8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24dcc:	e0fffd17 	ldw	r3,-12(fp)
   24dd0:	d0a00c04 	addi	r2,gp,-32720
   24dd4:	18bfcf1e 	bne	r3,r2,24d14 <__alt_data_end+0xfffebd14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24dd8:	0001883a 	nop
}
   24ddc:	e037883a 	mov	sp,fp
   24de0:	dfc00117 	ldw	ra,4(sp)
   24de4:	df000017 	ldw	fp,0(sp)
   24de8:	dec00204 	addi	sp,sp,8
   24dec:	f800283a 	ret

00024df0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   24df0:	deffff04 	addi	sp,sp,-4
   24df4:	df000015 	stw	fp,0(sp)
   24df8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24dfc:	000170fa 	wrctl	ienable,zero
}
   24e00:	e037883a 	mov	sp,fp
   24e04:	df000017 	ldw	fp,0(sp)
   24e08:	dec00104 	addi	sp,sp,4
   24e0c:	f800283a 	ret

00024e10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24e10:	defffa04 	addi	sp,sp,-24
   24e14:	dfc00515 	stw	ra,20(sp)
   24e18:	df000415 	stw	fp,16(sp)
   24e1c:	df000404 	addi	fp,sp,16
   24e20:	e13ffe15 	stw	r4,-8(fp)
   24e24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24e28:	e0bfff17 	ldw	r2,-4(fp)
   24e2c:	10800017 	ldw	r2,0(r2)
   24e30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24e34:	e13ffe17 	ldw	r4,-8(fp)
   24e38:	00202f80 	call	202f8 <strlen>
   24e3c:	10800044 	addi	r2,r2,1
   24e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24e44:	00000d06 	br	24e7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24e48:	e0bffc17 	ldw	r2,-16(fp)
   24e4c:	10c00217 	ldw	r3,8(r2)
   24e50:	e0bffd17 	ldw	r2,-12(fp)
   24e54:	1809883a 	mov	r4,r3
   24e58:	e17ffe17 	ldw	r5,-8(fp)
   24e5c:	100d883a 	mov	r6,r2
   24e60:	00250d40 	call	250d4 <memcmp>
   24e64:	1000021e 	bne	r2,zero,24e70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24e68:	e0bffc17 	ldw	r2,-16(fp)
   24e6c:	00000706 	br	24e8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24e70:	e0bffc17 	ldw	r2,-16(fp)
   24e74:	10800017 	ldw	r2,0(r2)
   24e78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24e7c:	e0fffc17 	ldw	r3,-16(fp)
   24e80:	e0bfff17 	ldw	r2,-4(fp)
   24e84:	18bff01e 	bne	r3,r2,24e48 <__alt_data_end+0xfffebe48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24e88:	0005883a 	mov	r2,zero
}
   24e8c:	e037883a 	mov	sp,fp
   24e90:	dfc00117 	ldw	ra,4(sp)
   24e94:	df000017 	ldw	fp,0(sp)
   24e98:	dec00204 	addi	sp,sp,8
   24e9c:	f800283a 	ret

00024ea0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24ea0:	defffb04 	addi	sp,sp,-20
   24ea4:	dfc00415 	stw	ra,16(sp)
   24ea8:	df000315 	stw	fp,12(sp)
   24eac:	df000304 	addi	fp,sp,12
   24eb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24eb4:	008000b4 	movhi	r2,2
   24eb8:	109bae04 	addi	r2,r2,28344
   24ebc:	10800017 	ldw	r2,0(r2)
   24ec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24ec4:	00003106 	br	24f8c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   24ec8:	e0bffd17 	ldw	r2,-12(fp)
   24ecc:	10800217 	ldw	r2,8(r2)
   24ed0:	1009883a 	mov	r4,r2
   24ed4:	00202f80 	call	202f8 <strlen>
   24ed8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24edc:	e0bffd17 	ldw	r2,-12(fp)
   24ee0:	10c00217 	ldw	r3,8(r2)
   24ee4:	e0bffe17 	ldw	r2,-8(fp)
   24ee8:	10bfffc4 	addi	r2,r2,-1
   24eec:	1885883a 	add	r2,r3,r2
   24ef0:	10800003 	ldbu	r2,0(r2)
   24ef4:	10803fcc 	andi	r2,r2,255
   24ef8:	1080201c 	xori	r2,r2,128
   24efc:	10bfe004 	addi	r2,r2,-128
   24f00:	10800bd8 	cmpnei	r2,r2,47
   24f04:	1000031e 	bne	r2,zero,24f14 <alt_find_file+0x74>
    {
      len -= 1;
   24f08:	e0bffe17 	ldw	r2,-8(fp)
   24f0c:	10bfffc4 	addi	r2,r2,-1
   24f10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24f14:	e0bffe17 	ldw	r2,-8(fp)
   24f18:	e0ffff17 	ldw	r3,-4(fp)
   24f1c:	1885883a 	add	r2,r3,r2
   24f20:	10800003 	ldbu	r2,0(r2)
   24f24:	10803fcc 	andi	r2,r2,255
   24f28:	1080201c 	xori	r2,r2,128
   24f2c:	10bfe004 	addi	r2,r2,-128
   24f30:	10800be0 	cmpeqi	r2,r2,47
   24f34:	1000081e 	bne	r2,zero,24f58 <alt_find_file+0xb8>
   24f38:	e0bffe17 	ldw	r2,-8(fp)
   24f3c:	e0ffff17 	ldw	r3,-4(fp)
   24f40:	1885883a 	add	r2,r3,r2
   24f44:	10800003 	ldbu	r2,0(r2)
   24f48:	10803fcc 	andi	r2,r2,255
   24f4c:	1080201c 	xori	r2,r2,128
   24f50:	10bfe004 	addi	r2,r2,-128
   24f54:	10000a1e 	bne	r2,zero,24f80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   24f58:	e0bffd17 	ldw	r2,-12(fp)
   24f5c:	10c00217 	ldw	r3,8(r2)
   24f60:	e0bffe17 	ldw	r2,-8(fp)
   24f64:	1809883a 	mov	r4,r3
   24f68:	e17fff17 	ldw	r5,-4(fp)
   24f6c:	100d883a 	mov	r6,r2
   24f70:	00250d40 	call	250d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24f74:	1000021e 	bne	r2,zero,24f80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24f78:	e0bffd17 	ldw	r2,-12(fp)
   24f7c:	00000806 	br	24fa0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   24f80:	e0bffd17 	ldw	r2,-12(fp)
   24f84:	10800017 	ldw	r2,0(r2)
   24f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24f8c:	e0fffd17 	ldw	r3,-12(fp)
   24f90:	008000b4 	movhi	r2,2
   24f94:	109bae04 	addi	r2,r2,28344
   24f98:	18bfcb1e 	bne	r3,r2,24ec8 <__alt_data_end+0xfffebec8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24f9c:	0005883a 	mov	r2,zero
}
   24fa0:	e037883a 	mov	sp,fp
   24fa4:	dfc00117 	ldw	ra,4(sp)
   24fa8:	df000017 	ldw	fp,0(sp)
   24fac:	dec00204 	addi	sp,sp,8
   24fb0:	f800283a 	ret

00024fb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24fb4:	defffa04 	addi	sp,sp,-24
   24fb8:	dfc00515 	stw	ra,20(sp)
   24fbc:	df000415 	stw	fp,16(sp)
   24fc0:	dc000315 	stw	r16,12(sp)
   24fc4:	df000404 	addi	fp,sp,16
   24fc8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24fcc:	00bffa04 	movi	r2,-24
   24fd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24fd4:	e03ffc15 	stw	zero,-16(fp)
   24fd8:	00002106 	br	25060 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   24fdc:	040000b4 	movhi	r16,2
   24fe0:	84173204 	addi	r16,r16,23752
   24fe4:	e0bffc17 	ldw	r2,-16(fp)
   24fe8:	1009883a 	mov	r4,r2
   24fec:	01400304 	movi	r5,12
   24ff0:	0022d4c0 	call	22d4c <__mulsi3>
   24ff4:	8085883a 	add	r2,r16,r2
   24ff8:	10800017 	ldw	r2,0(r2)
   24ffc:	1000151e 	bne	r2,zero,25054 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   25000:	040000b4 	movhi	r16,2
   25004:	84173204 	addi	r16,r16,23752
   25008:	e0bffc17 	ldw	r2,-16(fp)
   2500c:	1009883a 	mov	r4,r2
   25010:	01400304 	movi	r5,12
   25014:	0022d4c0 	call	22d4c <__mulsi3>
   25018:	8085883a 	add	r2,r16,r2
   2501c:	e0fffe17 	ldw	r3,-8(fp)
   25020:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   25024:	008000b4 	movhi	r2,2
   25028:	109bb204 	addi	r2,r2,28360
   2502c:	10c00017 	ldw	r3,0(r2)
   25030:	e0bffc17 	ldw	r2,-16(fp)
   25034:	1880040e 	bge	r3,r2,25048 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   25038:	008000b4 	movhi	r2,2
   2503c:	109bb204 	addi	r2,r2,28360
   25040:	e0fffc17 	ldw	r3,-16(fp)
   25044:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   25048:	e0bffc17 	ldw	r2,-16(fp)
   2504c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   25050:	00000606 	br	2506c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25054:	e0bffc17 	ldw	r2,-16(fp)
   25058:	10800044 	addi	r2,r2,1
   2505c:	e0bffc15 	stw	r2,-16(fp)
   25060:	e0bffc17 	ldw	r2,-16(fp)
   25064:	10800810 	cmplti	r2,r2,32
   25068:	103fdc1e 	bne	r2,zero,24fdc <__alt_data_end+0xfffebfdc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2506c:	e0bffd17 	ldw	r2,-12(fp)
}
   25070:	e6ffff04 	addi	sp,fp,-4
   25074:	dfc00217 	ldw	ra,8(sp)
   25078:	df000117 	ldw	fp,4(sp)
   2507c:	dc000017 	ldw	r16,0(sp)
   25080:	dec00304 	addi	sp,sp,12
   25084:	f800283a 	ret

00025088 <atexit>:
   25088:	200b883a 	mov	r5,r4
   2508c:	000d883a 	mov	r6,zero
   25090:	0009883a 	mov	r4,zero
   25094:	000f883a 	mov	r7,zero
   25098:	00251501 	jmpi	25150 <__register_exitproc>

0002509c <exit>:
   2509c:	defffe04 	addi	sp,sp,-8
   250a0:	000b883a 	mov	r5,zero
   250a4:	dc000015 	stw	r16,0(sp)
   250a8:	dfc00115 	stw	ra,4(sp)
   250ac:	2021883a 	mov	r16,r4
   250b0:	00252640 	call	25264 <__call_exitprocs>
   250b4:	008000b4 	movhi	r2,2
   250b8:	109baa04 	addi	r2,r2,28328
   250bc:	11000017 	ldw	r4,0(r2)
   250c0:	20800f17 	ldw	r2,60(r4)
   250c4:	10000126 	beq	r2,zero,250cc <exit+0x30>
   250c8:	103ee83a 	callr	r2
   250cc:	8009883a 	mov	r4,r16
   250d0:	00253f80 	call	253f8 <_exit>

000250d4 <memcmp>:
   250d4:	01c000c4 	movi	r7,3
   250d8:	3980192e 	bgeu	r7,r6,25140 <memcmp+0x6c>
   250dc:	2144b03a 	or	r2,r4,r5
   250e0:	11c4703a 	and	r2,r2,r7
   250e4:	10000f26 	beq	r2,zero,25124 <memcmp+0x50>
   250e8:	20800003 	ldbu	r2,0(r4)
   250ec:	28c00003 	ldbu	r3,0(r5)
   250f0:	10c0151e 	bne	r2,r3,25148 <memcmp+0x74>
   250f4:	31bfff84 	addi	r6,r6,-2
   250f8:	01ffffc4 	movi	r7,-1
   250fc:	00000406 	br	25110 <memcmp+0x3c>
   25100:	20800003 	ldbu	r2,0(r4)
   25104:	28c00003 	ldbu	r3,0(r5)
   25108:	31bfffc4 	addi	r6,r6,-1
   2510c:	10c00e1e 	bne	r2,r3,25148 <memcmp+0x74>
   25110:	21000044 	addi	r4,r4,1
   25114:	29400044 	addi	r5,r5,1
   25118:	31fff91e 	bne	r6,r7,25100 <__alt_data_end+0xfffec100>
   2511c:	0005883a 	mov	r2,zero
   25120:	f800283a 	ret
   25124:	20c00017 	ldw	r3,0(r4)
   25128:	28800017 	ldw	r2,0(r5)
   2512c:	1880041e 	bne	r3,r2,25140 <memcmp+0x6c>
   25130:	31bfff04 	addi	r6,r6,-4
   25134:	21000104 	addi	r4,r4,4
   25138:	29400104 	addi	r5,r5,4
   2513c:	39bff936 	bltu	r7,r6,25124 <__alt_data_end+0xfffec124>
   25140:	303fe91e 	bne	r6,zero,250e8 <__alt_data_end+0xfffec0e8>
   25144:	003ff506 	br	2511c <__alt_data_end+0xfffec11c>
   25148:	10c5c83a 	sub	r2,r2,r3
   2514c:	f800283a 	ret

00025150 <__register_exitproc>:
   25150:	008000b4 	movhi	r2,2
   25154:	defffa04 	addi	sp,sp,-24
   25158:	109baa04 	addi	r2,r2,28328
   2515c:	dc000315 	stw	r16,12(sp)
   25160:	14000017 	ldw	r16,0(r2)
   25164:	dc400415 	stw	r17,16(sp)
   25168:	dfc00515 	stw	ra,20(sp)
   2516c:	80805217 	ldw	r2,328(r16)
   25170:	2023883a 	mov	r17,r4
   25174:	10003626 	beq	r2,zero,25250 <__register_exitproc+0x100>
   25178:	10c00117 	ldw	r3,4(r2)
   2517c:	010007c4 	movi	r4,31
   25180:	20c00e16 	blt	r4,r3,251bc <__register_exitproc+0x6c>
   25184:	1a400044 	addi	r9,r3,1
   25188:	8800211e 	bne	r17,zero,25210 <__register_exitproc+0xc0>
   2518c:	18c00084 	addi	r3,r3,2
   25190:	18c7883a 	add	r3,r3,r3
   25194:	18c7883a 	add	r3,r3,r3
   25198:	12400115 	stw	r9,4(r2)
   2519c:	10c7883a 	add	r3,r2,r3
   251a0:	19400015 	stw	r5,0(r3)
   251a4:	0005883a 	mov	r2,zero
   251a8:	dfc00517 	ldw	ra,20(sp)
   251ac:	dc400417 	ldw	r17,16(sp)
   251b0:	dc000317 	ldw	r16,12(sp)
   251b4:	dec00604 	addi	sp,sp,24
   251b8:	f800283a 	ret
   251bc:	00800034 	movhi	r2,0
   251c0:	10800004 	addi	r2,r2,0
   251c4:	10002526 	beq	r2,zero,2525c <__register_exitproc+0x10c>
   251c8:	01006404 	movi	r4,400
   251cc:	d9400015 	stw	r5,0(sp)
   251d0:	d9800115 	stw	r6,4(sp)
   251d4:	d9c00215 	stw	r7,8(sp)
   251d8:	00000000 	call	0 <__reset-0x20000>
   251dc:	d9400017 	ldw	r5,0(sp)
   251e0:	d9800117 	ldw	r6,4(sp)
   251e4:	d9c00217 	ldw	r7,8(sp)
   251e8:	10001c26 	beq	r2,zero,2525c <__register_exitproc+0x10c>
   251ec:	80c05217 	ldw	r3,328(r16)
   251f0:	10000115 	stw	zero,4(r2)
   251f4:	02400044 	movi	r9,1
   251f8:	10c00015 	stw	r3,0(r2)
   251fc:	80805215 	stw	r2,328(r16)
   25200:	10006215 	stw	zero,392(r2)
   25204:	10006315 	stw	zero,396(r2)
   25208:	0007883a 	mov	r3,zero
   2520c:	883fdf26 	beq	r17,zero,2518c <__alt_data_end+0xfffec18c>
   25210:	18d1883a 	add	r8,r3,r3
   25214:	4211883a 	add	r8,r8,r8
   25218:	1211883a 	add	r8,r2,r8
   2521c:	41802215 	stw	r6,136(r8)
   25220:	01000044 	movi	r4,1
   25224:	11806217 	ldw	r6,392(r2)
   25228:	20c8983a 	sll	r4,r4,r3
   2522c:	310cb03a 	or	r6,r6,r4
   25230:	11806215 	stw	r6,392(r2)
   25234:	41c04215 	stw	r7,264(r8)
   25238:	01800084 	movi	r6,2
   2523c:	89bfd31e 	bne	r17,r6,2518c <__alt_data_end+0xfffec18c>
   25240:	11806317 	ldw	r6,396(r2)
   25244:	3108b03a 	or	r4,r6,r4
   25248:	11006315 	stw	r4,396(r2)
   2524c:	003fcf06 	br	2518c <__alt_data_end+0xfffec18c>
   25250:	80805304 	addi	r2,r16,332
   25254:	80805215 	stw	r2,328(r16)
   25258:	003fc706 	br	25178 <__alt_data_end+0xfffec178>
   2525c:	00bfffc4 	movi	r2,-1
   25260:	003fd106 	br	251a8 <__alt_data_end+0xfffec1a8>

00025264 <__call_exitprocs>:
   25264:	008000b4 	movhi	r2,2
   25268:	109baa04 	addi	r2,r2,28328
   2526c:	10800017 	ldw	r2,0(r2)
   25270:	defff404 	addi	sp,sp,-48
   25274:	dd800815 	stw	r22,32(sp)
   25278:	d8800015 	stw	r2,0(sp)
   2527c:	10805204 	addi	r2,r2,328
   25280:	dd000615 	stw	r20,24(sp)
   25284:	dc800415 	stw	r18,16(sp)
   25288:	dfc00b15 	stw	ra,44(sp)
   2528c:	df000a15 	stw	fp,40(sp)
   25290:	ddc00915 	stw	r23,36(sp)
   25294:	dd400715 	stw	r21,28(sp)
   25298:	dcc00515 	stw	r19,20(sp)
   2529c:	dc400315 	stw	r17,12(sp)
   252a0:	dc000215 	stw	r16,8(sp)
   252a4:	2025883a 	mov	r18,r4
   252a8:	2829883a 	mov	r20,r5
   252ac:	d8800115 	stw	r2,4(sp)
   252b0:	05bfffc4 	movi	r22,-1
   252b4:	d8800017 	ldw	r2,0(sp)
   252b8:	14c05217 	ldw	r19,328(r2)
   252bc:	98001d26 	beq	r19,zero,25334 <__call_exitprocs+0xd0>
   252c0:	dd400117 	ldw	r21,4(sp)
   252c4:	98800117 	ldw	r2,4(r19)
   252c8:	173fffc4 	addi	fp,r2,-1
   252cc:	e0000d16 	blt	fp,zero,25304 <__call_exitprocs+0xa0>
   252d0:	14000044 	addi	r16,r2,1
   252d4:	8421883a 	add	r16,r16,r16
   252d8:	8421883a 	add	r16,r16,r16
   252dc:	84402004 	addi	r17,r16,128
   252e0:	9c63883a 	add	r17,r19,r17
   252e4:	9c21883a 	add	r16,r19,r16
   252e8:	a0001e26 	beq	r20,zero,25364 <__call_exitprocs+0x100>
   252ec:	80804017 	ldw	r2,256(r16)
   252f0:	15001c26 	beq	r2,r20,25364 <__call_exitprocs+0x100>
   252f4:	e73fffc4 	addi	fp,fp,-1
   252f8:	843fff04 	addi	r16,r16,-4
   252fc:	8c7fff04 	addi	r17,r17,-4
   25300:	e5bff91e 	bne	fp,r22,252e8 <__alt_data_end+0xfffec2e8>
   25304:	00800034 	movhi	r2,0
   25308:	10800004 	addi	r2,r2,0
   2530c:	10000926 	beq	r2,zero,25334 <__call_exitprocs+0xd0>
   25310:	98800117 	ldw	r2,4(r19)
   25314:	1000311e 	bne	r2,zero,253dc <__call_exitprocs+0x178>
   25318:	98800017 	ldw	r2,0(r19)
   2531c:	10003426 	beq	r2,zero,253f0 <__call_exitprocs+0x18c>
   25320:	9809883a 	mov	r4,r19
   25324:	a8800015 	stw	r2,0(r21)
   25328:	00000000 	call	0 <__reset-0x20000>
   2532c:	acc00017 	ldw	r19,0(r21)
   25330:	983fe41e 	bne	r19,zero,252c4 <__alt_data_end+0xfffec2c4>
   25334:	dfc00b17 	ldw	ra,44(sp)
   25338:	df000a17 	ldw	fp,40(sp)
   2533c:	ddc00917 	ldw	r23,36(sp)
   25340:	dd800817 	ldw	r22,32(sp)
   25344:	dd400717 	ldw	r21,28(sp)
   25348:	dd000617 	ldw	r20,24(sp)
   2534c:	dcc00517 	ldw	r19,20(sp)
   25350:	dc800417 	ldw	r18,16(sp)
   25354:	dc400317 	ldw	r17,12(sp)
   25358:	dc000217 	ldw	r16,8(sp)
   2535c:	dec00c04 	addi	sp,sp,48
   25360:	f800283a 	ret
   25364:	98800117 	ldw	r2,4(r19)
   25368:	80c00017 	ldw	r3,0(r16)
   2536c:	10bfffc4 	addi	r2,r2,-1
   25370:	17001526 	beq	r2,fp,253c8 <__call_exitprocs+0x164>
   25374:	80000015 	stw	zero,0(r16)
   25378:	183fde26 	beq	r3,zero,252f4 <__alt_data_end+0xfffec2f4>
   2537c:	00800044 	movi	r2,1
   25380:	1708983a 	sll	r4,r2,fp
   25384:	98806217 	ldw	r2,392(r19)
   25388:	9dc00117 	ldw	r23,4(r19)
   2538c:	2084703a 	and	r2,r4,r2
   25390:	1000061e 	bne	r2,zero,253ac <__call_exitprocs+0x148>
   25394:	183ee83a 	callr	r3
   25398:	98800117 	ldw	r2,4(r19)
   2539c:	15ffc51e 	bne	r2,r23,252b4 <__alt_data_end+0xfffec2b4>
   253a0:	a8800017 	ldw	r2,0(r21)
   253a4:	14ffd326 	beq	r2,r19,252f4 <__alt_data_end+0xfffec2f4>
   253a8:	003fc206 	br	252b4 <__alt_data_end+0xfffec2b4>
   253ac:	98806317 	ldw	r2,396(r19)
   253b0:	2084703a 	and	r2,r4,r2
   253b4:	1000061e 	bne	r2,zero,253d0 <__call_exitprocs+0x16c>
   253b8:	89400017 	ldw	r5,0(r17)
   253bc:	9009883a 	mov	r4,r18
   253c0:	183ee83a 	callr	r3
   253c4:	003ff406 	br	25398 <__alt_data_end+0xfffec398>
   253c8:	9f000115 	stw	fp,4(r19)
   253cc:	003fea06 	br	25378 <__alt_data_end+0xfffec378>
   253d0:	89000017 	ldw	r4,0(r17)
   253d4:	183ee83a 	callr	r3
   253d8:	003fef06 	br	25398 <__alt_data_end+0xfffec398>
   253dc:	98800017 	ldw	r2,0(r19)
   253e0:	982b883a 	mov	r21,r19
   253e4:	1027883a 	mov	r19,r2
   253e8:	983fb61e 	bne	r19,zero,252c4 <__alt_data_end+0xfffec2c4>
   253ec:	003fd106 	br	25334 <__alt_data_end+0xfffec334>
   253f0:	0005883a 	mov	r2,zero
   253f4:	003ffa06 	br	253e0 <__alt_data_end+0xfffec3e0>

000253f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   253f8:	defffd04 	addi	sp,sp,-12
   253fc:	df000215 	stw	fp,8(sp)
   25400:	df000204 	addi	fp,sp,8
   25404:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25408:	0001883a 	nop
   2540c:	e0bfff17 	ldw	r2,-4(fp)
   25410:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25414:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25418:	10000226 	beq	r2,zero,25424 <_exit+0x2c>
    ALT_SIM_FAIL();
   2541c:	002af070 	cmpltui	zero,zero,43969
   25420:	00000106 	br	25428 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25424:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25428:	003fff06 	br	25428 <__alt_data_end+0xfffec428>
